{"version":3,"file":"focus-trap.umd.js","sources":["../index.js"],"sourcesContent":["import { tabbable, focusable, isFocusable, isTabbable } from 'tabbable';\n\nconst activeFocusTraps = {\n  activateTrap(trapStack, trap) {\n    if (trapStack.length > 0) {\n      const activeTrap = trapStack[trapStack.length - 1];\n      if (activeTrap !== trap) {\n        activeTrap.pause();\n      }\n    }\n\n    const trapIndex = trapStack.indexOf(trap);\n    if (trapIndex === -1) {\n      trapStack.push(trap);\n    } else {\n      // move this existing trap to the front of the queue\n      trapStack.splice(trapIndex, 1);\n      trapStack.push(trap);\n    }\n  },\n\n  deactivateTrap(trapStack, trap) {\n    const trapIndex = trapStack.indexOf(trap);\n    if (trapIndex !== -1) {\n      trapStack.splice(trapIndex, 1);\n    }\n\n    if (trapStack.length > 0) {\n      trapStack[trapStack.length - 1].unpause();\n    }\n  },\n};\n\nconst isSelectableInput = function (node) {\n  return (\n    node.tagName &&\n    node.tagName.toLowerCase() === 'input' &&\n    typeof node.select === 'function'\n  );\n};\n\nconst isEscapeEvent = function (e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n};\n\nconst isTabEvent = function (e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n};\n\n// checks for TAB by default\nconst isKeyForward = function (e) {\n  return isTabEvent(e) && !e.shiftKey;\n};\n\n// checks for SHIFT+TAB by default\nconst isKeyBackward = function (e) {\n  return isTabEvent(e) && e.shiftKey;\n};\n\nconst delay = function (fn) {\n  return setTimeout(fn, 0);\n};\n\n// Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\nconst findIndex = function (arr, fn) {\n  let idx = -1;\n\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n\n    return true; // next\n  });\n\n  return idx;\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nconst valueOrHandler = function (value, ...params) {\n  return typeof value === 'function' ? value(...params) : value;\n};\n\nconst getActualTarget = function (event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function'\n    ? event.composedPath()[0]\n    : event.target;\n};\n\n// NOTE: this must be _outside_ `createFocusTrap()` to make sure all traps in this\n//  current instance use the same stack if `userOptions.trapStack` isn't specified\nconst internalTrapStack = [];\n\nconst createFocusTrap = function (elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  const doc = userOptions?.document || document;\n\n  const trapStack = userOptions?.trapStack || internalTrapStack;\n\n  const config = {\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    isKeyForward,\n    isKeyBackward,\n    ...userOptions,\n  };\n\n  const state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   firstTabbableNode: HTMLElement|null,\n    //   lastTabbableNode: HTMLElement|null,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [], // same order/length as `containers` list\n\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined,\n  };\n\n  let trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n  const getOption = (configOverrideOptions, optionName, configOptionName) => {\n    return configOverrideOptions &&\n      configOverrideOptions[optionName] !== undefined\n      ? configOverrideOptions[optionName]\n      : config[configOptionName || optionName];\n  };\n\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n  const findContainerIndex = function (element) {\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(\n      ({ container, tabbableNodes }) =>\n        container.contains(element) ||\n        // fall back to explicit tabbable search which will take into consideration any\n        //  web components if the `tabbableOptions.getShadowRoot` option was used for\n        //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n        //  look inside web components even if open)\n        tabbableNodes.find((node) => node === element)\n    );\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n  const getNodeForOption = function (optionName, ...params) {\n    let optionValue = config[optionName];\n\n    if (typeof optionValue === 'function') {\n      optionValue = optionValue(...params);\n    }\n\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\n        `\\`${optionName}\\` was specified but was not a node, or did not return a node`\n      );\n    }\n\n    let node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      if (!node) {\n        throw new Error(\n          `\\`${optionName}\\` as selector refers to no known node`\n        );\n      }\n    }\n\n    return node;\n  };\n\n  const getInitialFocusNode = function () {\n    let node = getNodeForOption('initialFocus');\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n\n    if (node === undefined) {\n      // option not specified: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        const firstTabbableGroup = state.tabbableGroups[0];\n        const firstTabbableNode =\n          firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n\n    if (!node) {\n      throw new Error(\n        'Your focus-trap needs to have at least one focusable element'\n      );\n    }\n\n    return node;\n  };\n\n  const updateTabbableNodes = function () {\n    state.containerGroups = state.containers.map((container) => {\n      const tabbableNodes = tabbable(container, config.tabbableOptions);\n\n      // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes\n      const focusableNodes = focusable(container, config.tabbableOptions);\n\n      return {\n        container,\n        tabbableNodes,\n        focusableNodes,\n        firstTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[0] : null,\n        lastTabbableNode:\n          tabbableNodes.length > 0\n            ? tabbableNodes[tabbableNodes.length - 1]\n            : null,\n\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode(node, forward = true) {\n          // NOTE: If tabindex is positive (in order to manipulate the tab order separate\n          //  from the DOM order), this __will not work__ because the list of focusableNodes,\n          //  while it contains tabbable nodes, does not sort its nodes in any order other\n          //  than DOM order, because it can't: Where would you place focusable (but not\n          //  tabbable) nodes in that order? They have no order, because they aren't tabbale...\n          // Support for positive tabindex is already broken and hard to manage (possibly\n          //  not supportable, TBD), so this isn't going to make things worse than they\n          //  already are, and at least makes things better for the majority of cases where\n          //  tabindex is either 0/unset or negative.\n          // FYI, positive tabindex issue: https://github.com/focus-trap/focus-trap/issues/375\n          const nodeIdx = focusableNodes.findIndex((n) => n === node);\n          if (nodeIdx < 0) {\n            return undefined;\n          }\n\n          if (forward) {\n            return focusableNodes\n              .slice(nodeIdx + 1)\n              .find((n) => isTabbable(n, config.tabbableOptions));\n          }\n\n          return focusableNodes\n            .slice(0, nodeIdx)\n            .reverse()\n            .find((n) => isTabbable(n, config.tabbableOptions));\n        },\n      };\n    });\n\n    state.tabbableGroups = state.containerGroups.filter(\n      (group) => group.tabbableNodes.length > 0\n    );\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (\n      state.tabbableGroups.length <= 0 &&\n      !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error(\n        'Your focus-trap must have at least one container with at least one tabbable node in it at all times'\n      );\n    }\n  };\n\n  const tryFocus = function (node) {\n    if (node === false) {\n      return;\n    }\n\n    if (node === doc.activeElement) {\n      return;\n    }\n\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n\n    node.focus({ preventScroll: !!config.preventScroll });\n    state.mostRecentlyFocusedNode = node;\n\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n\n  const getReturnFocusNode = function (previousActiveElement) {\n    const node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  const checkPointerDown = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked (and if not focusable, to \"nothing\"); by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node), whether the\n        //  outside click was on a focusable node or not\n        returnFocus: config.returnFocusOnDeactivate,\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  const checkFocusIn = function (e) {\n    const target = getActualTarget(e);\n    const targetContained = findContainerIndex(target) >= 0;\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      e.stopImmediatePropagation();\n      tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n    }\n  };\n\n  // Hijack key nav events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  const checkKeyNav = function (event, isBackward = false) {\n    const target = getActualTarget(event);\n    updateTabbableNodes();\n\n    let destinationNode = null;\n\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      const containerIndex = findContainerIndex(target);\n      const containerGroup =\n        containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back into...\n        if (isBackward) {\n          // ...the last node in the last group\n          destinationNode =\n            state.tabbableGroups[state.tabbableGroups.length - 1]\n              .lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (isBackward) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        let startOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ firstTabbableNode }) => target === firstTabbableNode\n        );\n\n        if (\n          startOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target, false)))\n        ) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          const destinationGroupIndex =\n            startOfGroupIndex === 0\n              ? state.tabbableGroups.length - 1\n              : startOfGroupIndex - 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.lastTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target, false);\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        let lastOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ lastTabbableNode }) => target === lastTabbableNode\n        );\n\n        if (\n          lastOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target)))\n        ) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          const destinationGroupIndex =\n            lastOfGroupIndex === state.tabbableGroups.length - 1\n              ? 0\n              : lastOfGroupIndex + 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.firstTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target);\n        }\n      }\n    } else {\n      // no groups available\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n\n    if (destinationNode) {\n      if (isTabEvent(event)) {\n        // since tab natively moves focus, we wouldn't have a destination node unless we\n        //  were on the edge of a container and had to move to the next/previous edge, in\n        //  which case we want to prevent default to keep the browser from moving focus\n        //  to where it normally would\n        event.preventDefault();\n      }\n      tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n\n  const checkKey = function (event) {\n    if (\n      isEscapeEvent(event) &&\n      valueOrHandler(config.escapeDeactivates, event) !== false\n    ) {\n      event.preventDefault();\n      trap.deactivate();\n      return;\n    }\n\n    if (config.isKeyForward(event) || config.isKeyBackward(event)) {\n      checkKeyNav(event, config.isKeyBackward(event));\n    }\n  };\n\n  const checkClick = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target) >= 0) {\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  const addListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trapStack, trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus\n      ? delay(function () {\n          tryFocus(getInitialFocusNode());\n        })\n      : tryFocus(getInitialFocusNode());\n\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false,\n    });\n\n    return trap;\n  };\n\n  const removeListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n\n    return trap;\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n\n    get paused() {\n      return state.paused;\n    },\n\n    activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n\n      const onActivate = getOption(activateOptions, 'onActivate');\n      const onPostActivate = getOption(activateOptions, 'onPostActivate');\n      const checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n\n      onActivate?.();\n\n      const finishActivation = () => {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        onPostActivate?.();\n      };\n\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(\n          finishActivation,\n          finishActivation\n        );\n        return this;\n      }\n\n      finishActivation();\n      return this;\n    },\n\n    deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      const options = {\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus,\n        ...deactivateOptions,\n      };\n\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n\n      activeFocusTraps.deactivateTrap(trapStack, trap);\n\n      const onDeactivate = getOption(options, 'onDeactivate');\n      const onPostDeactivate = getOption(options, 'onPostDeactivate');\n      const checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      const returnFocus = getOption(\n        options,\n        'returnFocus',\n        'returnFocusOnDeactivate'\n      );\n\n      onDeactivate?.();\n\n      const finishDeactivation = () => {\n        delay(() => {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          onPostDeactivate?.();\n        });\n      };\n\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(\n          getReturnFocusNode(state.nodeFocusedBeforeActivation)\n        ).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n\n      finishDeactivation();\n      return this;\n    },\n\n    pause(pauseOptions) {\n      if (state.paused || !state.active) {\n        return this;\n      }\n\n      const onPause = getOption(pauseOptions, 'onPause');\n      const onPostPause = getOption(pauseOptions, 'onPostPause');\n\n      state.paused = true;\n      onPause?.();\n\n      removeListeners();\n\n      onPostPause?.();\n      return this;\n    },\n\n    unpause(unpauseOptions) {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n\n      const onUnpause = getOption(unpauseOptions, 'onUnpause');\n      const onPostUnpause = getOption(unpauseOptions, 'onPostUnpause');\n\n      state.paused = false;\n      onUnpause?.();\n\n      updateTabbableNodes();\n      addListeners();\n\n      onPostUnpause?.();\n      return this;\n    },\n\n    updateContainerElements(containerElements) {\n      const elementsAsArray = [].concat(containerElements).filter(Boolean);\n\n      state.containers = elementsAsArray.map((element) =>\n        typeof element === 'string' ? doc.querySelector(element) : element\n      );\n\n      if (state.active) {\n        updateTabbableNodes();\n      }\n\n      return this;\n    },\n  };\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n\n  return trap;\n};\n\nexport { createFocusTrap };\n"],"names":["activeFocusTraps","activateTrap","trapStack","trap","length","activeTrap","pause","trapIndex","indexOf","push","splice","deactivateTrap","unpause","isSelectableInput","node","tagName","toLowerCase","select","isEscapeEvent","e","key","keyCode","isTabEvent","isKeyForward","shiftKey","isKeyBackward","delay","fn","setTimeout","findIndex","arr","idx","every","value","i","valueOrHandler","params","getActualTarget","event","target","shadowRoot","composedPath","internalTrapStack","createFocusTrap","elements","userOptions","doc","document","config","_objectSpread","returnFocusOnDeactivate","escapeDeactivates","delayInitialFocus","state","containers","containerGroups","tabbableGroups","nodeFocusedBeforeActivation","mostRecentlyFocusedNode","active","paused","delayInitialFocusTimer","undefined","getOption","configOverrideOptions","optionName","configOptionName","findContainerIndex","element","container","tabbableNodes","contains","find","getNodeForOption","optionValue","Error","querySelector","getInitialFocusNode","activeElement","firstTabbableGroup","firstTabbableNode","updateTabbableNodes","map","tabbable","tabbableOptions","focusableNodes","focusable","lastTabbableNode","nextTabbableNode","forward","nodeIdx","n","slice","isTabbable","reverse","filter","group","tryFocus","focus","preventScroll","getReturnFocusNode","previousActiveElement","checkPointerDown","clickOutsideDeactivates","deactivate","returnFocus","allowOutsideClick","preventDefault","checkFocusIn","targetContained","Document","stopImmediatePropagation","checkKeyNav","isBackward","destinationNode","containerIndex","containerGroup","startOfGroupIndex","isFocusable","destinationGroupIndex","destinationGroup","lastOfGroupIndex","checkKey","checkClick","addListeners","addEventListener","capture","passive","removeListeners","removeEventListener","activate","activateOptions","onActivate","onPostActivate","checkCanFocusTrap","finishActivation","concat","then","deactivateOptions","options","onDeactivate","onPostDeactivate","checkCanReturnFocus","clearTimeout","finishDeactivation","pauseOptions","onPause","onPostPause","unpauseOptions","onUnpause","onPostUnpause","updateContainerElements","containerElements","elementsAsArray","Boolean"],"mappings":"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"}