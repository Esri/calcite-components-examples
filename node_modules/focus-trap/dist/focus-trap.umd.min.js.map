{"version":3,"file":"focus-trap.umd.min.js","sources":["../index.js"],"sourcesContent":["import { tabbable, focusable, isFocusable, isTabbable } from 'tabbable';\n\nconst activeFocusTraps = {\n  activateTrap(trapStack, trap) {\n    if (trapStack.length > 0) {\n      const activeTrap = trapStack[trapStack.length - 1];\n      if (activeTrap !== trap) {\n        activeTrap.pause();\n      }\n    }\n\n    const trapIndex = trapStack.indexOf(trap);\n    if (trapIndex === -1) {\n      trapStack.push(trap);\n    } else {\n      // move this existing trap to the front of the queue\n      trapStack.splice(trapIndex, 1);\n      trapStack.push(trap);\n    }\n  },\n\n  deactivateTrap(trapStack, trap) {\n    const trapIndex = trapStack.indexOf(trap);\n    if (trapIndex !== -1) {\n      trapStack.splice(trapIndex, 1);\n    }\n\n    if (trapStack.length > 0) {\n      trapStack[trapStack.length - 1].unpause();\n    }\n  },\n};\n\nconst isSelectableInput = function (node) {\n  return (\n    node.tagName &&\n    node.tagName.toLowerCase() === 'input' &&\n    typeof node.select === 'function'\n  );\n};\n\nconst isEscapeEvent = function (e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n};\n\nconst isTabEvent = function (e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n};\n\n// checks for TAB by default\nconst isKeyForward = function (e) {\n  return isTabEvent(e) && !e.shiftKey;\n};\n\n// checks for SHIFT+TAB by default\nconst isKeyBackward = function (e) {\n  return isTabEvent(e) && e.shiftKey;\n};\n\nconst delay = function (fn) {\n  return setTimeout(fn, 0);\n};\n\n// Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\nconst findIndex = function (arr, fn) {\n  let idx = -1;\n\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n\n    return true; // next\n  });\n\n  return idx;\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nconst valueOrHandler = function (value, ...params) {\n  return typeof value === 'function' ? value(...params) : value;\n};\n\nconst getActualTarget = function (event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function'\n    ? event.composedPath()[0]\n    : event.target;\n};\n\n// NOTE: this must be _outside_ `createFocusTrap()` to make sure all traps in this\n//  current instance use the same stack if `userOptions.trapStack` isn't specified\nconst internalTrapStack = [];\n\nconst createFocusTrap = function (elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  const doc = userOptions?.document || document;\n\n  const trapStack = userOptions?.trapStack || internalTrapStack;\n\n  const config = {\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    isKeyForward,\n    isKeyBackward,\n    ...userOptions,\n  };\n\n  const state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   firstTabbableNode: HTMLElement|null,\n    //   lastTabbableNode: HTMLElement|null,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [], // same order/length as `containers` list\n\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined,\n  };\n\n  let trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n  const getOption = (configOverrideOptions, optionName, configOptionName) => {\n    return configOverrideOptions &&\n      configOverrideOptions[optionName] !== undefined\n      ? configOverrideOptions[optionName]\n      : config[configOptionName || optionName];\n  };\n\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n  const findContainerIndex = function (element) {\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(\n      ({ container, tabbableNodes }) =>\n        container.contains(element) ||\n        // fall back to explicit tabbable search which will take into consideration any\n        //  web components if the `tabbableOptions.getShadowRoot` option was used for\n        //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n        //  look inside web components even if open)\n        tabbableNodes.find((node) => node === element)\n    );\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n  const getNodeForOption = function (optionName, ...params) {\n    let optionValue = config[optionName];\n\n    if (typeof optionValue === 'function') {\n      optionValue = optionValue(...params);\n    }\n\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\n        `\\`${optionName}\\` was specified but was not a node, or did not return a node`\n      );\n    }\n\n    let node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      if (!node) {\n        throw new Error(\n          `\\`${optionName}\\` as selector refers to no known node`\n        );\n      }\n    }\n\n    return node;\n  };\n\n  const getInitialFocusNode = function () {\n    let node = getNodeForOption('initialFocus');\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n\n    if (node === undefined) {\n      // option not specified: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        const firstTabbableGroup = state.tabbableGroups[0];\n        const firstTabbableNode =\n          firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n\n    if (!node) {\n      throw new Error(\n        'Your focus-trap needs to have at least one focusable element'\n      );\n    }\n\n    return node;\n  };\n\n  const updateTabbableNodes = function () {\n    state.containerGroups = state.containers.map((container) => {\n      const tabbableNodes = tabbable(container, config.tabbableOptions);\n\n      // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes\n      const focusableNodes = focusable(container, config.tabbableOptions);\n\n      return {\n        container,\n        tabbableNodes,\n        focusableNodes,\n        firstTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[0] : null,\n        lastTabbableNode:\n          tabbableNodes.length > 0\n            ? tabbableNodes[tabbableNodes.length - 1]\n            : null,\n\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode(node, forward = true) {\n          // NOTE: If tabindex is positive (in order to manipulate the tab order separate\n          //  from the DOM order), this __will not work__ because the list of focusableNodes,\n          //  while it contains tabbable nodes, does not sort its nodes in any order other\n          //  than DOM order, because it can't: Where would you place focusable (but not\n          //  tabbable) nodes in that order? They have no order, because they aren't tabbale...\n          // Support for positive tabindex is already broken and hard to manage (possibly\n          //  not supportable, TBD), so this isn't going to make things worse than they\n          //  already are, and at least makes things better for the majority of cases where\n          //  tabindex is either 0/unset or negative.\n          // FYI, positive tabindex issue: https://github.com/focus-trap/focus-trap/issues/375\n          const nodeIdx = focusableNodes.findIndex((n) => n === node);\n          if (nodeIdx < 0) {\n            return undefined;\n          }\n\n          if (forward) {\n            return focusableNodes\n              .slice(nodeIdx + 1)\n              .find((n) => isTabbable(n, config.tabbableOptions));\n          }\n\n          return focusableNodes\n            .slice(0, nodeIdx)\n            .reverse()\n            .find((n) => isTabbable(n, config.tabbableOptions));\n        },\n      };\n    });\n\n    state.tabbableGroups = state.containerGroups.filter(\n      (group) => group.tabbableNodes.length > 0\n    );\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (\n      state.tabbableGroups.length <= 0 &&\n      !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error(\n        'Your focus-trap must have at least one container with at least one tabbable node in it at all times'\n      );\n    }\n  };\n\n  const tryFocus = function (node) {\n    if (node === false) {\n      return;\n    }\n\n    if (node === doc.activeElement) {\n      return;\n    }\n\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n\n    node.focus({ preventScroll: !!config.preventScroll });\n    state.mostRecentlyFocusedNode = node;\n\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n\n  const getReturnFocusNode = function (previousActiveElement) {\n    const node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  const checkPointerDown = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked (and if not focusable, to \"nothing\"); by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node), whether the\n        //  outside click was on a focusable node or not\n        returnFocus: config.returnFocusOnDeactivate,\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  const checkFocusIn = function (e) {\n    const target = getActualTarget(e);\n    const targetContained = findContainerIndex(target) >= 0;\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      e.stopImmediatePropagation();\n      tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n    }\n  };\n\n  // Hijack key nav events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  const checkKeyNav = function (event, isBackward = false) {\n    const target = getActualTarget(event);\n    updateTabbableNodes();\n\n    let destinationNode = null;\n\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      const containerIndex = findContainerIndex(target);\n      const containerGroup =\n        containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back into...\n        if (isBackward) {\n          // ...the last node in the last group\n          destinationNode =\n            state.tabbableGroups[state.tabbableGroups.length - 1]\n              .lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (isBackward) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        let startOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ firstTabbableNode }) => target === firstTabbableNode\n        );\n\n        if (\n          startOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target, false)))\n        ) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          const destinationGroupIndex =\n            startOfGroupIndex === 0\n              ? state.tabbableGroups.length - 1\n              : startOfGroupIndex - 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.lastTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target, false);\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        let lastOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ lastTabbableNode }) => target === lastTabbableNode\n        );\n\n        if (\n          lastOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target)))\n        ) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          const destinationGroupIndex =\n            lastOfGroupIndex === state.tabbableGroups.length - 1\n              ? 0\n              : lastOfGroupIndex + 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.firstTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target);\n        }\n      }\n    } else {\n      // no groups available\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n\n    if (destinationNode) {\n      if (isTabEvent(event)) {\n        // since tab natively moves focus, we wouldn't have a destination node unless we\n        //  were on the edge of a container and had to move to the next/previous edge, in\n        //  which case we want to prevent default to keep the browser from moving focus\n        //  to where it normally would\n        event.preventDefault();\n      }\n      tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n\n  const checkKey = function (event) {\n    if (\n      isEscapeEvent(event) &&\n      valueOrHandler(config.escapeDeactivates, event) !== false\n    ) {\n      event.preventDefault();\n      trap.deactivate();\n      return;\n    }\n\n    if (config.isKeyForward(event) || config.isKeyBackward(event)) {\n      checkKeyNav(event, config.isKeyBackward(event));\n    }\n  };\n\n  const checkClick = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target) >= 0) {\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  const addListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trapStack, trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus\n      ? delay(function () {\n          tryFocus(getInitialFocusNode());\n        })\n      : tryFocus(getInitialFocusNode());\n\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false,\n    });\n\n    return trap;\n  };\n\n  const removeListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n\n    return trap;\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n\n    get paused() {\n      return state.paused;\n    },\n\n    activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n\n      const onActivate = getOption(activateOptions, 'onActivate');\n      const onPostActivate = getOption(activateOptions, 'onPostActivate');\n      const checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n\n      onActivate?.();\n\n      const finishActivation = () => {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        onPostActivate?.();\n      };\n\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(\n          finishActivation,\n          finishActivation\n        );\n        return this;\n      }\n\n      finishActivation();\n      return this;\n    },\n\n    deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      const options = {\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus,\n        ...deactivateOptions,\n      };\n\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n\n      activeFocusTraps.deactivateTrap(trapStack, trap);\n\n      const onDeactivate = getOption(options, 'onDeactivate');\n      const onPostDeactivate = getOption(options, 'onPostDeactivate');\n      const checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      const returnFocus = getOption(\n        options,\n        'returnFocus',\n        'returnFocusOnDeactivate'\n      );\n\n      onDeactivate?.();\n\n      const finishDeactivation = () => {\n        delay(() => {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          onPostDeactivate?.();\n        });\n      };\n\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(\n          getReturnFocusNode(state.nodeFocusedBeforeActivation)\n        ).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n\n      finishDeactivation();\n      return this;\n    },\n\n    pause(pauseOptions) {\n      if (state.paused || !state.active) {\n        return this;\n      }\n\n      const onPause = getOption(pauseOptions, 'onPause');\n      const onPostPause = getOption(pauseOptions, 'onPostPause');\n\n      state.paused = true;\n      onPause?.();\n\n      removeListeners();\n\n      onPostPause?.();\n      return this;\n    },\n\n    unpause(unpauseOptions) {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n\n      const onUnpause = getOption(unpauseOptions, 'onUnpause');\n      const onPostUnpause = getOption(unpauseOptions, 'onPostUnpause');\n\n      state.paused = false;\n      onUnpause?.();\n\n      updateTabbableNodes();\n      addListeners();\n\n      onPostUnpause?.();\n      return this;\n    },\n\n    updateContainerElements(containerElements) {\n      const elementsAsArray = [].concat(containerElements).filter(Boolean);\n\n      state.containers = elementsAsArray.map((element) =>\n        typeof element === 'string' ? doc.querySelector(element) : element\n      );\n\n      if (state.active) {\n        updateTabbableNodes();\n      }\n\n      return this;\n    },\n  };\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n\n  return trap;\n};\n\nexport { createFocusTrap };\n"],"names":["activeFocusTraps","trapStack","trap","length","activeTrap","pause","trapIndex","indexOf","splice","push","unpause","isTabEvent","e","key","keyCode","isKeyForward","shiftKey","isKeyBackward","delay","fn","setTimeout","findIndex","arr","idx","every","value","i","valueOrHandler","_len","arguments","params","Array","_key","getActualTarget","event","target","shadowRoot","composedPath","internalTrapStack","elements","userOptions","doc","document","config","_objectSpread","returnFocusOnDeactivate","escapeDeactivates","delayInitialFocus","state","containers","containerGroups","tabbableGroups","nodeFocusedBeforeActivation","mostRecentlyFocusedNode","active","paused","delayInitialFocusTimer","undefined","getOption","configOverrideOptions","optionName","configOptionName","findContainerIndex","element","_ref","container","tabbableNodes","contains","find","node","getNodeForOption","optionValue","_len2","_key2","Error","querySelector","getInitialFocusNode","activeElement","firstTabbableGroup","firstTabbableNode","updateTabbableNodes","map","tabbable","tabbableOptions","focusableNodes","focusable","lastTabbableNode","nextTabbableNode","forward","nodeIdx","n","slice","isTabbable","reverse","filter","group","tryFocus","focus","preventScroll","tagName","toLowerCase","select","isSelectableInput","getReturnFocusNode","previousActiveElement","checkPointerDown","clickOutsideDeactivates","deactivate","returnFocus","allowOutsideClick","preventDefault","checkFocusIn","targetContained","Document","stopImmediatePropagation","checkKey","isBackward","destinationNode","containerIndex","containerGroup","startOfGroupIndex","_ref2","isFocusable","destinationGroupIndex","lastOfGroupIndex","_ref3","checkKeyNav","checkClick","addListeners","addEventListener","capture","passive","removeListeners","removeEventListener","activate","activateOptions","this","onActivate","onPostActivate","checkCanFocusTrap","finishActivation","concat","then","deactivateOptions","options","onDeactivate","onPostDeactivate","checkCanReturnFocus","clearTimeout","finishDeactivation","pauseOptions","onPause","onPostPause","unpauseOptions","onUnpause","onPostUnpause","updateContainerElements","containerElements","elementsAsArray","Boolean"],"mappings":"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"}