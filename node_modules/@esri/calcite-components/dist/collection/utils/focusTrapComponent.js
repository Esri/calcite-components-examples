/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.
 * v1.1.0
 */
import { createFocusTrap } from "focus-trap";
import { focusElement, tabbableOptions } from "./dom";
const trapStack = [];
/**
 * Helper to set up the FocusTrap component.
 *
 * @param {FocusTrapComponent} component The FocusTrap component.
 */
export function connectFocusTrap(component) {
  const { focusTrapEl } = component;
  if (!focusTrapEl) {
    return;
  }
  if (focusTrapEl.tabIndex == null) {
    focusTrapEl.tabIndex = -1;
  }
  const focusTrapOptions = {
    clickOutsideDeactivates: true,
    document: focusTrapEl.ownerDocument,
    escapeDeactivates: false,
    fallbackFocus: focusTrapEl,
    setReturnFocus: (el) => {
      focusElement(el);
      return false;
    },
    tabbableOptions,
    trapStack
  };
  component.focusTrap = createFocusTrap(focusTrapEl, focusTrapOptions);
}
/**
 * Helper to activate the FocusTrap component.
 *
 * @param {FocusTrapComponent} component The FocusTrap component.
 */
export function activateFocusTrap(component) {
  if (!component.focusTrapDisabled) {
    component.focusTrap?.activate();
  }
}
/**
 * Helper to deactivate the FocusTrap component.
 *
 * @param {FocusTrapComponent} component The FocusTrap component.
 */
export function deactivateFocusTrap(component) {
  component.focusTrap?.deactivate();
}
/**
 * Helper to update the element(s) that are used within the FocusTrap component.
 *
 * @param {FocusTrapComponent} component The FocusTrap component.
 * @example
 * const modal = document.querySelector("calcite-modal");
 * const input = document.createElement("calcite-input");
 * content.appendChild(input);
 * await input.componentOnReady();
 * await modal.updateFocusTrapElements();
 * requestAnimationFrame(() => input.setFocus());
 */
export function updateFocusTrapElements(component) {
  component.focusTrap?.updateContainerElements(component.focusTrapEl);
}
