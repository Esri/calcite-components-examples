/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { Alignment, Appearance, Columns, FlipContext, Kind, Layout, LogicalFlowPosition, Position, Scale, SelectionMode, Status, Width } from "./components/interfaces";
import { RequestedItem } from "./components/accordion/interfaces";
import { RegistryEntry, RequestedItem as RequestedItem1 } from "./components/accordion-item/interfaces";
import { ActionMessages } from "./components/action/assets/action/t9n";
import { ActionBarMessages } from "./components/action-bar/assets/action-bar/t9n";
import { ActionGroupMessages } from "./components/action-group/assets/action-group/t9n";
import { EffectivePlacement, LogicalPlacement, MenuPlacement, OverlayPositioning, ReferenceElement } from "./utils/floating-ui";
import { ActionPadMessages } from "./components/action-pad/assets/action-pad/t9n";
import { AlertDuration, Sync } from "./components/alert/interfaces";
import { NumberingSystem } from "./utils/locale";
import { AlertMessages } from "./components/alert/assets/alert/t9n";
import { HeadingLevel } from "./components/functional/Heading";
import { BlockMessages } from "./components/block/assets/block/t9n";
import { BlockSectionToggleDisplay } from "./components/block-section/interfaces";
import { BlockSectionMessages } from "./components/block-section/assets/block-section/t9n";
import { ButtonAlignment, DropdownIconType } from "./components/button/interfaces";
import { ButtonMessages } from "./components/button/assets/button/t9n";
import { CardMessages } from "./components/card/assets/card/t9n";
import { ChipMessages } from "./components/chip/assets/chip/t9n";
import { ColorValue, InternalColor } from "./components/color-picker/interfaces";
import { Format } from "./components/color-picker/utils";
import { ColorPickerMessages } from "./components/color-picker/assets/color-picker/t9n";
import { ComboboxMessages } from "./components/combobox/assets/combobox/t9n";
import { ComboboxChildElement } from "./components/combobox/interfaces";
import { DatePickerMessages } from "./components/date-picker/assets/date-picker/t9n";
import { DateLocaleData } from "./components/date-picker/utils";
import { HoverRange } from "./utils/date";
import { RequestedItem as RequestedItem2 } from "./components/dropdown-group/interfaces";
import { ItemKeyboardEvent } from "./components/dropdown/interfaces";
import { FilterMessages } from "./components/filter/assets/filter/t9n";
import { FlowItemMessages } from "./components/flow-item/assets/flow-item/t9n";
import { ColorStop, DataSeries } from "./components/graph/interfaces";
import { HandleMessages } from "./components/handle/assets/handle/t9n";
import { HandleNudge } from "./components/handle/interfaces";
import { InlineEditableMessages } from "./components/inline-editable/assets/inline-editable/t9n";
import { InputPlacement } from "./components/input/interfaces";
import { InputMessages } from "./components/input/assets/input/t9n";
import { InputNumberMessages } from "./components/input-number/assets/input-number/t9n";
import { InputTextMessages } from "./components/input-text/assets/input-text/t9n";
import { TimePickerMessages } from "./components/time-picker/assets/time-picker/t9n";
import { ItemData } from "./components/list-item/interfaces";
import { SelectionAppearance } from "./components/list/resources";
import { ModalMessages } from "./components/modal/assets/modal/t9n";
import { NoticeMessages } from "./components/notice/assets/notice/t9n";
import { PaginationMessages } from "./components/pagination/assets/pagination/t9n";
import { PanelMessages } from "./components/panel/assets/panel/t9n";
import { ItemData as ItemData1, ListFocusId } from "./components/pick-list/shared-list-logic";
import { ICON_TYPES } from "./components/pick-list/resources";
import { PickListItemMessages } from "./components/pick-list-item/assets/pick-list-item/t9n";
import { PopoverMessages } from "./components/popover/assets/popover/t9n";
import { RatingMessages } from "./components/rating/assets/rating/t9n";
import { ScrimMessages } from "./components/scrim/assets/scrim/t9n";
import { ShellPanelMessages } from "./components/shell-panel/assets/shell-panel/t9n";
import { StepperItemChangeEventDetail, StepperItemEventDetail, StepperItemKeyEventDetail } from "./components/stepper/interfaces";
import { TabID, TabLayout, TabPosition } from "./components/tabs/interfaces";
import { TabChangeEventDetail } from "./components/tab/interfaces";
import { TextAreaMessages } from "./components/text-area/assets/text-area/t9n";
import { TileSelectType } from "./components/tile-select/interfaces";
import { TileSelectGroupLayout } from "./components/tile-select-group/interfaces";
import { TipMessages } from "./components/tip/assets/tip/t9n";
import { TipManagerMessages } from "./components/tip-manager/assets/tip-manager/t9n";
import { TreeItemSelectDetail } from "./components/tree-item/interfaces";
import { ValueListMessages } from "./components/value-list/assets/value-list/t9n";
import { ListItemAndHandle } from "./components/value-list-item/interfaces";
export namespace Components {
    interface CalciteAccordion {
        /**
          * Specifies the appearance of the component.
         */
        "appearance": Extract<"solid" | "transparent", Appearance>;
        /**
          * Specifies the placement of the icon in the header.
         */
        "iconPosition": Position;
        /**
          * Specifies the type of the icon in the header.
         */
        "iconType": "chevron" | "caret" | "plus-minus";
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Specifies the selection mode - `"multiple"` (allow any number of open items), `"single"` (allow one open item), or `"single-persist"` (allow and require one open item).
         */
        "selectionMode": Extract<
    "single" | "single-persist" | "multiple",
    SelectionMode
  >;
    }
    interface CalciteAccordionItem {
        /**
          * Specifies a description for the component.
         */
        "description": string;
        /**
          * When `true`, the component is expanded.
         */
        "expanded": boolean;
        /**
          * Specifies heading text for the component.
         */
        "heading": string;
        /**
          * Specifies an icon to display at the end of the component.
         */
        "iconEnd": string;
        /**
          * Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": FlipContext;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart": string;
    }
    interface CalciteAction {
        /**
          * When `true`, the component is highlighted.
         */
        "active": boolean;
        /**
          * Specifies the horizontal alignment of button elements with text content.
         */
        "alignment": Alignment;
        /**
          * Specifies the appearance of the component.
         */
        "appearance": Extract<"solid" | "transparent", Appearance>;
        /**
          * When `true`, the side padding of the component is reduced. Compact mode is used internally by components, e.g. `calcite-block-section`.
         */
        "compact": boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Specifies an icon to display.
         */
        "icon": string;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        /**
          * When `true`, displays a visual indicator.
         */
        "indicator": boolean;
        /**
          * Specifies the label of the component. If no label is provided, the label inherits what's provided for the `text` prop.
         */
        "label": string;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading": boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<ActionMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": ActionMessages;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies text that accompanies the icon.
         */
        "text": string;
        /**
          * Indicates whether the text is displayed.
         */
        "textEnabled": boolean;
    }
    interface CalciteActionBar {
        /**
          * When `true`, the expand-toggling behavior is disabled.
         */
        "expandDisabled": boolean;
        /**
          * When `true`, the component is expanded.
         */
        "expanded": boolean;
        /**
          * The layout direction of the actions.
         */
        "layout": Extract<"horizontal" | "vertical", Layout>;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<ActionBarMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": ActionBarMessages;
        /**
          * Overflows actions that won't fit into menus.
         */
        "overflowActions": () => Promise<void>;
        /**
          * Disables automatically overflowing `calcite-action`s that won't fit into menus.
         */
        "overflowActionsDisabled": boolean;
        /**
          * Arranges the component depending on the element's `dir` property.
         */
        "position": Position;
        /**
          * Specifies the size of the expand `calcite-action`.
         */
        "scale": Scale;
        /**
          * Sets focus on the component's first focusable element.
         */
        "setFocus": () => Promise<void>;
    }
    interface CalciteActionGroup {
        /**
          * Indicates number of columns.
         */
        "columns": Columns;
        /**
          * When `true`, the component is expanded.
         */
        "expanded": boolean;
        /**
          * Indicates the layout of the component.
         */
        "layout": Layout;
        /**
          * When `true`, the `calcite-action-menu` is open.
         */
        "menuOpen": boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<ActionGroupMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": ActionGroupMessages;
        /**
          * Specifies the size of the `calcite-action-menu`.
         */
        "scale": Scale;
        /**
          * Sets focus on the component's first focusable element.
         */
        "setFocus": () => Promise<void>;
    }
    interface CalciteActionMenu {
        /**
          * When `true`, the component is expanded.
         */
        "expanded": boolean;
        /**
          * Defines the available placements that can be used when a flip occurs.
         */
        "flipPlacements": EffectivePlacement[];
        /**
          * Specifies the text string for the component.
         */
        "label": string;
        /**
          * When `true`, the component is open.
         */
        "open": boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout. `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Determines where the component will be positioned relative to the `referenceElement`.
         */
        "placement": LogicalPlacement;
        /**
          * Specifies the size of the component's trigger `calcite-action`.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
    }
    interface CalciteActionPad {
        /**
          * When `true`, the expand-toggling behavior is disabled.
         */
        "expandDisabled": boolean;
        /**
          * When `true`, the component is expanded.
         */
        "expanded": boolean;
        /**
          * Indicates the layout of the component.
         */
        "layout": Layout;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<ActionPadMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": ActionPadMessages;
        /**
          * Arranges the component depending on the element's `dir` property.
         */
        "position": Position;
        /**
          * Specifies the size of the expand `calcite-action`.
         */
        "scale": Scale;
        /**
          * Sets focus on the component's first focusable element.
         */
        "setFocus": () => Promise<void>;
    }
    interface CalciteAlert {
        /**
          * When `true`, the component closes automatically (recommended for passive, non-blocking alerts).
         */
        "autoClose": boolean;
        /**
          * Specifies the duration before the component automatically closes (only use with `autoClose`).
         */
        "autoCloseDuration": AlertDuration;
        /**
          * When `true`, shows a default recommended icon. Alternatively, pass a Calcite UI Icon name to display a specific icon.
         */
        "icon": string | boolean;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        /**
          * Specifies the kind of the component (will apply to top border and icon).
         */
        "kind": Extract<
    "brand" | "danger" | "info" | "success" | "warning",
    Kind
  >;
        /**
          * Specifies an accessible name for the component.
         */
        "label": string;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<AlertMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": AlertMessages;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem": NumberingSystem;
        /**
          * When `true`, displays and positions the component.
         */
        "open": boolean;
        /**
          * Specifies the placement of the component
         */
        "placement": MenuPlacement;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component's "close" button (the first focusable item).
         */
        "setFocus": () => Promise<void>;
        /**
          * This internal property, managed by a containing calcite-shell, is used to inform the component if special configuration or styles are needed
         */
        "slottedInShell": boolean;
    }
    interface CalciteAvatar {
        /**
          * Specifies the full name of the user.
         */
        "fullName": string;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Specifies the `src` to an image (remember to add a token if the user is private).
         */
        "thumbnail": string;
        /**
          * Specifies the unique id of the user.
         */
        "userId": string;
        /**
          * Specifies the username of the user.
         */
        "username": string;
    }
    interface CalciteBlock {
        /**
          * When `true`, the component is collapsible.
         */
        "collapsible": boolean;
        /**
          * A description for the component, which displays below the heading.
         */
        "description": string;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * When `true`, displays a drag handle in the header.
         */
        "dragHandle": boolean;
        /**
          * The component header text.
         */
        "heading": string;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel": HeadingLevel;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading": boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<BlockMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": BlockMessages;
        /**
          * When `true`, expands the component and its contents.
         */
        "open": boolean;
        /**
          * Displays a status-related indicator icon.
         */
        "status": Status;
    }
    interface CalciteBlockSection {
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<BlockSectionMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": BlockSectionMessages;
        /**
          * When `true`, expands the component and its contents.
         */
        "open": boolean;
        /**
          * Displays a status-related indicator icon.
         */
        "status": Status;
        /**
          * The component header text.
         */
        "text": string;
        /**
          * Specifies the component's toggle display -  `"button"` (selectable header), or  `"switch"` (toggle switch).
         */
        "toggleDisplay": BlockSectionToggleDisplay;
    }
    interface CalciteButton {
        /**
          * Specifies the alignment of the component's elements.
         */
        "alignment": ButtonAlignment;
        /**
          * Specifies the appearance style of the component.
         */
        "appearance": Extract<
    "outline" | "outline-fill" | "solid" | "transparent",
    Appearance
  >;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * The ID of the form that will be associated with the component.  When not set, the component will be associated with its ancestor `<form>` element, if any.
         */
        "form": string;
        /**
          * Specifies the URL of the linked resource, which can be set as an absolute or relative path.
         */
        "href": string;
        /**
          * Specifies an icon to display at the end of the component.
         */
        "iconEnd": string;
        /**
          * Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": FlipContext;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart": string;
        /**
          * Specifies the kind of the component (will apply to border and background if applicable).
         */
        "kind": Extract<"brand" | "danger" | "inverse" | "neutral", Kind>;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * When `true`, a busy indicator is displayed and interaction is disabled.
         */
        "loading": boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<ButtonMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": ButtonMessages;
        /**
          * Specifies the name of the component on form submission.
         */
        "name"?: string;
        /**
          * Defines the relationship between the `href` value and the current document.
          * @mdn [rel](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel)
         */
        "rel": string;
        /**
          * When `true`, adds a round style to the component.
         */
        "round": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies if the component is a child of a `calcite-split-button`.
         */
        "splitChild": "primary" | "secondary" | false;
        /**
          * Specifies where to open the linked document defined in the `href` property.
          * @mdn [target](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target)
         */
        "target": string;
        /**
          * Specifies the default behavior of the button.
          * @mdn [type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type)
         */
        "type": string;
        /**
          * Specifies the width of the component.
         */
        "width": Width;
    }
    interface CalciteCard {
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading": boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<CardMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": CardMessages;
        /**
          * When `true`, the component is selectable.
         */
        "selectable": boolean;
        /**
          * When `true`, the component is selected.
         */
        "selected": boolean;
        /**
          * Sets the placement of the thumbnail defined in the `thumbnail` slot.
         */
        "thumbnailPosition": LogicalFlowPosition;
    }
    interface CalciteCheckbox {
        /**
          * When `true`, the component is checked.
         */
        "checked": boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * The ID of the form that will be associated with the component.  When not set, the component will be associated with its ancestor `<form>` element, if any.
         */
        "form": string;
        /**
          * The `id` attribute of the component. When omitted, a globally unique identifier is used.
         */
        "guid": string;
        /**
          * The hovered state of the checkbox.
         */
        "hovered": boolean;
        /**
          * When `true`, the component is initially indeterminate, which is independent from its `checked` value.  The state is visual only, and can look different across browsers.
          * @mdn [indeterminate](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#indeterminate_state_checkboxes)
         */
        "indeterminate": boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Specifies the name of the component on form submission.
         */
        "name": any;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * The component's value.
         */
        "value": any;
    }
    interface CalciteChip {
        /**
          * Specifies the appearance style of the component.
         */
        "appearance": Extract<"outline" | "outline-fill" | "solid", Appearance>;
        /**
          * When `true`, a close button is added to the component.
         */
        "closable": boolean;
        /**
          * When `true`, hides the component.
         */
        "closed": boolean;
        /**
          * Specifies an icon to display.
         */
        "icon": string;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        /**
          * Specifies the kind of the component (will apply to border and background if applicable).
         */
        "kind": Extract<"brand" | "inverse" | "neutral", Kind>;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<ChipMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": ChipMessages;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * When `closable` is `true`, sets focus on the component's "close" button (the first focusable item).
         */
        "setFocus": () => Promise<void>;
        /**
          * The component's value.
         */
        "value": any;
    }
    interface CalciteColorPicker {
        /**
          * When `false`, an empty color (`null`) will be allowed as a `value`. Otherwise, a color value is enforced on the component.  When `true`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`. When `false`, an empty color (`null`) will be allowed as a `value`.
         */
        "allowEmpty": boolean;
        /**
          * Internal prop for advanced use-cases.
         */
        "color": InternalColor | null;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * The format of `value`.  When `"auto"`, the format will be inferred from `value` when set.
          * @default "auto"
         */
        "format": Format;
        /**
          * When `true`, hides the RGB/HSV channel inputs.
         */
        "hideChannels": boolean;
        /**
          * When `true`, hides the Hex input.
         */
        "hideHex": boolean;
        /**
          * When `true`, hides the saved colors section.
         */
        "hideSaved": boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<ColorPickerMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": ColorPickerMessages;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem": NumberingSystem;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component's first focusable element.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the storage ID for colors.
         */
        "storageId": string;
        /**
          * The component's value, where the value can be a CSS color string, or a RGB, HSL or HSV object.  The type will be preserved as the color is updated.
          * @default "#007ac2"
          * @see [CSS Color](https://developer.mozilla.org/en-US/docs/Web/CSS/color)
          * @see [ColorValue](https://github.com/Esri/calcite-components/blob/master/src/components/color-picker/interfaces.ts#L10)
         */
        "value": ColorValue | null;
    }
    interface CalciteColorPickerHexInput {
        /**
          * When `false`, an empty color (`null`) will be allowed as a `value`. Otherwise, a color value is enforced on the component.  When `true`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`. When `false`, an empty color (`null`) will be allowed as a `value`.
         */
        "allowEmpty": boolean;
        /**
          * Specifies accessible label for the input field.
         */
        "hexLabel": string;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * The Hex value.
         */
        "value": string;
    }
    interface CalciteColorPickerSwatch {
        /**
          * When `true`, the component is active.
         */
        "active": boolean;
        /**
          * The color value.
          * @see https://developer.mozilla.org/en-US/docs/Web/CSS/color_value
         */
        "color": string;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
    }
    interface CalciteCombobox {
        /**
          * When `true`, allows entry of custom values, which are not in the original set of items.
         */
        "allowCustomValues": boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Specifies the component's filtered items.
          * @readonly
         */
        "filteredItems": HTMLCalciteComboboxItemElement[];
        /**
          * Defines the available placements that can be used when a flip occurs.
         */
        "flipPlacements": EffectivePlacement[];
        /**
          * The ID of the form that will be associated with the component.  When not set, the component will be associated with its ancestor `<form>` element, if any.
         */
        "form": string;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Specifies the maximum number of `calcite-combobox-item`s (including nested children) to display before displaying a scrollbar.
         */
        "maxItems": number;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<ComboboxMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": ComboboxMessages;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name": string;
        /**
          * When `true`, displays and positions the component.
         */
        "open": boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Specifies the placeholder text for the input.
         */
        "placeholder": string;
        /**
          * Specifies the placeholder icon for the input.
         */
        "placeholderIcon": string;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "placeholderIconFlipRtl": boolean;
        /**
          * Updates the position of the component.
          * @param delayed
         */
        "reposition": (delayed?: boolean) => Promise<void>;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Specifies the component's selected items.
          * @readonly
         */
        "selectedItems": HTMLCalciteComboboxItemElement[];
        /**
          * specify the selection mode - multiple: allow any number of selected items (default) - single: only one selection) - ancestors: like multiple, but show ancestors of selected items as selected, only deepest children shown in chips
         */
        "selectionMode": Extract<
    "single" | "ancestors" | "multiple",
    SelectionMode
  >;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * The component's value(s) from the selected `calcite-combobox-item`(s).
         */
        "value": string | string[];
    }
    interface CalciteComboboxItem {
        /**
          * When `true`, the component is active.
         */
        "active": boolean;
        /**
          * Specifies the parent and grandparent items, which are set on `calcite-combobox`.
         */
        "ancestors": ComboboxChildElement[];
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * When `true`, omits the component from the `calcite-combobox` filtered search results.
         */
        "filterDisabled": boolean;
        /**
          * The `id` attribute of the component. When omitted, a globally unique identifier is used.
         */
        "guid": string;
        /**
          * Specifies an icon to display.
         */
        "icon": string;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        /**
          * When `true`, the component is selected.
         */
        "selected": boolean;
        /**
          * The component's text.
         */
        "textLabel": string;
        /**
          * The component's value.
         */
        "value": any;
    }
    interface CalciteComboboxItemGroup {
        /**
          * Specifies the parent and grandparent `calcite-combobox-item`s, which are set on `calcite-combobox`.
         */
        "ancestors": ComboboxChildElement[];
        /**
          * Specifies the title of the component.
         */
        "label": string;
    }
    interface CalciteDatePicker {
        /**
          * Specifies the component's active date.
         */
        "activeDate": Date;
        /**
          * When `range` is true, specifies the active `range`. Where `"start"` specifies the starting range date and `"end"` the ending range date.
         */
        "activeRange": "start" | "end";
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel": HeadingLevel;
        /**
          * Specifies the latest allowed date (`"yyyy-mm-dd"`).
         */
        "max": string;
        /**
          * Specifies the latest allowed date as a full date object (`new Date("yyyy-mm-dd")`).
         */
        "maxAsDate": Date;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<DatePickerMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": DatePickerMessages;
        /**
          * Specifies the earliest allowed date (`"yyyy-mm-dd"`).
         */
        "min": string;
        /**
          * Specifies the earliest allowed date as a full date object (`new Date("yyyy-mm-dd")`).
         */
        "minAsDate": Date;
        /**
          * Specifies the Unicode numeral system used by the component for localization. This property cannot be dynamically changed.
         */
        "numberingSystem": NumberingSystem;
        /**
          * When `true`, disables the default behavior on the third click of narrowing or extending the range and instead starts a new range.
         */
        "proximitySelectionDisabled": boolean;
        /**
          * When `true`, activates the component's range mode to allow a start and end date.
         */
        "range": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": "s" | "m" | "l";
        /**
          * Sets focus on the component's first focusable element.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the selected date as a string (`"yyyy-mm-dd"`), or an array of strings for `range` values (`["yyyy-mm-dd", "yyyy-mm-dd"]`).
         */
        "value": string | string[];
        /**
          * Specifies the selected date as a full date object (`new Date("yyyy-mm-dd")`), or an array containing full date objects (`[new Date("yyyy-mm-dd"), new Date("yyyy-mm-dd")]`).
         */
        "valueAsDate": Date | Date[];
    }
    interface CalciteDatePickerDay {
        /**
          * When `true`, the component is active.
         */
        "active": boolean;
        /**
          * Date is in the current month.
         */
        "currentMonth": boolean;
        /**
          * Day of the month to be shown.
         */
        "day": number;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Date is the end of date range
         */
        "endOfRange": boolean;
        /**
          * Date is currently highlighted as part of the range
         */
        "highlighted": boolean;
        /**
          * When `true`, activates the component's range mode to allow a start and end date.
         */
        "range": boolean;
        /**
          * Date is being hovered and within the set range
         */
        "rangeHover": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * When `true`, the component is selected.
         */
        "selected": boolean;
        /**
          * Date is the start of date range
         */
        "startOfRange": boolean;
        /**
          * The component's value.
         */
        "value": Date;
    }
    interface CalciteDatePickerMonth {
        /**
          * Date currently active.
         */
        "activeDate": Date;
        /**
          * End date currently active
         */
        "endDate"?: Date;
        /**
          * The range of dates currently being hovered
         */
        "hoverRange": HoverRange;
        /**
          * CLDR locale data for current locale
         */
        "localeData": DateLocaleData;
        /**
          * Specifies the latest allowed date (`"yyyy-mm-dd"`).
         */
        "max": Date;
        /**
          * Specifies the earliest allowed date (`"yyyy-mm-dd"`).
         */
        "min": Date;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Already selected date.
         */
        "selectedDate": Date;
        /**
          * Start date currently active.
         */
        "startDate"?: Date;
    }
    interface CalciteDatePickerMonthHeader {
        /**
          * Focused date with indicator (will become selected date if user proceeds)
         */
        "activeDate": Date;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel": HeadingLevel;
        /**
          * CLDR locale data for translated calendar info
         */
        "localeData": DateLocaleData;
        /**
          * Specifies the latest allowed date (`"yyyy-mm-dd"`).
         */
        "max": Date;
        /**
          * This property specifies accessible strings for the component's previous month button ,next month button & year input elements. Made into a prop for testing purposes only.
          * @readonly
         */
        "messages": DatePickerMessages;
        /**
          * Specifies the earliest allowed date (`"yyyy-mm-dd"`).
         */
        "min": Date;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Already selected date.
         */
        "selectedDate": Date;
    }
    interface CalciteDropdown {
        /**
          * When `true`, the component will remain open after a selection is made.  If the `selectionMode` of the selected `calcite-dropdown-item`'s containing `calcite-dropdown-group` is `"none"`, the component will always close.
         */
        "closeOnSelectDisabled": boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Defines the available placements that can be used when a flip occurs.
         */
        "flipPlacements": EffectivePlacement[];
        /**
          * Specifies the maximum number of `calcite-dropdown-item`s to display before showing a scroller. Value must be greater than `0`, and does not include `groupTitle`'s from `calcite-dropdown-group`.
         */
        "maxItems": number;
        /**
          * When `true`, displays and positions the component.
         */
        "open": boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Determines where the component will be positioned relative to the container element.
          * @default "bottom-start"
         */
        "placement": MenuPlacement;
        /**
          * Updates the position of the component.
          * @param delayed
         */
        "reposition": (delayed?: boolean) => Promise<void>;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Specifies the component's selected items.
          * @readonly
         */
        "selectedItems": HTMLCalciteDropdownItemElement[];
        /**
          * Sets focus on the component's first focusable element.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the action to open the component from the container element.
         */
        "type": "hover" | "click";
        /**
          * Specifies the width of the component.
         */
        "width": Scale;
    }
    interface CalciteDropdownGroup {
        /**
          * Specifies and displays a group title.
         */
        "groupTitle": string;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Specifies the component's selection mode, where `"multiple"` allows any number of (or no) selected `calcite-dropdown-item`s, `"single"` allows and requires one selected `calcite-dropdown-item`, and `"none"` does not allow selection on `calcite-dropdown-item`s.
         */
        "selectionMode": Extract<"single" | "none" | "multiple", SelectionMode>;
    }
    interface CalciteDropdownItem {
        /**
          * Specifies the URL of the linked resource, which can be set as an absolute or relative path.  Determines if the component will render as an anchor.
         */
        "href": string;
        /**
          * Specifies an icon to display at the end of the component.
         */
        "iconEnd": string;
        /**
          * Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": FlipContext;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart": string;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Specifies the relationship to the linked document defined in `href`.
         */
        "rel": string;
        /**
          * When `true`, the component is selected.
         */
        "selected": boolean;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the frame or window to open the linked document.
         */
        "target": string;
    }
    interface CalciteFab {
        /**
          * Specifies the appearance style of the component.
         */
        "appearance": Extract<"solid" | "outline-fill", Appearance>;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Specifies an icon to display.
          * @default "plus"
         */
        "icon": string;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        /**
          * Specifies the kind of the component (will apply to border and background).
         */
        "kind": Extract<"brand" | "danger" | "inverse" | "neutral", Kind>;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies text to accompany the component's icon.
         */
        "text": string;
        /**
          * When `true`, displays the `text` value in the component.
         */
        "textEnabled": boolean;
    }
    interface CalciteFilter {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * The component's resulting items after filtering.
          * @readonly
         */
        "filteredItems": object[];
        /**
          * Defines the items to filter. The component uses the values as the starting point, and returns items  that contain the string entered in the input, using a partial match and recursive search.  This property is needed to conduct filtering.
         */
        "items": object[];
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<FilterMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": FilterMessages;
        /**
          * Specifies placeholder text for the input element.
         */
        "placeholder": string;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * The component's value.
         */
        "value": string;
    }
    interface CalciteFlow {
        /**
          * Removes the currently active `calcite-flow-item`.
         */
        "back": () => Promise<HTMLCalciteFlowItemElement>;
    }
    interface CalciteFlowItem {
        /**
          * When provided, the method will be called before it is removed from its parent `calcite-flow`.
         */
        "beforeBack": () => Promise<void>;
        /**
          * When `true`, displays a close button in the trailing side of the component's header.
         */
        "closable": boolean;
        /**
          * When `true`, the component will be hidden.
         */
        "closed": boolean;
        /**
          * A description for the component.
         */
        "description": string;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * The component header text.
         */
        "heading": string;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel": HeadingLevel;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading": boolean;
        /**
          * When `true`, the action menu items in the `header-menu-actions` slot are open.
         */
        "menuOpen": boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<FlowItemMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": FlowItemMessages;
        /**
          * Scrolls the component's content to a specified set of coordinates.
          * @example myCalciteFlowItem.scrollContentTo({   left: 0, // Specifies the number of pixels along the X axis to scroll the window or element.   top: 0, // Specifies the number of pixels along the Y axis to scroll the window or element   behavior: "auto" // Specifies whether the scrolling should animate smoothly (smooth), or happen instantly in a single jump (auto, the default value). });
          * @param options
         */
        "scrollContentTo": (options?: ScrollToOptions) => Promise<void>;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * When `true`, displays a back button in the component's header.
         */
        "showBackButton": boolean;
    }
    interface CalciteGraph {
        /**
          * Array of values describing a single color stop ([offset, color, opacity]) These color stops should be sorted by offset value
         */
        "colorStops": ColorStop[];
        /**
          * Array of tuples describing a single data point ([x, y]) These data points should be sorted by x-axis value
         */
        "data": DataSeries;
        /**
          * End of highlight color if highlighting range
         */
        "highlightMax": number;
        /**
          * Start of highlight color if highlighting range
         */
        "highlightMin": number;
        /**
          * Highest point of the range
         */
        "max": number;
        /**
          * Lowest point of the range
         */
        "min": number;
    }
    interface CalciteHandle {
        "activated": boolean;
        /**
          * Value for the button title attribute
         */
        "dragHandle": string;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<HandleMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": HandleMessages;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
    }
    interface CalciteIcon {
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "flipRtl": boolean;
        /**
          * Displays a specific icon.
          * @see [Icons](https://esri.github.io/calcite-ui-icons)
         */
        "icon": string;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Accessible name for the component.  It is recommended to set this value if your icon is semantic.
         */
        "textLabel": string;
    }
    interface CalciteInlineEditable {
        /**
          * Specifies a callback to be executed prior to disabling editing via the controls. When provided, the component's loading state will be handled automatically.
         */
        "afterConfirm": () => Promise<void>;
        /**
          * When `true` and `editingEnabled` is `true`, displays save and cancel controls on the component.
         */
        "controls": boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * When `true`, inline editing is enabled on the component.
         */
        "editingEnabled": boolean;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading": boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<InlineEditableMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": InlineEditableMessages;
        /**
          * Specifies the size of the component. Defaults to the scale of the wrapped `calcite-input` or the scale of the closest wrapping component with a set scale.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
    }
    interface CalciteInput {
        /**
          * Specifies a comma separated list of unique file type specifiers for limiting accepted file types. This property only has an effect when `type` is "file". Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern)
         */
        "accept": string;
        /**
          * Specifies the text alignment of the component's value.
         */
        "alignment": Position;
        /**
          * Specifies the type of content to autocomplete, for use in forms. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
         */
        "autocomplete": string;
        /**
          * When `true`, the component is focused on page load. Only one element can contain `autofocus`. If multiple elements have `autofocus`, the first element will receive focus.
          * @mdn [autofocus](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus)
         */
        "autofocus": boolean;
        /**
          * When `true`, a clear button is displayed when the component has a value. The clear button shows by default for `"search"`, `"time"`, and `"date"` types, and will not display for the `"textarea"` type.
         */
        "clearable": boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
          * @mdn [disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)
         */
        "disabled": boolean;
        "editingEnabled": boolean;
        /**
          * Specifies the action label or icon for the Enter key on virtual keyboards. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint)
         */
        "enterKeyHint": string;
        /**
          * The ID of the form that will be associated with the component.  When not set, the component will be associated with its ancestor `<form>` element, if any.
         */
        "form": string;
        /**
          * When `true`, number values are displayed with a group separator corresponding to the language and country format.
         */
        "groupSeparator": boolean;
        /**
          * When `true`, the component will not be visible.
          * @mdn [hidden](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden)
         */
        "hidden": boolean;
        /**
          * When `true`, shows a default recommended icon. Alternatively, pass a Calcite UI Icon name to display a specific icon.
         */
        "icon": string | boolean;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        /**
          * Specifies the type of content to help devices display an appropriate virtual keyboard. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode)
         */
        "inputMode": string;
        "internalSyncChildElValue": () => Promise<void>;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading": boolean;
        /**
          * When `true`, uses locale formatting for numbers.
         */
        "localeFormat": boolean;
        /**
          * Specifies the maximum value for type "number".
          * @mdn [max](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max)
         */
        "max": number;
        /**
          * Specifies the maximum length of text for the component's value.
          * @mdn [maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength)
         */
        "maxLength": number;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<InputMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": InputMessages;
        /**
          * Specifies the minimum value for `type="number"`.
          * @mdn [min](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min)
         */
        "min": number;
        /**
          * Specifies the minimum length of text for the component's value.
          * @mdn [minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength)
         */
        "minLength": number;
        /**
          * When `true`, the component can accept more than one value. This property only has an effect when `type` is "email" or "file". Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/multiple)
         */
        "multiple": boolean;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
          * @mdn [name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name)
         */
        "name": string;
        /**
          * Specifies the placement of the buttons for `type="number"`.
         */
        "numberButtonType": InputPlacement;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem": NumberingSystem;
        /**
          * Specifies a regex pattern the component's `value` must match for validation. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern)
         */
        "pattern": string;
        /**
          * Specifies placeholder text for the component.
          * @mdn [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder)
         */
        "placeholder": string;
        /**
          * Adds text to the start of the component.
         */
        "prefixText": string;
        /**
          * When `true`, the component's value can be read, but cannot be modified.
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly": boolean;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Selects the text of the component's `value`.
         */
        "selectText": () => Promise<void>;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status": Status;
        /**
          * Specifies the granularity the component's `value` must adhere to.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/step)
         */
        "step": number | "any";
        /**
          * Adds text to the end of the component.
         */
        "suffixText": string;
        /**
          * Specifies the component type.  Note that the following `type`s add type-specific icons by default: `"date"`, `"email"`, `"password"`, `"search"`, `"tel"`, `"time"`.
         */
        "type": | "color"
    | "date"
    | "datetime-local"
    | "email"
    | "file"
    | "image"
    | "month"
    | "number"
    | "password"
    | "search"
    | "tel"
    | "text"
    | "textarea"
    | "time"
    | "url"
    | "week";
        /**
          * The component's value.
         */
        "value": string;
    }
    interface CalciteInputDatePicker {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Defines the available placements that can be used when a flip occurs.
         */
        "flipPlacements": EffectivePlacement[];
        /**
          * The ID of the form that will be associated with the component.  When not set, the component will be associated with its ancestor `<form>` element, if any.
         */
        "form": string;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel": HeadingLevel;
        /**
          * Defines the layout of the component.
         */
        "layout": "horizontal" | "vertical";
        /**
          * Specifies the latest allowed date ("yyyy-mm-dd").
         */
        "max": string;
        /**
          * Specifies the latest allowed date as a full date object.
         */
        "maxAsDate": Date;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<DatePickerMessages>;
        /**
          * Specifies the earliest allowed date ("yyyy-mm-dd").
         */
        "min": string;
        /**
          * Specifies the earliest allowed date as a full date object.
         */
        "minAsDate": Date;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name": string;
        /**
          * Specifies the Unicode numeral system used by the component for localization. This property cannot be dynamically changed.
         */
        "numberingSystem": NumberingSystem;
        /**
          * When `true`, displays the `calcite-date-picker` component.
         */
        "open": boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Specifies the placement of the `calcite-date-picker` relative to the component.
          * @default "bottom-start"
         */
        "placement": MenuPlacement;
        /**
          * When `true`, disables the default behavior on the third click of narrowing or extending the range. Instead starts a new range.
         */
        "proximitySelectionDisabled": boolean;
        /**
          * When `true`, activates a range for the component.
         */
        "range": boolean;
        /**
          * When `true`, the component's value can be read, but controls are not accessible and the value cannot be modified.
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly": boolean;
        /**
          * Updates the position of the component.
          * @param delayed
         */
        "reposition": (delayed?: boolean) => Promise<void>;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": "s" | "m" | "l";
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Selected date as a string in ISO format (YYYY-MM-DD)
         */
        "value": string | string[];
        /**
          * The component's value as a full date object.
         */
        "valueAsDate": Date | Date[];
    }
    interface CalciteInputMessage {
        /**
          * Specifies an icon to display.
         */
        "icon": boolean | string;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status": Status;
    }
    interface CalciteInputNumber {
        /**
          * Specifies the text alignment of the component's value.
         */
        "alignment": Position;
        /**
          * Specifies the type of content to autocomplete, for use in forms. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
         */
        "autocomplete": string;
        /**
          * When `true`, the component is focused on page load. Only one element can contain `autofocus`. If multiple elements have `autofocus`, the first element will receive focus.
          * @mdn [autofocus](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus)
         */
        "autofocus": boolean;
        /**
          * When `true`, a clear button is displayed when the component has a value.
         */
        "clearable": boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
          * @mdn [disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)
         */
        "disabled": boolean;
        "editingEnabled": boolean;
        /**
          * Specifies the action label or icon for the Enter key on virtual keyboards. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint)
         */
        "enterKeyHint": string;
        /**
          * The ID of the form that will be associated with the component.  When not set, the component will be associated with its ancestor `<form>` element, if any.
         */
        "form": string;
        /**
          * When `true`, number values are displayed with a group separator corresponding to the language and country format.
         */
        "groupSeparator": boolean;
        /**
          * When `true`, the component will not be visible.
          * @mdn [hidden](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden)
         */
        "hidden": boolean;
        /**
          * Specifies an icon to display.
          * @futureBreaking Remove boolean type as it is not supported.
         */
        "icon": string | boolean;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        /**
          * Specifies the type of content to help devices display an appropriate virtual keyboard. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode)
         */
        "inputMode": string;
        /**
          * Accessible name for the component's button or hyperlink.
         */
        "label": string;
        /**
          * When `true`, the component is in the loading state and `calcite-progress` is displayed.
         */
        "loading": boolean;
        /**
          * Toggles locale formatting for numbers.
         */
        "localeFormat": boolean;
        /**
          * Specifies the maximum value.
          * @mdn [max](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max)
         */
        "max": number;
        /**
          * Specifies the maximum length of text for the component's value.
          * @mdn [maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength)
         */
        "maxLength": number;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<InputNumberMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": InputNumberMessages;
        /**
          * Specifies the minimum value.
          * @mdn [min](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min)
         */
        "min": number;
        /**
          * Specifies the minimum length of text for the component's value.
          * @mdn [minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength)
         */
        "minLength": number;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
          * @mdn [name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name)
         */
        "name": string;
        /**
          * Specifies the placement of the buttons.
         */
        "numberButtonType": InputPlacement;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem": NumberingSystem;
        /**
          * Specifies placeholder text for the component.
          * @mdn [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder)
         */
        "placeholder": string;
        /**
          * Adds text to the start of the component.
         */
        "prefixText": string;
        /**
          * When `true`, the component's value can be read, but cannot be modified.
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly": boolean;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Selects the text of the component's `value`.
         */
        "selectText": () => Promise<void>;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status": Status;
        /**
          * Specifies the granularity that the component's value must adhere to.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/step)
         */
        "step": number | "any";
        /**
          * Adds text to the end of the component.
         */
        "suffixText": string;
        /**
          * The component's value.
         */
        "value": string;
    }
    interface CalciteInputText {
        /**
          * Specifies the text alignment of the component's value.
         */
        "alignment": Position;
        /**
          * Specifies the type of content to autocomplete, for use in forms. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
         */
        "autocomplete": string;
        /**
          * When `true`, the component is focused on page load. Only one element can contain `autofocus`. If multiple elements have `autofocus`, the first element will receive focus.
          * @mdn [autofocus](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus)
         */
        "autofocus": boolean;
        /**
          * When `true`, a clear button is displayed when the component has a value.
         */
        "clearable": boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
          * @mdn [disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)
         */
        "disabled": boolean;
        "editingEnabled": boolean;
        /**
          * Specifies the action label or icon for the Enter key on virtual keyboards. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint)
         */
        "enterKeyHint": string;
        /**
          * The ID of the form that will be associated with the component.  When not set, the component will be associated with its ancestor `<form>` element, if any.
         */
        "form": string;
        /**
          * When `true`, the component will not be visible.
          * @mdn [hidden](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden)
         */
        "hidden": boolean;
        /**
          * Specifies an icon to display.
          * @futureBreaking Remove boolean type as it is not supported.
         */
        "icon": string | boolean;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        /**
          * Specifies the type of content to help devices display an appropriate virtual keyboard. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode)
         */
        "inputMode": string;
        /**
          * Accessible name for the component's button or hyperlink.
         */
        "label": string;
        /**
          * When `true`, the component is in the loading state and `calcite-progress` is displayed.
         */
        "loading": boolean;
        /**
          * Specifies the maximum length of text for the component's value.
          * @mdn [maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength)
         */
        "maxLength": number;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<InputTextMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": InputTextMessages;
        /**
          * Specifies the minimum length of text for the component's value.
          * @mdn [minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength)
         */
        "minLength": number;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
          * @mdn [name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name)
         */
        "name": string;
        /**
          * Specifies a regex pattern the component's `value` must match for validation. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern)
         */
        "pattern": string;
        /**
          * Specifies placeholder text for the component.
          * @mdn [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder)
         */
        "placeholder": string;
        /**
          * Adds text to the start of the component.
         */
        "prefixText": string;
        /**
          * When `true`, the component's value can be read, but cannot be modified.
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly": boolean;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Selects the text of the component's `value`.
         */
        "selectText": () => Promise<void>;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status": Status;
        /**
          * Adds text to the end of the component.
         */
        "suffixText": string;
        /**
          * The component's value.
         */
        "value": string;
    }
    interface CalciteInputTimePicker {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * The ID of the form that will be associated with the component.  When not set, the component will be associated with its ancestor `<form>` element, if any.
         */
        "form": string;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messagesOverrides": Partial<TimePickerMessages>;
        /**
          * Specifies the name of the component on form submission.
         */
        "name": string;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem": NumberingSystem;
        /**
          * When `true`, displays the `calcite-time-picker` component.
         */
        "open": boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Determines where the popover will be positioned relative to the input.
         */
        "placement": LogicalPlacement;
        /**
          * When `true`, the component's value can be read, but controls are not accessible and the value cannot be modified.
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly": boolean;
        /**
          * Updates the position of the component.
          * @param delayed
         */
        "reposition": (delayed?: boolean) => Promise<void>;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the granularity the component's `value` must adhere to (in seconds).
         */
        "step": number;
        /**
          * The component's value in UTC (always 24-hour format).
         */
        "value": string;
    }
    interface CalciteLabel {
        /**
          * Specifies the text alignment of the component.
         */
        "alignment": Alignment;
        /**
          * Specifies the `id` of the component the label is bound to. Use when the component the label is bound to does not reside within the component.
         */
        "for": string;
        /**
          * Defines the layout of the label in relation to the component. Use `"inline"` positions to wrap the label and component on the same line.
         */
        "layout": "inline" | "inline-space-between" | "default";
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
    }
    interface CalciteLink {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Prompts the user to save the linked URL instead of navigating to it. Can be used with or without a value: Without a value, the browser will suggest a filename/extension See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-download.
         */
        "download": string | boolean;
        /**
          * Specifies the URL of the linked resource, which can be set as an absolute or relative path.
         */
        "href": string;
        /**
          * Specifies an icon to display at the end of the component.
         */
        "iconEnd": string;
        /**
          * Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": FlipContext;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart": string;
        /**
          * Specifies the relationship to the linked document defined in `href`.
         */
        "rel": string;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the frame or window to open the linked document.
         */
        "target": string;
    }
    /**
     * A general purpose list that enables users to construct list items that conform to Calcite styling.
     */
    interface CalciteList {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * When `true`, an input appears at the top of the component that can be used by end users to filter `calcite-list-item`s.
         */
        "filterEnabled": boolean;
        /**
          * Placeholder text for the component's filter input field.
         */
        "filterPlaceholder": string;
        /**
          * Text for the component's filter input field.
         */
        "filterText": string;
        /**
          * The currently filtered `calcite-list-item` data.
          * @readonly
         */
        "filteredData": ItemData;
        /**
          * The currently filtered `calcite-list-item`s.
          * @readonly
         */
        "filteredItems": HTMLCalciteListItemElement[];
        /**
          * Specifies an accessible name for the component.
         */
        "label": string;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading": boolean;
        /**
          * One of the items within the list can be opened.
         */
        "openable": boolean;
        /**
          * The currently selected items.
          * @readonly
         */
        "selectedItems": HTMLCalciteListItemElement[];
        /**
          * Specifies the selection appearance - `"icon"` (displays a checkmark or dot) or `"border"` (displays a border).
         */
        "selectionAppearance": SelectionAppearance;
        /**
          * Specifies the selection mode - `"multiple"` (allow any number of selected items), `"single"` (allows and require one selected item), `"none"` (no selected items).
         */
        "selectionMode": Extract<"none" | "multiple" | "single", SelectionMode>;
        /**
          * Sets focus on the component's first focusable element.
         */
        "setFocus": () => Promise<void>;
    }
    interface CalciteListItem {
        /**
          * Sets the item as focusable. Only one item should be focusable within a list.
         */
        "active": boolean;
        /**
          * A description for the component. Displays below the label text.
         */
        "description": string;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * The label text of the component. Displays above the description text.
         */
        "label": string;
        /**
          * Provides additional metadata to the component. Primary use is for a filter on the parent `calcite-list`.
         */
        "metadata": Record<string, unknown>;
        /**
          * When `true`, the item is open to show child components.
         */
        "open": boolean;
        /**
          * When `true`, the component is selected.
         */
        "selected": boolean;
        /**
          * Specifies the selection appearance - `"icon"` (displays a checkmark or dot) or `"border"` (displays a border).
         */
        "selectionAppearance": SelectionAppearance;
        /**
          * Specifies the selection mode - `"multiple"` (allow any number of selected items), `"single"` (allows and require one selected item), `"none"` (no selected items).
         */
        "selectionMode": Extract<"none" | "multiple" | "single", SelectionMode>;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Used to specify the aria-posinset attribute to define the number or position in the current set of list items for accessibility.
         */
        "setPosition": number;
        /**
          * Used to specify the aria-setsize attribute to define the number of items in the current set of list for accessibility.
         */
        "setSize": number;
        /**
          * The component's value.
         */
        "value": any;
    }
    interface CalciteListItemGroup {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * The header text for all nested `calcite-list-item` rows.
         */
        "heading": string;
    }
    interface CalciteLoader {
        /**
          * When `true`, displays smaller and appears to the left of the text.
         */
        "inline": boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Text that displays under the component's indicator.
         */
        "text": string;
        /**
          * Specifies the component type.  Use `"indeterminate"` if finding actual progress value is impossible.
         */
        "type": "indeterminate" | "determinate";
        /**
          * The component's value. Valid only for `"determinate"` indicators. Percent complete of 100.
         */
        "value": number;
    }
    interface CalciteModal {
        /**
          * Passes a function to run before the component closes.
         */
        "beforeClose": (el: HTMLElement) => Promise<void>;
        /**
          * When `true`, disables the component's close button.
         */
        "closeButtonDisabled": boolean;
        /**
          * When `true`, prevents the component from expanding to the entire screen on mobile devices.
         */
        "docked": boolean;
        /**
          * When `true`, disables the default close on escape behavior.
         */
        "escapeDisabled": boolean;
        /**
          * When `true`, prevents focus trapping.
         */
        "focusTrapDisabled": boolean;
        /**
          * Sets the component to always be fullscreen (overrides `width` and `--calcite-modal-width` / `--calcite-modal-height`).
         */
        "fullscreen": boolean;
        /**
          * Specifies the kind of the component (will apply to top border).
         */
        "kind": Extract<"brand" | "danger" | "info" | "success" | "warning", Kind>;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<ModalMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": ModalMessages;
        /**
          * When `true`, displays and positions the component.
         */
        "open": boolean;
        /**
          * When `true`, disables the closing of the component when clicked outside.
         */
        "outsideCloseDisabled": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets the scroll top of the component's content.
          * @param top
          * @param left
         */
        "scrollContent": (top?: number, left?: number) => Promise<void>;
        /**
          * Sets focus on the component's "close" button (the first focusable item).
         */
        "setFocus": () => Promise<void>;
        /**
          * This internal property, managed by a containing calcite-shell, is used to inform the component if special configuration or styles are needed
         */
        "slottedInShell": boolean;
        /**
          * Updates the element(s) that are used within the focus-trap of the component.
         */
        "updateFocusTrapElements": () => Promise<void>;
        /**
          * Specifies the width of the component.
         */
        "width": Scale;
    }
    interface CalciteNotice {
        /**
          * When `true`, a close button is added to the component.
         */
        "closable": boolean;
        /**
          * When `true`, shows a default recommended icon. Alternatively, pass a Calcite UI Icon name to display a specific icon.
         */
        "icon": string | boolean;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        /**
          * Specifies the kind of the component (will apply to top border and icon).
         */
        "kind": Extract<
    "brand" | "danger" | "info" | "success" | "warning",
    Kind
  >;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<NoticeMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": NoticeMessages;
        /**
          * When `true`, the component is visible.
         */
        "open": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component's first focusable element.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the width of the component.
         */
        "width": Width;
    }
    interface CalciteOption {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * When `true`, the component is selected.
         */
        "selected": boolean;
        /**
          * The component's value.
         */
        "value": any;
    }
    interface CalciteOptionGroup {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
    }
    interface CalcitePagination {
        /**
          * When `true`, number values are displayed with a group separator corresponding to the language and country format.
         */
        "groupSeparator": boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<PaginationMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": PaginationMessages;
        /**
          * Go to the next page of results.
         */
        "nextPage": () => Promise<void>;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem": NumberingSystem;
        /**
          * Specifies the number of items per page.
         */
        "pageSize": number;
        /**
          * Go to the previous page of results.
         */
        "previousPage": () => Promise<void>;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component's first focusable element.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the starting item number.
         */
        "startItem": number;
        /**
          * Specifies the total number of items.
         */
        "totalItems": number;
    }
    interface CalcitePanel {
        /**
          * When `true`, displays a close button in the trailing side of the header.
         */
        "closable": boolean;
        /**
          * When `true`, the component will be hidden.
         */
        "closed": boolean;
        /**
          * A description for the component.
         */
        "description": string;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * The component header text.
         */
        "heading": string;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel": HeadingLevel;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading": boolean;
        /**
          * When `true`, the action menu items in the `header-menu-actions` slot are open.
         */
        "menuOpen": boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<PanelMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": PanelMessages;
        /**
          * Scrolls the component's content to a specified set of coordinates.
          * @example myCalciteFlowItem.scrollContentTo({   left: 0, // Specifies the number of pixels along the X axis to scroll the window or element.   top: 0, // Specifies the number of pixels along the Y axis to scroll the window or element   behavior: "auto" // Specifies whether the scrolling should animate smoothly (smooth), or happen instantly in a single jump (auto, the default value). });
          * @param options
         */
        "scrollContentTo": (options?: ScrollToOptions) => Promise<void>;
        /**
          * Sets focus on the component's first focusable element.
         */
        "setFocus": () => Promise<void>;
    }
    /**
     * @deprecated Use the `list` component instead.
     */
    interface CalcitePickList {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * When `true`, an input appears at the top of the list that can be used by end users to filter items in the list.
         */
        "filterEnabled": boolean;
        /**
          * Placeholder text for the filter input field.
         */
        "filterPlaceholder": string;
        /**
          * Text for the filter input field.
         */
        "filterText": string;
        /**
          * The currently filtered data.
          * @readonly
         */
        "filteredData": ItemData1;
        /**
          * The currently filtered items.
          * @readonly
         */
        "filteredItems": HTMLCalcitePickListItemElement[];
        /**
          * Returns the component's selected `calcite-pick-list-item`s.
         */
        "getSelectedItems": () => Promise<Map<string, HTMLCalcitePickListItemElement>>;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel": HeadingLevel;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading": boolean;
        /**
          * Similar to standard radio buttons and checkboxes. When `true`, a user can select multiple `calcite-pick-list-item`s at a time. When `false`, only a single `calcite-pick-list-item` can be selected at a time, and a new selection will deselect previous selections.
         */
        "multiple": boolean;
        /**
          * When `true` and single selection is enabled, the selection changes when navigating `calcite-pick-list-item`s via keyboard.
         */
        "selectionFollowsFocus": boolean;
        /**
          * Sets focus on the component's first focusable element.
          * @param focusId
         */
        "setFocus": (focusId?: ListFocusId) => Promise<void>;
    }
    /**
     * @deprecated Use the `list` component instead.
     */
    interface CalcitePickListGroup {
        /**
          * Specifies the title for all nested `calcite-pick-list-item`s.
         */
        "groupTitle": string;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel": HeadingLevel;
    }
    /**
     * @deprecated Use the `list` component instead.
     */
    interface CalcitePickListItem {
        /**
          * A description for the component that displays below the label text.
         */
        "description": string;
        /**
          * When `false`, the component cannot be deselected by user interaction.
         */
        "deselectDisabled": boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Determines the icon SVG symbol that will be shown. Options are `"circle"`, `"square"`, `"grip"` or `null`.
          * @see [ICON_TYPES](https://github.com/Esri/calcite-components/blob/master/src/components/pick-list/resources.ts#L5)
         */
        "icon": ICON_TYPES | null;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        /**
          * Label and accessible name for the component. Appears next to the icon.
         */
        "label": string;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<PickListItemMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": PickListItemMessages;
        /**
          * Provides additional metadata to the component. Primary use is for a filter on the parent list.
         */
        "metadata": Record<string, unknown>;
        "nonInteractive": boolean;
        /**
          * When `true`, displays a remove action that removes the item from the list.
         */
        "removable": boolean;
        /**
          * When `true`, selects an item. Toggles when an item is checked/unchecked.
         */
        "selected": boolean;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Toggles the selection state. By default this won't trigger an event. The first argument allows the value to be coerced, rather than swapping values.
          * @param coerce
         */
        "toggleSelected": (coerce?: boolean) => Promise<void>;
        /**
          * The component's value.
         */
        "value": any;
    }
    interface CalcitePopover {
        /**
          * When `true`, clicking outside of the component automatically closes open `calcite-popover`s.
         */
        "autoClose": boolean;
        /**
          * When `true`, display a close button within the component.
         */
        "closable": boolean;
        /**
          * When `true`, prevents flipping the component's placement when overlapping its `referenceElement`.
         */
        "flipDisabled": boolean;
        /**
          * Defines the available placements that can be used when a flip occurs.
         */
        "flipPlacements": EffectivePlacement[];
        /**
          * When `true`, prevents focus trapping.
         */
        "focusTrapDisabled": boolean;
        /**
          * The component header text.
         */
        "heading": string;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel": HeadingLevel;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<PopoverMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": PopoverMessages;
        /**
          * Offsets the position of the popover away from the `referenceElement`.
          * @default 6
         */
        "offsetDistance": number;
        /**
          * Offsets the position of the component along the `referenceElement`.
         */
        "offsetSkidding": number;
        /**
          * When `true`, displays and positions the component.
         */
        "open": boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` value should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Determines where the component will be positioned relative to the `referenceElement`.
         */
        "placement": LogicalPlacement;
        /**
          * When `true`, removes the caret pointer.
         */
        "pointerDisabled": boolean;
        /**
          * The `referenceElement` used to position the component according to its `placement` value. Setting to an `HTMLElement` is preferred so the component does not need to query the DOM. However, a string `id` of the reference element can also be used.
         */
        "referenceElement": ReferenceElement | string;
        /**
          * Updates the position of the component.
          * @param delayed
         */
        "reposition": (delayed?: boolean) => Promise<void>;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component's first focusable element.
         */
        "setFocus": () => Promise<void>;
        /**
          * When `true`, disables automatically toggling the component when its `referenceElement` has been triggered.  This property can be set to `true` to manage when the component is open.
         */
        "triggerDisabled": boolean;
        /**
          * Updates the element(s) that are used within the focus-trap of the component.
         */
        "updateFocusTrapElements": () => Promise<void>;
    }
    interface CalciteProgress {
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * When `true` and for `"indeterminate"` progress bars, reverses the animation direction.
         */
        "reversed": boolean;
        /**
          * Text that displays under the component's indicator.
         */
        "text": string;
        /**
          * Specifies the component type.  Use `"indeterminate"` if finding actual progress value is impossible.
         */
        "type": "indeterminate" | "determinate";
        /**
          * When `type` is `"determinate"`, the component's progress value with a range of 0.0 - 1.0.
         */
        "value": number;
    }
    interface CalciteRadioButton {
        /**
          * When `true`, the component is checked.
         */
        "checked": boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        "emitCheckedChange": () => Promise<void>;
        /**
          * The focused state of the component.
         */
        "focused": boolean;
        /**
          * The ID of the form that will be associated with the component.  When not set, the component will be associated with its ancestor `<form>` element, if any.
         */
        "form": string;
        /**
          * The `id` of the component. When omitted, a globally unique identifier is used.
         */
        "guid": string;
        /**
          * When `true`, the component is not displayed and is not focusable or checkable.
         */
        "hidden": boolean;
        /**
          * The hovered state of the component.
         */
        "hovered": boolean;
        /**
          * Accessible name for the component.
         */
        "label"?: string;
        /**
          * Specifies the name of the component. Can be inherited from `calcite-radio-button-group`.  Required to pass the component's `value` on form submission.
         */
        "name": string;
        /**
          * When `true`, the component must have a value selected from the `calcite-radio-button-group` in order for the form to submit.
         */
        "required": boolean;
        /**
          * Specifies the size of the component inherited from the `calcite-radio-button-group`.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * The component's value.
         */
        "value": any;
    }
    interface CalciteRadioButtonGroup {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * When `true`, the component is not displayed and its `calcite-radio-button`s are not focusable or checkable.
         */
        "hidden": boolean;
        /**
          * Defines the layout of the component.
         */
        "layout": Layout;
        /**
          * Specifies the name of the component on form submission. Must be unique to other component instances.
         */
        "name": string;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Specifies the component's selected item.
          * @readonly
         */
        "selectedItem": HTMLCalciteRadioButtonElement;
    }
    interface CalciteRating {
        /**
          * Specifies a cumulative average from previous ratings to display.
         */
        "average": number;
        /**
          * Specifies the number of previous ratings to display.
         */
        "count": number;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * The ID of the form that will be associated with the component.  When not set, the component will be associated with its ancestor `<form>` element, if any.
         */
        "form": string;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<RatingMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": RatingMessages;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name": string;
        /**
          * When `true`, the component's value can be read, but cannot be modified.
         */
        "readOnly": boolean;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * When `true`, and if available, displays the `average` and/or `count` data summary in a `calcite-chip`.
         */
        "showChip": boolean;
        /**
          * The component's value.
         */
        "value": number;
    }
    interface CalciteScrim {
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading": boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<ScrimMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": ScrimMessages;
    }
    interface CalciteSegmentedControl {
        /**
          * Specifies the appearance style of the component.
         */
        "appearance": Extract<"outline" | "outline-fill" | "solid", Appearance>;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * The ID of the form that will be associated with the component.  When not set, the component will be associated with its ancestor `<form>` element, if any.
         */
        "form": string;
        /**
          * Defines the layout of the component.
         */
        "layout": Layout;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name": string;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * The component's selected item `HTMLElement`.
          * @readonly
         */
        "selectedItem": HTMLCalciteSegmentedControlItemElement;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * The component's `selectedItem` value.
         */
        "value": string;
        /**
          * Specifies the width of the component.
         */
        "width": Extract<"auto" | "full", Width>;
    }
    interface CalciteSegmentedControlItem {
        /**
          * When `true`, the component is checked.
         */
        "checked": boolean;
        /**
          * Specifies an icon to display at the end of the component.
         */
        "iconEnd": string;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart": string;
        /**
          * The component's value.
         */
        "value": any | null;
    }
    interface CalciteSelect {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * The ID of the form that will be associated with the component.  When not set, the component will be associated with its ancestor `<form>` element, if any.
         */
        "form": string;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name": string;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * The component's selected option `HTMLElement`.
          * @readonly
         */
        "selectedOption": HTMLCalciteOptionElement;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * The component's `selectedOption` value.
         */
        "value": string;
        /**
          * Specifies the width of the component.
         */
        "width": Width;
    }
    interface CalciteShell {
        /**
          * Positions the center content behind any `calcite-shell-panel`s.
         */
        "contentBehind": boolean;
    }
    interface CalciteShellCenterRow {
        /**
          * When `true`, the content area displays like a floating panel.
         */
        "detached": boolean;
        /**
          * Specifies the maximum height of the component.
         */
        "heightScale": Scale;
        /**
          * Specifies the component's position. Will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "position": Position;
    }
    interface CalciteShellPanel {
        /**
          * When `true`, hides the component's content area.
         */
        "collapsed": boolean;
        /**
          * When `true`, the content area displays like a floating panel.
         */
        "detached": boolean;
        /**
          * When `detached`, specifies the maximum height of the component.
         */
        "detachedHeightScale": Scale;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<ShellPanelMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": ShellPanelMessages;
        /**
          * Specifies the component's position. Will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "position": Position;
        /**
          * When `true` and not `detached`, the component's content area is resizable.
         */
        "resizable": boolean;
        /**
          * Specifies the width of the component's content area.
         */
        "widthScale": Scale;
    }
    interface CalciteSlider {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * The ID of the form that will be associated with the component.  When not set, the component will be associated with its ancestor `<form>` element, if any.
         */
        "form": string;
        /**
          * When `true`, number values are displayed with a group separator corresponding to the language and country format.
         */
        "groupSeparator": boolean;
        /**
          * When `true`, indicates a histogram is present.
         */
        "hasHistogram": boolean;
        /**
          * A list of the histogram's x,y coordinates within the component's `min` and `max`. Displays above the component's track.
          * @see [DataSeries](https://github.com/Esri/calcite-components/blob/master/src/components/graph/interfaces.ts#L5)
         */
        "histogram": DataSeries;
        /**
          * A set of single color stops for a histogram, sorted by offset ascending.
         */
        "histogramStops": ColorStop[];
        /**
          * When `true`, displays label handles with their numeric value.
         */
        "labelHandles": boolean;
        /**
          * When `true` and `ticks` is specified, displays label tick marks with their numeric value.
         */
        "labelTicks": boolean;
        /**
          * The component's maximum selectable value.
         */
        "max": number;
        /**
          * For multiple selections, the accessible name for the second handle, such as `"Temperature, upper bound"`.
         */
        "maxLabel": string;
        /**
          * For multiple selections, the component's upper value.
         */
        "maxValue": number;
        /**
          * The component's minimum selectable value.
         */
        "min": number;
        /**
          * Accessible name for first (or only) handle, such as `"Temperature, lower bound"`.
         */
        "minLabel": string;
        /**
          * For multiple selections, the component's lower value.
         */
        "minValue": number;
        /**
          * When `true`, the slider will display values from high to low.  Note that this value will be ignored if the slider has an associated histogram.
         */
        "mirrored": boolean;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name": string;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem": NumberingSystem;
        /**
          * Specifies the interval to move with the page up, or page down keys.
         */
        "pageStep": number;
        /**
          * When `true`, sets a finer point for handles.
         */
        "precise": boolean;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * When `true`, enables snap selection in coordination with `step` via a mouse.
         */
        "snap": boolean;
        /**
          * Specifies the interval to move with the up, or down keys.
         */
        "step": number;
        /**
          * Displays tick marks on the number line at a specified interval.
         */
        "ticks": number;
        /**
          * The component's value.
         */
        "value": null | number | number[];
    }
    interface CalciteSortableList {
        /**
          * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.
         */
        "disabled": boolean;
        /**
          * Specifies which items inside the element should be draggable.
         */
        "dragSelector"?: string;
        /**
          * The list's group identifier.  To drag elements from one list into another, both lists must have the same group value.
         */
        "group"?: string;
        /**
          * The selector for the handle elements.
         */
        "handleSelector": string;
        /**
          * Indicates the horizontal or vertical orientation of the component.
         */
        "layout": Layout;
        /**
          * When true, content is waiting to be loaded. This state shows a busy indicator.
         */
        "loading": boolean;
    }
    interface CalciteSplitButton {
        /**
          * When `true`, the component is active.
         */
        "active": boolean;
        /**
          * Specifies the appearance style of the component.
         */
        "appearance": Extract<
    "outline" | "outline-fill" | "solid" | "transparent",
    Appearance
  >;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Specifies the icon used for the dropdown menu.
         */
        "dropdownIconType": DropdownIconType;
        /**
          * Accessible name for the dropdown menu.
         */
        "dropdownLabel": string;
        /**
          * Specifies the kind of the component (will apply to border and background if applicable).
         */
        "kind": Extract<"brand" | "danger" | "inverse" | "neutral", Kind>;
        /**
          * When `true`, a busy indicator is displayed on the primary button.
         */
        "loading": boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Specifies an icon to display at the end of the primary button.
         */
        "primaryIconEnd": string;
        /**
          * Displays the `primaryIconStart` and/or `primaryIconEnd` as flipped when the element direction is right-to-left (`"rtl"`).
         */
        "primaryIconFlipRtl": FlipContext;
        /**
          * Specifies an icon to display at the start of the primary button.
         */
        "primaryIconStart": string;
        /**
          * Accessible name for the primary button.
         */
        "primaryLabel": string;
        /**
          * Text displayed in the primary button.
         */
        "primaryText": string;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component's first focusable element.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the width of the component.
         */
        "width": Width;
    }
    interface CalciteStepper {
        /**
          * Set the last `calcite-stepper-item` as active.
         */
        "endStep": () => Promise<void>;
        /**
          * Set a specified `calcite-stepper-item` as active.
          * @param step
         */
        "goToStep": (step: number) => Promise<void>;
        /**
          * When `true`, displays a status icon in the `calcite-stepper-item` heading.
         */
        "icon": boolean;
        /**
          * Defines the layout of the component.
         */
        "layout": Extract<"horizontal" | "vertical", Layout>;
        /**
          * Set the next `calcite-stepper-item` as active.
         */
        "nextStep": () => Promise<void>;
        /**
          * When `true`, displays the step number in the `calcite-stepper-item` heading.
         */
        "numbered": boolean;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * Set the previous `calcite-stepper-item` as active.
         */
        "prevStep": () => Promise<void>;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Specifies the component's selected item.
          * @readonly
         */
        "selectedItem": HTMLCalciteStepperItemElement;
        /**
          * Set the first `calcite-stepper-item` as active.
         */
        "startStep": () => Promise<void>;
    }
    interface CalciteStepperItem {
        /**
          * When `true`, the step has been completed.
         */
        "complete": boolean;
        /**
          * A description for the component. Displays below the header text.
         */
        "description": string;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * When `true`, the component contains an error that requires resolution from the user.
         */
        "error": boolean;
        /**
          * The component header text.
         */
        "heading": string;
        "icon": boolean;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        "layout": Extract<"horizontal" | "vertical", Layout>;
        "numbered": boolean;
        "scale": Scale;
        /**
          * When `true`, the component is selected.
         */
        "selected": boolean;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
    }
    interface CalciteSwitch {
        /**
          * When `true`, the component is checked.
         */
        "checked": boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * The ID of the form that will be associated with the component.  When not set, the component will be associated with its ancestor `<form>` element, if any.
         */
        "form": string;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name": string;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * The component's value.
         */
        "value": any;
    }
    interface CalciteTab {
        /**
          * Returns the index of the component item within the tab array.
         */
        "getTabIndex": () => Promise<number>;
        "scale": Scale;
        /**
          * When `true`, the component's contents are selected.  Only one tab can be selected within the `calcite-tabs` parent.
         */
        "selected": boolean;
        /**
          * Specifies a unique name for the component.  When specified, use the same value on the `calcite-tab-title`.
         */
        "tab": string;
        /**
          * @param tabIds
          * @param titleIds
         */
        "updateAriaInfo": (tabIds?: string[], titleIds?: string[]) => Promise<void>;
    }
    interface CalciteTabNav {
        "bordered": boolean;
        "indicatorOffset": number;
        "indicatorWidth": number;
        "layout": TabLayout;
        "position": TabPosition;
        "scale": Scale;
        /**
          * Specifies the component's selected tab-title.
          * @readonly
         */
        "selectedTitle": HTMLCalciteTabTitleElement;
        /**
          * Specifies the name when saving selected `calcite-tab` data to `localStorage`.
         */
        "storageId": string;
        /**
          * Specifies text to update multiple components to keep in sync if one changes.
         */
        "syncId": string;
    }
    interface CalciteTabTitle {
        "bordered": boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        "getTabIdentifier": () => Promise<TabID>;
        /**
          * Returns the index of the title within the `calcite-tab-nav`.
         */
        "getTabIndex": () => Promise<number>;
        /**
          * Specifies an icon to display at the end of the component.
         */
        "iconEnd": string;
        /**
          * Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": FlipContext;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart": string;
        "layout": TabLayout;
        "position": TabPosition;
        "scale": Scale;
        /**
          * When `true`, the component and its respective `calcite-tab` contents are selected.  Only one tab can be selected within the `calcite-tabs` parent.
         */
        "selected": boolean;
        /**
          * Specifies a unique name for the component.  When specified, use the same value on the `calcite-tab`.
         */
        "tab": string;
        /**
          * @param tabIds
          * @param titleIds
         */
        "updateAriaInfo": (tabIds?: string[], titleIds?: string[]) => Promise<void>;
    }
    interface CalciteTabs {
        /**
          * When `true`, the component will display with a folder style menu.
         */
        "bordered": boolean;
        /**
          * Specifies the layout of the `calcite-tab-nav`, justifying the `calcite-tab-title`s to the start (`"inline"`), or across and centered (`"center"`).
         */
        "layout": TabLayout;
        /**
          * Specifies the position of the component in relation to the `calcite-tab`s.
         */
        "position": TabPosition;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
    }
    interface CalciteTextArea {
        /**
          * When `true`, the component is focused on page load. Only one element can contain `autofocus`. If multiple elements have `autofocus`, the first element will receive focus.
          * @mdn [autofocus](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus)
         */
        "autofocus": boolean;
        /**
          * Specifies the component's number of columns.
          * @mdn [cols](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-cols)
         */
        "columns": number;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
          * @mdn [disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)
         */
        "disabled": boolean;
        /**
          * The ID of the form that will be associated with the component.  When not set, the component will be associated with its ancestor `<form>` element, if any.
         */
        "form": string;
        /**
          * When `true`, number values are displayed with a group separator corresponding to the language and country format.
         */
        "groupSeparator": boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Specifies the maximum number of characters allowed.
          * @mdn [maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-maxlength)
         */
        "maxLength": number;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<TextAreaMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": TextAreaMessages;
        /**
          * Specifies the name of the component.
          * @mdn [name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-name)
         */
        "name": string;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem": NumberingSystem;
        /**
          * Specifies the placeholder text for the component.
          * @mdn [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-placeholder)
         */
        "placeholder": string;
        /**
          * When `true`, the component's `value` can be read, but cannot be modified.
          * @readonly 
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly": boolean;
        /**
          * When `true`, the component must have a value in order for the form to submit.
          * @mdn [required]https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/required
         */
        "required": boolean;
        /**
          * Specifies if the component is resizable.
         */
        "resize": "both" | "horizontal" | "vertical" | "none";
        /**
          * Specifies the component's number of rows.
          * @mdn [rows](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-rows)
         */
        "rows": number;
        /**
          * Specifies the size of the component.
         */
        "scale": "l" | "m" | "s";
        /**
          * Selects the text of the component's `value`.
         */
        "selectText": () => Promise<void>;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * The component's value.
         */
        "value": string;
        /**
          * Specifies the wrapping mechanism for the text.
          * @mdn [wrap](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-wrap)
         */
        "wrap": "soft" | "hard";
    }
    interface CalciteTile {
        /**
          * When `true`, the component is active.
         */
        "active": boolean;
        /**
          * A description for the component, which displays below the heading.
         */
        "description": string;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * The component's embed mode.  When `true`, renders without a border and padding for use by other components.
         */
        "embed": boolean;
        /**
          * The focused state of the component.
         */
        "focused": boolean;
        /**
          * The component header text, which displays between the icon and description.
         */
        "heading": string;
        /**
          * When `true`, the component is not displayed and is not focusable.
         */
        "hidden": boolean;
        /**
          * When embed is `"false"`, the URL for the component.
         */
        "href": string;
        /**
          * Specifies an icon to display.
         */
        "icon": string;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
    }
    interface CalciteTileSelect {
        /**
          * When `true`, the component is checked.
         */
        "checked": boolean;
        /**
          * A description for the component, which displays below the heading.
         */
        "description": string;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * The component header text, which displays between the icon and description.
         */
        "heading": string;
        /**
          * When `true`, the component is not displayed and is not focusable or checkable.
         */
        "hidden": boolean;
        /**
          * Specifies an icon to display.
         */
        "icon": string;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        /**
          * When `inputEnabled` is `true`, specifies the placement of the interactive input on the component.
         */
        "inputAlignment": Extract<"end" | "start", Alignment>;
        /**
          * When `true`, displays an interactive input based on the `type` property.
         */
        "inputEnabled": boolean;
        /**
          * Specifies the name of the component on form submission.
         */
        "name": any;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * The selection mode of the component.  Use radio for single selection, and checkbox for multiple selections.
         */
        "type": TileSelectType;
        /**
          * The component's value.
         */
        "value": any;
        /**
          * Specifies the width of the component.
         */
        "width": Extract<"auto" | "full", Width>;
    }
    interface CalciteTileSelectGroup {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Defines the layout of the component.  Use `"horizontal"` for rows, and `"vertical"` for a single column.
         */
        "layout": TileSelectGroupLayout;
    }
    interface CalciteTimePicker {
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<TimePickerMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": TimePickerMessages;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem": NumberingSystem;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component's first focusable element.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the granularity the `value` must adhere to (in seconds).
         */
        "step": number;
        /**
          * The component's value in UTC (always 24-hour format).
         */
        "value": string;
    }
    interface CalciteTip {
        /**
          * When `true`, the close button is not present on the component.
         */
        "closeDisabled": boolean;
        /**
          * When `true`, the component does not display.
         */
        "closed": boolean;
        /**
          * The component header text.
         */
        "heading": string;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel": HeadingLevel;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<TipMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": TipMessages;
        /**
          * When `true`, the component is selected if it has a parent `calcite-tip-manager`.  Only one tip can be selected within the `calcite-tip-manager` parent.
         */
        "selected": boolean;
    }
    interface CalciteTipGroup {
        /**
          * The component header text for all nested `calcite-tip`s.
         */
        "groupTitle": string;
    }
    interface CalciteTipManager {
        /**
          * When `true`, does not display or position the component.
         */
        "closed": boolean;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel": HeadingLevel;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<TipManagerMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": TipManagerMessages;
        /**
          * Selects the next `calcite-tip` to display.
         */
        "nextTip": () => Promise<void>;
        /**
          * Selects the previous `calcite-tip` to display.
         */
        "previousTip": () => Promise<void>;
    }
    interface CalciteTooltip {
        /**
          * Closes the component when the `referenceElement` is clicked.
         */
        "closeOnClick": boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Offset the position of the component away from the `referenceElement`.
          * @default 6
         */
        "offsetDistance": number;
        /**
          * Offset the position of the component along the `referenceElement`.
         */
        "offsetSkidding": number;
        /**
          * When `true`, the component is open.
         */
        "open": boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  The `"fixed"` value should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Determines where the component will be positioned relative to the `referenceElement`.
         */
        "placement": LogicalPlacement;
        /**
          * The `referenceElement` to position the component according to its `"placement"` value.  Setting to the `HTMLElement` is preferred so the component does not need to query the DOM for the `referenceElement`.  However, a string ID of the reference element can be used.
         */
        "referenceElement": ReferenceElement | string;
        /**
          * Updates the position of the component.
          * @param delayed
         */
        "reposition": (delayed?: boolean) => Promise<void>;
    }
    interface CalciteTree {
        "child": boolean;
        /**
          * Displays indentation guide lines.
         */
        "lines": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Specifies the component's selected items.
          * @readonly
         */
        "selectedItems": HTMLCalciteTreeItemElement[];
        /**
          * Customize how the component's selection works.
          * @default "single"
         */
        "selectionMode": SelectionMode;
    }
    interface CalciteTreeItem {
        "depth": number;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * When `true`, the component is expanded.
         */
        "expanded": boolean;
        "hasChildren": boolean;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": FlipContext;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart": string;
        /**
          * In ancestor selection mode, show as indeterminate when only some children are selected.
         */
        "indeterminate": boolean;
        "lines": boolean;
        "parentExpanded": boolean;
        "scale": Scale;
        /**
          * When `true`, the component is selected.
         */
        "selected": boolean;
        "selectionMode": SelectionMode;
    }
    /**
     * @deprecated Use the `list` component instead.
     */
    interface CalciteValueList {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * When `true`, `calcite-value-list-item`s are sortable via a draggable button.
         */
        "dragEnabled": boolean;
        /**
          * When `true`, an input appears at the top of the component that can be used by end users to filter list items.
         */
        "filterEnabled": boolean;
        /**
          * Placeholder text for the filter's input field.
         */
        "filterPlaceholder": string;
        /**
          * Text for the filter input field.
         */
        "filterText": string;
        /**
          * The currently filtered data.
          * @readonly
         */
        "filteredData": ItemData1;
        /**
          * The currently filtered items.
          * @readonly
         */
        "filteredItems": HTMLCalciteValueListItemElement[];
        /**
          * Returns the currently selected items
         */
        "getSelectedItems": () => Promise<Map<string, HTMLCalciteValueListItemElement>>;
        /**
          * The component's group identifier.  To drag elements from one list into another, both lists must have the same group value.
         */
        "group"?: string;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading": boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<ValueListMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": ValueListMessages;
        /**
          * Similar to standard radio buttons and checkboxes. When `true`, a user can select multiple `calcite-value-list-item`s at a time. When `false`, only a single `calcite-value-list-item` can be selected at a time, and a new selection will deselect previous selections.
         */
        "multiple": boolean;
        /**
          * When `true` and single-selection is enabled, the selection changes when navigating `calcite-value-list-item`s via keyboard.
         */
        "selectionFollowsFocus": boolean;
        /**
          * Sets focus on the component's first focusable element.
          * @param focusId
         */
        "setFocus": (focusId?: ListFocusId) => Promise<void>;
    }
    /**
     * @deprecated Use the `list` component instead.
     */
    interface CalciteValueListItem {
        /**
          * A description for the component that displays below the label text.
         */
        "description"?: string;
        "deselectDisabled": boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        "handleActivated"?: boolean;
        /**
          * Determines the icon SVG symbol that will be shown. Options are circle, square, grip or null.
          * @see [ICON_TYPES](https://github.com/Esri/calcite-components/blob/master/src/components/pick-list/resources.ts#L5)
         */
        "icon"?: ICON_TYPES | null;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        /**
          * Label and accessible name for the component. Appears next to the icon.
         */
        "label": string;
        /**
          * Provides additional metadata to the component. Primary use is for a filter on the parent list.
         */
        "metadata"?: Record<string, unknown>;
        /**
          * When `true`, prevents the content of the component from user interaction.
         */
        "nonInteractive": boolean;
        /**
          * When `true`, adds an action to remove the component.
         */
        "removable": boolean;
        /**
          * When `true`, the component is selected.
         */
        "selected": boolean;
        /**
          * Set focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Toggle the selection state. By default this won't trigger an event. The first argument allows the value to be coerced, rather than swapping values.
          * @param coerce
         */
        "toggleSelected": (coerce?: boolean) => Promise<void>;
        /**
          * The component's value.
         */
        "value": any;
    }
}
export interface CalciteAccordionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteAccordionElement;
}
export interface CalciteAccordionItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteAccordionItemElement;
}
export interface CalciteActionBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteActionBarElement;
}
export interface CalciteActionMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteActionMenuElement;
}
export interface CalciteActionPadCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteActionPadElement;
}
export interface CalciteAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteAlertElement;
}
export interface CalciteBlockCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteBlockElement;
}
export interface CalciteBlockSectionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteBlockSectionElement;
}
export interface CalciteCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteCardElement;
}
export interface CalciteCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteCheckboxElement;
}
export interface CalciteChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteChipElement;
}
export interface CalciteColorPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteColorPickerElement;
}
export interface CalciteColorPickerHexInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteColorPickerHexInputElement;
}
export interface CalciteComboboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteComboboxElement;
}
export interface CalciteComboboxItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteComboboxItemElement;
}
export interface CalciteDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteDatePickerElement;
}
export interface CalciteDatePickerDayCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteDatePickerDayElement;
}
export interface CalciteDatePickerMonthCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteDatePickerMonthElement;
}
export interface CalciteDatePickerMonthHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteDatePickerMonthHeaderElement;
}
export interface CalciteDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteDropdownElement;
}
export interface CalciteDropdownGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteDropdownGroupElement;
}
export interface CalciteDropdownItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteDropdownItemElement;
}
export interface CalciteFilterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteFilterElement;
}
export interface CalciteFlowItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteFlowItemElement;
}
export interface CalciteHandleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteHandleElement;
}
export interface CalciteInlineEditableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteInlineEditableElement;
}
export interface CalciteInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteInputElement;
}
export interface CalciteInputDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteInputDatePickerElement;
}
export interface CalciteInputNumberCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteInputNumberElement;
}
export interface CalciteInputTextCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteInputTextElement;
}
export interface CalciteInputTimePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteInputTimePickerElement;
}
export interface CalciteLabelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteLabelElement;
}
export interface CalciteListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteListElement;
}
export interface CalciteListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteListItemElement;
}
export interface CalciteModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteModalElement;
}
export interface CalciteNoticeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteNoticeElement;
}
export interface CalciteOptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteOptionElement;
}
export interface CalciteOptionGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteOptionGroupElement;
}
export interface CalcitePaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalcitePaginationElement;
}
export interface CalcitePanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalcitePanelElement;
}
export interface CalcitePickListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalcitePickListElement;
}
export interface CalcitePickListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalcitePickListItemElement;
}
export interface CalcitePopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalcitePopoverElement;
}
export interface CalciteRadioButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteRadioButtonElement;
}
export interface CalciteRadioButtonGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteRadioButtonGroupElement;
}
export interface CalciteRatingCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteRatingElement;
}
export interface CalciteSegmentedControlCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteSegmentedControlElement;
}
export interface CalciteSegmentedControlItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteSegmentedControlItemElement;
}
export interface CalciteSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteSelectElement;
}
export interface CalciteSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteSliderElement;
}
export interface CalciteSortableListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteSortableListElement;
}
export interface CalciteSplitButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteSplitButtonElement;
}
export interface CalciteStepperCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteStepperElement;
}
export interface CalciteStepperItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteStepperItemElement;
}
export interface CalciteSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteSwitchElement;
}
export interface CalciteTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTabElement;
}
export interface CalciteTabNavCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTabNavElement;
}
export interface CalciteTabTitleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTabTitleElement;
}
export interface CalciteTextAreaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTextAreaElement;
}
export interface CalciteTileSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTileSelectElement;
}
export interface CalciteTimePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTimePickerElement;
}
export interface CalciteTipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTipElement;
}
export interface CalciteTipManagerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTipManagerElement;
}
export interface CalciteTooltipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTooltipElement;
}
export interface CalciteTreeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTreeElement;
}
export interface CalciteTreeItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTreeItemElement;
}
export interface CalciteValueListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteValueListElement;
}
export interface CalciteValueListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteValueListItemElement;
}
declare global {
    interface HTMLCalciteAccordionElement extends Components.CalciteAccordion, HTMLStencilElement {
    }
    var HTMLCalciteAccordionElement: {
        prototype: HTMLCalciteAccordionElement;
        new (): HTMLCalciteAccordionElement;
    };
    interface HTMLCalciteAccordionItemElement extends Components.CalciteAccordionItem, HTMLStencilElement {
    }
    var HTMLCalciteAccordionItemElement: {
        prototype: HTMLCalciteAccordionItemElement;
        new (): HTMLCalciteAccordionItemElement;
    };
    interface HTMLCalciteActionElement extends Components.CalciteAction, HTMLStencilElement {
    }
    var HTMLCalciteActionElement: {
        prototype: HTMLCalciteActionElement;
        new (): HTMLCalciteActionElement;
    };
    interface HTMLCalciteActionBarElement extends Components.CalciteActionBar, HTMLStencilElement {
    }
    var HTMLCalciteActionBarElement: {
        prototype: HTMLCalciteActionBarElement;
        new (): HTMLCalciteActionBarElement;
    };
    interface HTMLCalciteActionGroupElement extends Components.CalciteActionGroup, HTMLStencilElement {
    }
    var HTMLCalciteActionGroupElement: {
        prototype: HTMLCalciteActionGroupElement;
        new (): HTMLCalciteActionGroupElement;
    };
    interface HTMLCalciteActionMenuElement extends Components.CalciteActionMenu, HTMLStencilElement {
    }
    var HTMLCalciteActionMenuElement: {
        prototype: HTMLCalciteActionMenuElement;
        new (): HTMLCalciteActionMenuElement;
    };
    interface HTMLCalciteActionPadElement extends Components.CalciteActionPad, HTMLStencilElement {
    }
    var HTMLCalciteActionPadElement: {
        prototype: HTMLCalciteActionPadElement;
        new (): HTMLCalciteActionPadElement;
    };
    interface HTMLCalciteAlertElement extends Components.CalciteAlert, HTMLStencilElement {
    }
    var HTMLCalciteAlertElement: {
        prototype: HTMLCalciteAlertElement;
        new (): HTMLCalciteAlertElement;
    };
    interface HTMLCalciteAvatarElement extends Components.CalciteAvatar, HTMLStencilElement {
    }
    var HTMLCalciteAvatarElement: {
        prototype: HTMLCalciteAvatarElement;
        new (): HTMLCalciteAvatarElement;
    };
    interface HTMLCalciteBlockElement extends Components.CalciteBlock, HTMLStencilElement {
    }
    var HTMLCalciteBlockElement: {
        prototype: HTMLCalciteBlockElement;
        new (): HTMLCalciteBlockElement;
    };
    interface HTMLCalciteBlockSectionElement extends Components.CalciteBlockSection, HTMLStencilElement {
    }
    var HTMLCalciteBlockSectionElement: {
        prototype: HTMLCalciteBlockSectionElement;
        new (): HTMLCalciteBlockSectionElement;
    };
    interface HTMLCalciteButtonElement extends Components.CalciteButton, HTMLStencilElement {
    }
    var HTMLCalciteButtonElement: {
        prototype: HTMLCalciteButtonElement;
        new (): HTMLCalciteButtonElement;
    };
    interface HTMLCalciteCardElement extends Components.CalciteCard, HTMLStencilElement {
    }
    var HTMLCalciteCardElement: {
        prototype: HTMLCalciteCardElement;
        new (): HTMLCalciteCardElement;
    };
    interface HTMLCalciteCheckboxElement extends Components.CalciteCheckbox, HTMLStencilElement {
    }
    var HTMLCalciteCheckboxElement: {
        prototype: HTMLCalciteCheckboxElement;
        new (): HTMLCalciteCheckboxElement;
    };
    interface HTMLCalciteChipElement extends Components.CalciteChip, HTMLStencilElement {
    }
    var HTMLCalciteChipElement: {
        prototype: HTMLCalciteChipElement;
        new (): HTMLCalciteChipElement;
    };
    interface HTMLCalciteColorPickerElement extends Components.CalciteColorPicker, HTMLStencilElement {
    }
    var HTMLCalciteColorPickerElement: {
        prototype: HTMLCalciteColorPickerElement;
        new (): HTMLCalciteColorPickerElement;
    };
    interface HTMLCalciteColorPickerHexInputElement extends Components.CalciteColorPickerHexInput, HTMLStencilElement {
    }
    var HTMLCalciteColorPickerHexInputElement: {
        prototype: HTMLCalciteColorPickerHexInputElement;
        new (): HTMLCalciteColorPickerHexInputElement;
    };
    interface HTMLCalciteColorPickerSwatchElement extends Components.CalciteColorPickerSwatch, HTMLStencilElement {
    }
    var HTMLCalciteColorPickerSwatchElement: {
        prototype: HTMLCalciteColorPickerSwatchElement;
        new (): HTMLCalciteColorPickerSwatchElement;
    };
    interface HTMLCalciteComboboxElement extends Components.CalciteCombobox, HTMLStencilElement {
    }
    var HTMLCalciteComboboxElement: {
        prototype: HTMLCalciteComboboxElement;
        new (): HTMLCalciteComboboxElement;
    };
    interface HTMLCalciteComboboxItemElement extends Components.CalciteComboboxItem, HTMLStencilElement {
    }
    var HTMLCalciteComboboxItemElement: {
        prototype: HTMLCalciteComboboxItemElement;
        new (): HTMLCalciteComboboxItemElement;
    };
    interface HTMLCalciteComboboxItemGroupElement extends Components.CalciteComboboxItemGroup, HTMLStencilElement {
    }
    var HTMLCalciteComboboxItemGroupElement: {
        prototype: HTMLCalciteComboboxItemGroupElement;
        new (): HTMLCalciteComboboxItemGroupElement;
    };
    interface HTMLCalciteDatePickerElement extends Components.CalciteDatePicker, HTMLStencilElement {
    }
    var HTMLCalciteDatePickerElement: {
        prototype: HTMLCalciteDatePickerElement;
        new (): HTMLCalciteDatePickerElement;
    };
    interface HTMLCalciteDatePickerDayElement extends Components.CalciteDatePickerDay, HTMLStencilElement {
    }
    var HTMLCalciteDatePickerDayElement: {
        prototype: HTMLCalciteDatePickerDayElement;
        new (): HTMLCalciteDatePickerDayElement;
    };
    interface HTMLCalciteDatePickerMonthElement extends Components.CalciteDatePickerMonth, HTMLStencilElement {
    }
    var HTMLCalciteDatePickerMonthElement: {
        prototype: HTMLCalciteDatePickerMonthElement;
        new (): HTMLCalciteDatePickerMonthElement;
    };
    interface HTMLCalciteDatePickerMonthHeaderElement extends Components.CalciteDatePickerMonthHeader, HTMLStencilElement {
    }
    var HTMLCalciteDatePickerMonthHeaderElement: {
        prototype: HTMLCalciteDatePickerMonthHeaderElement;
        new (): HTMLCalciteDatePickerMonthHeaderElement;
    };
    interface HTMLCalciteDropdownElement extends Components.CalciteDropdown, HTMLStencilElement {
    }
    var HTMLCalciteDropdownElement: {
        prototype: HTMLCalciteDropdownElement;
        new (): HTMLCalciteDropdownElement;
    };
    interface HTMLCalciteDropdownGroupElement extends Components.CalciteDropdownGroup, HTMLStencilElement {
    }
    var HTMLCalciteDropdownGroupElement: {
        prototype: HTMLCalciteDropdownGroupElement;
        new (): HTMLCalciteDropdownGroupElement;
    };
    interface HTMLCalciteDropdownItemElement extends Components.CalciteDropdownItem, HTMLStencilElement {
    }
    var HTMLCalciteDropdownItemElement: {
        prototype: HTMLCalciteDropdownItemElement;
        new (): HTMLCalciteDropdownItemElement;
    };
    interface HTMLCalciteFabElement extends Components.CalciteFab, HTMLStencilElement {
    }
    var HTMLCalciteFabElement: {
        prototype: HTMLCalciteFabElement;
        new (): HTMLCalciteFabElement;
    };
    interface HTMLCalciteFilterElement extends Components.CalciteFilter, HTMLStencilElement {
    }
    var HTMLCalciteFilterElement: {
        prototype: HTMLCalciteFilterElement;
        new (): HTMLCalciteFilterElement;
    };
    interface HTMLCalciteFlowElement extends Components.CalciteFlow, HTMLStencilElement {
    }
    var HTMLCalciteFlowElement: {
        prototype: HTMLCalciteFlowElement;
        new (): HTMLCalciteFlowElement;
    };
    interface HTMLCalciteFlowItemElement extends Components.CalciteFlowItem, HTMLStencilElement {
    }
    var HTMLCalciteFlowItemElement: {
        prototype: HTMLCalciteFlowItemElement;
        new (): HTMLCalciteFlowItemElement;
    };
    interface HTMLCalciteGraphElement extends Components.CalciteGraph, HTMLStencilElement {
    }
    var HTMLCalciteGraphElement: {
        prototype: HTMLCalciteGraphElement;
        new (): HTMLCalciteGraphElement;
    };
    interface HTMLCalciteHandleElement extends Components.CalciteHandle, HTMLStencilElement {
    }
    var HTMLCalciteHandleElement: {
        prototype: HTMLCalciteHandleElement;
        new (): HTMLCalciteHandleElement;
    };
    interface HTMLCalciteIconElement extends Components.CalciteIcon, HTMLStencilElement {
    }
    var HTMLCalciteIconElement: {
        prototype: HTMLCalciteIconElement;
        new (): HTMLCalciteIconElement;
    };
    interface HTMLCalciteInlineEditableElement extends Components.CalciteInlineEditable, HTMLStencilElement {
    }
    var HTMLCalciteInlineEditableElement: {
        prototype: HTMLCalciteInlineEditableElement;
        new (): HTMLCalciteInlineEditableElement;
    };
    interface HTMLCalciteInputElement extends Components.CalciteInput, HTMLStencilElement {
    }
    var HTMLCalciteInputElement: {
        prototype: HTMLCalciteInputElement;
        new (): HTMLCalciteInputElement;
    };
    interface HTMLCalciteInputDatePickerElement extends Components.CalciteInputDatePicker, HTMLStencilElement {
    }
    var HTMLCalciteInputDatePickerElement: {
        prototype: HTMLCalciteInputDatePickerElement;
        new (): HTMLCalciteInputDatePickerElement;
    };
    interface HTMLCalciteInputMessageElement extends Components.CalciteInputMessage, HTMLStencilElement {
    }
    var HTMLCalciteInputMessageElement: {
        prototype: HTMLCalciteInputMessageElement;
        new (): HTMLCalciteInputMessageElement;
    };
    interface HTMLCalciteInputNumberElement extends Components.CalciteInputNumber, HTMLStencilElement {
    }
    var HTMLCalciteInputNumberElement: {
        prototype: HTMLCalciteInputNumberElement;
        new (): HTMLCalciteInputNumberElement;
    };
    interface HTMLCalciteInputTextElement extends Components.CalciteInputText, HTMLStencilElement {
    }
    var HTMLCalciteInputTextElement: {
        prototype: HTMLCalciteInputTextElement;
        new (): HTMLCalciteInputTextElement;
    };
    interface HTMLCalciteInputTimePickerElement extends Components.CalciteInputTimePicker, HTMLStencilElement {
    }
    var HTMLCalciteInputTimePickerElement: {
        prototype: HTMLCalciteInputTimePickerElement;
        new (): HTMLCalciteInputTimePickerElement;
    };
    interface HTMLCalciteLabelElement extends Components.CalciteLabel, HTMLStencilElement {
    }
    var HTMLCalciteLabelElement: {
        prototype: HTMLCalciteLabelElement;
        new (): HTMLCalciteLabelElement;
    };
    interface HTMLCalciteLinkElement extends Components.CalciteLink, HTMLStencilElement {
    }
    var HTMLCalciteLinkElement: {
        prototype: HTMLCalciteLinkElement;
        new (): HTMLCalciteLinkElement;
    };
    /**
     * A general purpose list that enables users to construct list items that conform to Calcite styling.
     */
    interface HTMLCalciteListElement extends Components.CalciteList, HTMLStencilElement {
    }
    var HTMLCalciteListElement: {
        prototype: HTMLCalciteListElement;
        new (): HTMLCalciteListElement;
    };
    interface HTMLCalciteListItemElement extends Components.CalciteListItem, HTMLStencilElement {
    }
    var HTMLCalciteListItemElement: {
        prototype: HTMLCalciteListItemElement;
        new (): HTMLCalciteListItemElement;
    };
    interface HTMLCalciteListItemGroupElement extends Components.CalciteListItemGroup, HTMLStencilElement {
    }
    var HTMLCalciteListItemGroupElement: {
        prototype: HTMLCalciteListItemGroupElement;
        new (): HTMLCalciteListItemGroupElement;
    };
    interface HTMLCalciteLoaderElement extends Components.CalciteLoader, HTMLStencilElement {
    }
    var HTMLCalciteLoaderElement: {
        prototype: HTMLCalciteLoaderElement;
        new (): HTMLCalciteLoaderElement;
    };
    interface HTMLCalciteModalElement extends Components.CalciteModal, HTMLStencilElement {
    }
    var HTMLCalciteModalElement: {
        prototype: HTMLCalciteModalElement;
        new (): HTMLCalciteModalElement;
    };
    interface HTMLCalciteNoticeElement extends Components.CalciteNotice, HTMLStencilElement {
    }
    var HTMLCalciteNoticeElement: {
        prototype: HTMLCalciteNoticeElement;
        new (): HTMLCalciteNoticeElement;
    };
    interface HTMLCalciteOptionElement extends Components.CalciteOption, HTMLStencilElement {
    }
    var HTMLCalciteOptionElement: {
        prototype: HTMLCalciteOptionElement;
        new (): HTMLCalciteOptionElement;
    };
    interface HTMLCalciteOptionGroupElement extends Components.CalciteOptionGroup, HTMLStencilElement {
    }
    var HTMLCalciteOptionGroupElement: {
        prototype: HTMLCalciteOptionGroupElement;
        new (): HTMLCalciteOptionGroupElement;
    };
    interface HTMLCalcitePaginationElement extends Components.CalcitePagination, HTMLStencilElement {
    }
    var HTMLCalcitePaginationElement: {
        prototype: HTMLCalcitePaginationElement;
        new (): HTMLCalcitePaginationElement;
    };
    interface HTMLCalcitePanelElement extends Components.CalcitePanel, HTMLStencilElement {
    }
    var HTMLCalcitePanelElement: {
        prototype: HTMLCalcitePanelElement;
        new (): HTMLCalcitePanelElement;
    };
    /**
     * @deprecated Use the `list` component instead.
     */
    interface HTMLCalcitePickListElement extends Components.CalcitePickList, HTMLStencilElement {
    }
    var HTMLCalcitePickListElement: {
        prototype: HTMLCalcitePickListElement;
        new (): HTMLCalcitePickListElement;
    };
    /**
     * @deprecated Use the `list` component instead.
     */
    interface HTMLCalcitePickListGroupElement extends Components.CalcitePickListGroup, HTMLStencilElement {
    }
    var HTMLCalcitePickListGroupElement: {
        prototype: HTMLCalcitePickListGroupElement;
        new (): HTMLCalcitePickListGroupElement;
    };
    /**
     * @deprecated Use the `list` component instead.
     */
    interface HTMLCalcitePickListItemElement extends Components.CalcitePickListItem, HTMLStencilElement {
    }
    var HTMLCalcitePickListItemElement: {
        prototype: HTMLCalcitePickListItemElement;
        new (): HTMLCalcitePickListItemElement;
    };
    interface HTMLCalcitePopoverElement extends Components.CalcitePopover, HTMLStencilElement {
    }
    var HTMLCalcitePopoverElement: {
        prototype: HTMLCalcitePopoverElement;
        new (): HTMLCalcitePopoverElement;
    };
    interface HTMLCalciteProgressElement extends Components.CalciteProgress, HTMLStencilElement {
    }
    var HTMLCalciteProgressElement: {
        prototype: HTMLCalciteProgressElement;
        new (): HTMLCalciteProgressElement;
    };
    interface HTMLCalciteRadioButtonElement extends Components.CalciteRadioButton, HTMLStencilElement {
    }
    var HTMLCalciteRadioButtonElement: {
        prototype: HTMLCalciteRadioButtonElement;
        new (): HTMLCalciteRadioButtonElement;
    };
    interface HTMLCalciteRadioButtonGroupElement extends Components.CalciteRadioButtonGroup, HTMLStencilElement {
    }
    var HTMLCalciteRadioButtonGroupElement: {
        prototype: HTMLCalciteRadioButtonGroupElement;
        new (): HTMLCalciteRadioButtonGroupElement;
    };
    interface HTMLCalciteRatingElement extends Components.CalciteRating, HTMLStencilElement {
    }
    var HTMLCalciteRatingElement: {
        prototype: HTMLCalciteRatingElement;
        new (): HTMLCalciteRatingElement;
    };
    interface HTMLCalciteScrimElement extends Components.CalciteScrim, HTMLStencilElement {
    }
    var HTMLCalciteScrimElement: {
        prototype: HTMLCalciteScrimElement;
        new (): HTMLCalciteScrimElement;
    };
    interface HTMLCalciteSegmentedControlElement extends Components.CalciteSegmentedControl, HTMLStencilElement {
    }
    var HTMLCalciteSegmentedControlElement: {
        prototype: HTMLCalciteSegmentedControlElement;
        new (): HTMLCalciteSegmentedControlElement;
    };
    interface HTMLCalciteSegmentedControlItemElement extends Components.CalciteSegmentedControlItem, HTMLStencilElement {
    }
    var HTMLCalciteSegmentedControlItemElement: {
        prototype: HTMLCalciteSegmentedControlItemElement;
        new (): HTMLCalciteSegmentedControlItemElement;
    };
    interface HTMLCalciteSelectElement extends Components.CalciteSelect, HTMLStencilElement {
    }
    var HTMLCalciteSelectElement: {
        prototype: HTMLCalciteSelectElement;
        new (): HTMLCalciteSelectElement;
    };
    interface HTMLCalciteShellElement extends Components.CalciteShell, HTMLStencilElement {
    }
    var HTMLCalciteShellElement: {
        prototype: HTMLCalciteShellElement;
        new (): HTMLCalciteShellElement;
    };
    interface HTMLCalciteShellCenterRowElement extends Components.CalciteShellCenterRow, HTMLStencilElement {
    }
    var HTMLCalciteShellCenterRowElement: {
        prototype: HTMLCalciteShellCenterRowElement;
        new (): HTMLCalciteShellCenterRowElement;
    };
    interface HTMLCalciteShellPanelElement extends Components.CalciteShellPanel, HTMLStencilElement {
    }
    var HTMLCalciteShellPanelElement: {
        prototype: HTMLCalciteShellPanelElement;
        new (): HTMLCalciteShellPanelElement;
    };
    interface HTMLCalciteSliderElement extends Components.CalciteSlider, HTMLStencilElement {
    }
    var HTMLCalciteSliderElement: {
        prototype: HTMLCalciteSliderElement;
        new (): HTMLCalciteSliderElement;
    };
    interface HTMLCalciteSortableListElement extends Components.CalciteSortableList, HTMLStencilElement {
    }
    var HTMLCalciteSortableListElement: {
        prototype: HTMLCalciteSortableListElement;
        new (): HTMLCalciteSortableListElement;
    };
    interface HTMLCalciteSplitButtonElement extends Components.CalciteSplitButton, HTMLStencilElement {
    }
    var HTMLCalciteSplitButtonElement: {
        prototype: HTMLCalciteSplitButtonElement;
        new (): HTMLCalciteSplitButtonElement;
    };
    interface HTMLCalciteStepperElement extends Components.CalciteStepper, HTMLStencilElement {
    }
    var HTMLCalciteStepperElement: {
        prototype: HTMLCalciteStepperElement;
        new (): HTMLCalciteStepperElement;
    };
    interface HTMLCalciteStepperItemElement extends Components.CalciteStepperItem, HTMLStencilElement {
    }
    var HTMLCalciteStepperItemElement: {
        prototype: HTMLCalciteStepperItemElement;
        new (): HTMLCalciteStepperItemElement;
    };
    interface HTMLCalciteSwitchElement extends Components.CalciteSwitch, HTMLStencilElement {
    }
    var HTMLCalciteSwitchElement: {
        prototype: HTMLCalciteSwitchElement;
        new (): HTMLCalciteSwitchElement;
    };
    interface HTMLCalciteTabElement extends Components.CalciteTab, HTMLStencilElement {
    }
    var HTMLCalciteTabElement: {
        prototype: HTMLCalciteTabElement;
        new (): HTMLCalciteTabElement;
    };
    interface HTMLCalciteTabNavElement extends Components.CalciteTabNav, HTMLStencilElement {
    }
    var HTMLCalciteTabNavElement: {
        prototype: HTMLCalciteTabNavElement;
        new (): HTMLCalciteTabNavElement;
    };
    interface HTMLCalciteTabTitleElement extends Components.CalciteTabTitle, HTMLStencilElement {
    }
    var HTMLCalciteTabTitleElement: {
        prototype: HTMLCalciteTabTitleElement;
        new (): HTMLCalciteTabTitleElement;
    };
    interface HTMLCalciteTabsElement extends Components.CalciteTabs, HTMLStencilElement {
    }
    var HTMLCalciteTabsElement: {
        prototype: HTMLCalciteTabsElement;
        new (): HTMLCalciteTabsElement;
    };
    interface HTMLCalciteTextAreaElement extends Components.CalciteTextArea, HTMLStencilElement {
    }
    var HTMLCalciteTextAreaElement: {
        prototype: HTMLCalciteTextAreaElement;
        new (): HTMLCalciteTextAreaElement;
    };
    interface HTMLCalciteTileElement extends Components.CalciteTile, HTMLStencilElement {
    }
    var HTMLCalciteTileElement: {
        prototype: HTMLCalciteTileElement;
        new (): HTMLCalciteTileElement;
    };
    interface HTMLCalciteTileSelectElement extends Components.CalciteTileSelect, HTMLStencilElement {
    }
    var HTMLCalciteTileSelectElement: {
        prototype: HTMLCalciteTileSelectElement;
        new (): HTMLCalciteTileSelectElement;
    };
    interface HTMLCalciteTileSelectGroupElement extends Components.CalciteTileSelectGroup, HTMLStencilElement {
    }
    var HTMLCalciteTileSelectGroupElement: {
        prototype: HTMLCalciteTileSelectGroupElement;
        new (): HTMLCalciteTileSelectGroupElement;
    };
    interface HTMLCalciteTimePickerElement extends Components.CalciteTimePicker, HTMLStencilElement {
    }
    var HTMLCalciteTimePickerElement: {
        prototype: HTMLCalciteTimePickerElement;
        new (): HTMLCalciteTimePickerElement;
    };
    interface HTMLCalciteTipElement extends Components.CalciteTip, HTMLStencilElement {
    }
    var HTMLCalciteTipElement: {
        prototype: HTMLCalciteTipElement;
        new (): HTMLCalciteTipElement;
    };
    interface HTMLCalciteTipGroupElement extends Components.CalciteTipGroup, HTMLStencilElement {
    }
    var HTMLCalciteTipGroupElement: {
        prototype: HTMLCalciteTipGroupElement;
        new (): HTMLCalciteTipGroupElement;
    };
    interface HTMLCalciteTipManagerElement extends Components.CalciteTipManager, HTMLStencilElement {
    }
    var HTMLCalciteTipManagerElement: {
        prototype: HTMLCalciteTipManagerElement;
        new (): HTMLCalciteTipManagerElement;
    };
    interface HTMLCalciteTooltipElement extends Components.CalciteTooltip, HTMLStencilElement {
    }
    var HTMLCalciteTooltipElement: {
        prototype: HTMLCalciteTooltipElement;
        new (): HTMLCalciteTooltipElement;
    };
    interface HTMLCalciteTreeElement extends Components.CalciteTree, HTMLStencilElement {
    }
    var HTMLCalciteTreeElement: {
        prototype: HTMLCalciteTreeElement;
        new (): HTMLCalciteTreeElement;
    };
    interface HTMLCalciteTreeItemElement extends Components.CalciteTreeItem, HTMLStencilElement {
    }
    var HTMLCalciteTreeItemElement: {
        prototype: HTMLCalciteTreeItemElement;
        new (): HTMLCalciteTreeItemElement;
    };
    /**
     * @deprecated Use the `list` component instead.
     */
    interface HTMLCalciteValueListElement extends Components.CalciteValueList, HTMLStencilElement {
    }
    var HTMLCalciteValueListElement: {
        prototype: HTMLCalciteValueListElement;
        new (): HTMLCalciteValueListElement;
    };
    /**
     * @deprecated Use the `list` component instead.
     */
    interface HTMLCalciteValueListItemElement extends Components.CalciteValueListItem, HTMLStencilElement {
    }
    var HTMLCalciteValueListItemElement: {
        prototype: HTMLCalciteValueListItemElement;
        new (): HTMLCalciteValueListItemElement;
    };
    interface HTMLElementTagNameMap {
        "calcite-accordion": HTMLCalciteAccordionElement;
        "calcite-accordion-item": HTMLCalciteAccordionItemElement;
        "calcite-action": HTMLCalciteActionElement;
        "calcite-action-bar": HTMLCalciteActionBarElement;
        "calcite-action-group": HTMLCalciteActionGroupElement;
        "calcite-action-menu": HTMLCalciteActionMenuElement;
        "calcite-action-pad": HTMLCalciteActionPadElement;
        "calcite-alert": HTMLCalciteAlertElement;
        "calcite-avatar": HTMLCalciteAvatarElement;
        "calcite-block": HTMLCalciteBlockElement;
        "calcite-block-section": HTMLCalciteBlockSectionElement;
        "calcite-button": HTMLCalciteButtonElement;
        "calcite-card": HTMLCalciteCardElement;
        "calcite-checkbox": HTMLCalciteCheckboxElement;
        "calcite-chip": HTMLCalciteChipElement;
        "calcite-color-picker": HTMLCalciteColorPickerElement;
        "calcite-color-picker-hex-input": HTMLCalciteColorPickerHexInputElement;
        "calcite-color-picker-swatch": HTMLCalciteColorPickerSwatchElement;
        "calcite-combobox": HTMLCalciteComboboxElement;
        "calcite-combobox-item": HTMLCalciteComboboxItemElement;
        "calcite-combobox-item-group": HTMLCalciteComboboxItemGroupElement;
        "calcite-date-picker": HTMLCalciteDatePickerElement;
        "calcite-date-picker-day": HTMLCalciteDatePickerDayElement;
        "calcite-date-picker-month": HTMLCalciteDatePickerMonthElement;
        "calcite-date-picker-month-header": HTMLCalciteDatePickerMonthHeaderElement;
        "calcite-dropdown": HTMLCalciteDropdownElement;
        "calcite-dropdown-group": HTMLCalciteDropdownGroupElement;
        "calcite-dropdown-item": HTMLCalciteDropdownItemElement;
        "calcite-fab": HTMLCalciteFabElement;
        "calcite-filter": HTMLCalciteFilterElement;
        "calcite-flow": HTMLCalciteFlowElement;
        "calcite-flow-item": HTMLCalciteFlowItemElement;
        "calcite-graph": HTMLCalciteGraphElement;
        "calcite-handle": HTMLCalciteHandleElement;
        "calcite-icon": HTMLCalciteIconElement;
        "calcite-inline-editable": HTMLCalciteInlineEditableElement;
        "calcite-input": HTMLCalciteInputElement;
        "calcite-input-date-picker": HTMLCalciteInputDatePickerElement;
        "calcite-input-message": HTMLCalciteInputMessageElement;
        "calcite-input-number": HTMLCalciteInputNumberElement;
        "calcite-input-text": HTMLCalciteInputTextElement;
        "calcite-input-time-picker": HTMLCalciteInputTimePickerElement;
        "calcite-label": HTMLCalciteLabelElement;
        "calcite-link": HTMLCalciteLinkElement;
        "calcite-list": HTMLCalciteListElement;
        "calcite-list-item": HTMLCalciteListItemElement;
        "calcite-list-item-group": HTMLCalciteListItemGroupElement;
        "calcite-loader": HTMLCalciteLoaderElement;
        "calcite-modal": HTMLCalciteModalElement;
        "calcite-notice": HTMLCalciteNoticeElement;
        "calcite-option": HTMLCalciteOptionElement;
        "calcite-option-group": HTMLCalciteOptionGroupElement;
        "calcite-pagination": HTMLCalcitePaginationElement;
        "calcite-panel": HTMLCalcitePanelElement;
        "calcite-pick-list": HTMLCalcitePickListElement;
        "calcite-pick-list-group": HTMLCalcitePickListGroupElement;
        "calcite-pick-list-item": HTMLCalcitePickListItemElement;
        "calcite-popover": HTMLCalcitePopoverElement;
        "calcite-progress": HTMLCalciteProgressElement;
        "calcite-radio-button": HTMLCalciteRadioButtonElement;
        "calcite-radio-button-group": HTMLCalciteRadioButtonGroupElement;
        "calcite-rating": HTMLCalciteRatingElement;
        "calcite-scrim": HTMLCalciteScrimElement;
        "calcite-segmented-control": HTMLCalciteSegmentedControlElement;
        "calcite-segmented-control-item": HTMLCalciteSegmentedControlItemElement;
        "calcite-select": HTMLCalciteSelectElement;
        "calcite-shell": HTMLCalciteShellElement;
        "calcite-shell-center-row": HTMLCalciteShellCenterRowElement;
        "calcite-shell-panel": HTMLCalciteShellPanelElement;
        "calcite-slider": HTMLCalciteSliderElement;
        "calcite-sortable-list": HTMLCalciteSortableListElement;
        "calcite-split-button": HTMLCalciteSplitButtonElement;
        "calcite-stepper": HTMLCalciteStepperElement;
        "calcite-stepper-item": HTMLCalciteStepperItemElement;
        "calcite-switch": HTMLCalciteSwitchElement;
        "calcite-tab": HTMLCalciteTabElement;
        "calcite-tab-nav": HTMLCalciteTabNavElement;
        "calcite-tab-title": HTMLCalciteTabTitleElement;
        "calcite-tabs": HTMLCalciteTabsElement;
        "calcite-text-area": HTMLCalciteTextAreaElement;
        "calcite-tile": HTMLCalciteTileElement;
        "calcite-tile-select": HTMLCalciteTileSelectElement;
        "calcite-tile-select-group": HTMLCalciteTileSelectGroupElement;
        "calcite-time-picker": HTMLCalciteTimePickerElement;
        "calcite-tip": HTMLCalciteTipElement;
        "calcite-tip-group": HTMLCalciteTipGroupElement;
        "calcite-tip-manager": HTMLCalciteTipManagerElement;
        "calcite-tooltip": HTMLCalciteTooltipElement;
        "calcite-tree": HTMLCalciteTreeElement;
        "calcite-tree-item": HTMLCalciteTreeItemElement;
        "calcite-value-list": HTMLCalciteValueListElement;
        "calcite-value-list-item": HTMLCalciteValueListItemElement;
    }
}
declare namespace LocalJSX {
    interface CalciteAccordion {
        /**
          * Specifies the appearance of the component.
         */
        "appearance"?: Extract<"solid" | "transparent", Appearance>;
        /**
          * Specifies the placement of the icon in the header.
         */
        "iconPosition"?: Position;
        /**
          * Specifies the type of the icon in the header.
         */
        "iconType"?: "chevron" | "caret" | "plus-minus";
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the selection mode - `"multiple"` (allow any number of open items), `"single"` (allow one open item), or `"single-persist"` (allow and require one open item).
         */
        "selectionMode"?: Extract<
    "single" | "single-persist" | "multiple",
    SelectionMode
  >;
    }
    interface CalciteAccordionItem {
        /**
          * Specifies a description for the component.
         */
        "description"?: string;
        /**
          * When `true`, the component is expanded.
         */
        "expanded"?: boolean;
        /**
          * Specifies heading text for the component.
         */
        "heading"?: string;
        /**
          * Specifies an icon to display at the end of the component.
         */
        "iconEnd"?: string;
        /**
          * Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: FlipContext;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart"?: string;
    }
    interface CalciteAction {
        /**
          * When `true`, the component is highlighted.
         */
        "active"?: boolean;
        /**
          * Specifies the horizontal alignment of button elements with text content.
         */
        "alignment"?: Alignment;
        /**
          * Specifies the appearance of the component.
         */
        "appearance"?: Extract<"solid" | "transparent", Appearance>;
        /**
          * When `true`, the side padding of the component is reduced. Compact mode is used internally by components, e.g. `calcite-block-section`.
         */
        "compact"?: boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Specifies an icon to display.
         */
        "icon"?: string;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * When `true`, displays a visual indicator.
         */
        "indicator"?: boolean;
        /**
          * Specifies the label of the component. If no label is provided, the label inherits what's provided for the `text` prop.
         */
        "label"?: string;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading"?: boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<ActionMessages>;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies text that accompanies the icon.
         */
        "text": string;
        /**
          * Indicates whether the text is displayed.
         */
        "textEnabled"?: boolean;
    }
    interface CalciteActionBar {
        /**
          * When `true`, the expand-toggling behavior is disabled.
         */
        "expandDisabled"?: boolean;
        /**
          * When `true`, the component is expanded.
         */
        "expanded"?: boolean;
        /**
          * The layout direction of the actions.
         */
        "layout"?: Extract<"horizontal" | "vertical", Layout>;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<ActionBarMessages>;
        /**
          * Emits when the `expanded` property is toggled.
         */
        "onCalciteActionBarToggle"?: (event: CalciteActionBarCustomEvent<void>) => void;
        /**
          * Disables automatically overflowing `calcite-action`s that won't fit into menus.
         */
        "overflowActionsDisabled"?: boolean;
        /**
          * Arranges the component depending on the element's `dir` property.
         */
        "position"?: Position;
        /**
          * Specifies the size of the expand `calcite-action`.
         */
        "scale"?: Scale;
    }
    interface CalciteActionGroup {
        /**
          * Indicates number of columns.
         */
        "columns"?: Columns;
        /**
          * When `true`, the component is expanded.
         */
        "expanded"?: boolean;
        /**
          * Indicates the layout of the component.
         */
        "layout"?: Layout;
        /**
          * When `true`, the `calcite-action-menu` is open.
         */
        "menuOpen"?: boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<ActionGroupMessages>;
        /**
          * Specifies the size of the `calcite-action-menu`.
         */
        "scale"?: Scale;
    }
    interface CalciteActionMenu {
        /**
          * When `true`, the component is expanded.
         */
        "expanded"?: boolean;
        /**
          * Defines the available placements that can be used when a flip occurs.
         */
        "flipPlacements"?: EffectivePlacement[];
        /**
          * Specifies the text string for the component.
         */
        "label": string;
        /**
          * Emits when the `open` property is toggled.
         */
        "onCalciteActionMenuOpen"?: (event: CalciteActionMenuCustomEvent<void>) => void;
        /**
          * When `true`, the component is open.
         */
        "open"?: boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout. `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Determines where the component will be positioned relative to the `referenceElement`.
         */
        "placement"?: LogicalPlacement;
        /**
          * Specifies the size of the component's trigger `calcite-action`.
         */
        "scale"?: Scale;
    }
    interface CalciteActionPad {
        /**
          * When `true`, the expand-toggling behavior is disabled.
         */
        "expandDisabled"?: boolean;
        /**
          * When `true`, the component is expanded.
         */
        "expanded"?: boolean;
        /**
          * Indicates the layout of the component.
         */
        "layout"?: Layout;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<ActionPadMessages>;
        /**
          * Emits when the `expanded` property is toggled.
         */
        "onCalciteActionPadToggle"?: (event: CalciteActionPadCustomEvent<void>) => void;
        /**
          * Arranges the component depending on the element's `dir` property.
         */
        "position"?: Position;
        /**
          * Specifies the size of the expand `calcite-action`.
         */
        "scale"?: Scale;
    }
    interface CalciteAlert {
        /**
          * When `true`, the component closes automatically (recommended for passive, non-blocking alerts).
         */
        "autoClose"?: boolean;
        /**
          * Specifies the duration before the component automatically closes (only use with `autoClose`).
         */
        "autoCloseDuration"?: AlertDuration;
        /**
          * When `true`, shows a default recommended icon. Alternatively, pass a Calcite UI Icon name to display a specific icon.
         */
        "icon"?: string | boolean;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * Specifies the kind of the component (will apply to top border and icon).
         */
        "kind"?: Extract<
    "brand" | "danger" | "info" | "success" | "warning",
    Kind
  >;
        /**
          * Specifies an accessible name for the component.
         */
        "label": string;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<AlertMessages>;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * Fires when the component is requested to be closed and before the closing transition begins.
         */
        "onCalciteAlertBeforeClose"?: (event: CalciteAlertCustomEvent<void>) => void;
        /**
          * Fires when the component is added to the DOM but not rendered, and before the opening transition begins.
         */
        "onCalciteAlertBeforeOpen"?: (event: CalciteAlertCustomEvent<void>) => void;
        /**
          * Fires when the component is closed and animation is complete.
         */
        "onCalciteAlertClose"?: (event: CalciteAlertCustomEvent<void>) => void;
        /**
          * Fires when the component is open and animation is complete.
         */
        "onCalciteAlertOpen"?: (event: CalciteAlertCustomEvent<void>) => void;
        /**
          * When `true`, displays and positions the component.
         */
        "open"?: boolean;
        /**
          * Specifies the placement of the component
         */
        "placement"?: MenuPlacement;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
    }
    interface CalciteAvatar {
        /**
          * Specifies the full name of the user.
         */
        "fullName"?: string;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the `src` to an image (remember to add a token if the user is private).
         */
        "thumbnail"?: string;
        /**
          * Specifies the unique id of the user.
         */
        "userId"?: string;
        /**
          * Specifies the username of the user.
         */
        "username"?: string;
    }
    interface CalciteBlock {
        /**
          * When `true`, the component is collapsible.
         */
        "collapsible"?: boolean;
        /**
          * A description for the component, which displays below the heading.
         */
        "description"?: string;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * When `true`, displays a drag handle in the header.
         */
        "dragHandle"?: boolean;
        /**
          * The component header text.
         */
        "heading": string;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading"?: boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<BlockMessages>;
        /**
          * Emits when the component's header is clicked.
         */
        "onCalciteBlockToggle"?: (event: CalciteBlockCustomEvent<void>) => void;
        /**
          * When `true`, expands the component and its contents.
         */
        "open"?: boolean;
        /**
          * Displays a status-related indicator icon.
         */
        "status"?: Status;
    }
    interface CalciteBlockSection {
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<BlockSectionMessages>;
        /**
          * Emits when the header has been clicked.
         */
        "onCalciteBlockSectionToggle"?: (event: CalciteBlockSectionCustomEvent<void>) => void;
        /**
          * When `true`, expands the component and its contents.
         */
        "open"?: boolean;
        /**
          * Displays a status-related indicator icon.
         */
        "status"?: Status;
        /**
          * The component header text.
         */
        "text"?: string;
        /**
          * Specifies the component's toggle display -  `"button"` (selectable header), or  `"switch"` (toggle switch).
         */
        "toggleDisplay"?: BlockSectionToggleDisplay;
    }
    interface CalciteButton {
        /**
          * Specifies the alignment of the component's elements.
         */
        "alignment"?: ButtonAlignment;
        /**
          * Specifies the appearance style of the component.
         */
        "appearance"?: Extract<
    "outline" | "outline-fill" | "solid" | "transparent",
    Appearance
  >;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * The ID of the form that will be associated with the component.  When not set, the component will be associated with its ancestor `<form>` element, if any.
         */
        "form"?: string;
        /**
          * Specifies the URL of the linked resource, which can be set as an absolute or relative path.
         */
        "href"?: string;
        /**
          * Specifies an icon to display at the end of the component.
         */
        "iconEnd"?: string;
        /**
          * Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: FlipContext;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart"?: string;
        /**
          * Specifies the kind of the component (will apply to border and background if applicable).
         */
        "kind"?: Extract<"brand" | "danger" | "inverse" | "neutral", Kind>;
        /**
          * Accessible name for the component.
         */
        "label"?: string;
        /**
          * When `true`, a busy indicator is displayed and interaction is disabled.
         */
        "loading"?: boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<ButtonMessages>;
        /**
          * Specifies the name of the component on form submission.
         */
        "name"?: string;
        /**
          * Defines the relationship between the `href` value and the current document.
          * @mdn [rel](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel)
         */
        "rel"?: string;
        /**
          * When `true`, adds a round style to the component.
         */
        "round"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies if the component is a child of a `calcite-split-button`.
         */
        "splitChild"?: "primary" | "secondary" | false;
        /**
          * Specifies where to open the linked document defined in the `href` property.
          * @mdn [target](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target)
         */
        "target"?: string;
        /**
          * Specifies the default behavior of the button.
          * @mdn [type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type)
         */
        "type"?: string;
        /**
          * Specifies the width of the component.
         */
        "width"?: Width;
    }
    interface CalciteCard {
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading"?: boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<CardMessages>;
        /**
          * Fires when `selectable` is `true` and the component is selected.
         */
        "onCalciteCardSelect"?: (event: CalciteCardCustomEvent<void>) => void;
        /**
          * When `true`, the component is selectable.
         */
        "selectable"?: boolean;
        /**
          * When `true`, the component is selected.
         */
        "selected"?: boolean;
        /**
          * Sets the placement of the thumbnail defined in the `thumbnail` slot.
         */
        "thumbnailPosition"?: LogicalFlowPosition;
    }
    interface CalciteCheckbox {
        /**
          * When `true`, the component is checked.
         */
        "checked"?: boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * The ID of the form that will be associated with the component.  When not set, the component will be associated with its ancestor `<form>` element, if any.
         */
        "form"?: string;
        /**
          * The `id` attribute of the component. When omitted, a globally unique identifier is used.
         */
        "guid"?: string;
        /**
          * When `true`, the component is initially indeterminate, which is independent from its `checked` value.  The state is visual only, and can look different across browsers.
          * @mdn [indeterminate](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#indeterminate_state_checkboxes)
         */
        "indeterminate"?: boolean;
        /**
          * Specifies the name of the component on form submission.
         */
        "name"?: any;
        /**
          * Emits when the component's `checked` status changes.
         */
        "onCalciteCheckboxChange"?: (event: CalciteCheckboxCustomEvent<void>) => void;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * The component's value.
         */
        "value"?: any;
    }
    interface CalciteChip {
        /**
          * Specifies the appearance style of the component.
         */
        "appearance"?: Extract<"outline" | "outline-fill" | "solid", Appearance>;
        /**
          * When `true`, a close button is added to the component.
         */
        "closable"?: boolean;
        /**
          * When `true`, hides the component.
         */
        "closed"?: boolean;
        /**
          * Specifies an icon to display.
         */
        "icon"?: string;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * Specifies the kind of the component (will apply to border and background if applicable).
         */
        "kind"?: Extract<"brand" | "inverse" | "neutral", Kind>;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<ChipMessages>;
        /**
          * Fires when the close button is clicked.
         */
        "onCalciteChipClose"?: (event: CalciteChipCustomEvent<void>) => void;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * The component's value.
         */
        "value": any;
    }
    interface CalciteColorPicker {
        /**
          * When `false`, an empty color (`null`) will be allowed as a `value`. Otherwise, a color value is enforced on the component.  When `true`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`. When `false`, an empty color (`null`) will be allowed as a `value`.
         */
        "allowEmpty"?: boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * The format of `value`.  When `"auto"`, the format will be inferred from `value` when set.
          * @default "auto"
         */
        "format"?: Format;
        /**
          * When `true`, hides the RGB/HSV channel inputs.
         */
        "hideChannels"?: boolean;
        /**
          * When `true`, hides the Hex input.
         */
        "hideHex"?: boolean;
        /**
          * When `true`, hides the saved colors section.
         */
        "hideSaved"?: boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<ColorPickerMessages>;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * Fires when the color value has changed.
         */
        "onCalciteColorPickerChange"?: (event: CalciteColorPickerCustomEvent<void>) => void;
        /**
          * Fires as the color value changes.  Similar to the `calciteColorPickerChange` event with the exception of dragging. When dragging the color field or hue slider thumb, this event fires as the thumb is moved.
         */
        "onCalciteColorPickerInput"?: (event: CalciteColorPickerCustomEvent<void>) => void;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the storage ID for colors.
         */
        "storageId"?: string;
        /**
          * The component's value, where the value can be a CSS color string, or a RGB, HSL or HSV object.  The type will be preserved as the color is updated.
          * @default "#007ac2"
          * @see [CSS Color](https://developer.mozilla.org/en-US/docs/Web/CSS/color)
          * @see [ColorValue](https://github.com/Esri/calcite-components/blob/master/src/components/color-picker/interfaces.ts#L10)
         */
        "value"?: ColorValue | null;
    }
    interface CalciteColorPickerHexInput {
        /**
          * When `false`, an empty color (`null`) will be allowed as a `value`. Otherwise, a color value is enforced on the component.  When `true`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`. When `false`, an empty color (`null`) will be allowed as a `value`.
         */
        "allowEmpty"?: boolean;
        /**
          * Specifies accessible label for the input field.
         */
        "hexLabel"?: string;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * Emitted when the hex value changes.
         */
        "onCalciteColorPickerHexInputChange"?: (event: CalciteColorPickerHexInputCustomEvent<void>) => void;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * The Hex value.
         */
        "value"?: string;
    }
    interface CalciteColorPickerSwatch {
        /**
          * When `true`, the component is active.
         */
        "active"?: boolean;
        /**
          * The color value.
          * @see https://developer.mozilla.org/en-US/docs/Web/CSS/color_value
         */
        "color"?: string;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
    }
    interface CalciteCombobox {
        /**
          * When `true`, allows entry of custom values, which are not in the original set of items.
         */
        "allowCustomValues"?: boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Specifies the component's filtered items.
          * @readonly
         */
        "filteredItems"?: HTMLCalciteComboboxItemElement[];
        /**
          * Defines the available placements that can be used when a flip occurs.
         */
        "flipPlacements"?: EffectivePlacement[];
        /**
          * The ID of the form that will be associated with the component.  When not set, the component will be associated with its ancestor `<form>` element, if any.
         */
        "form"?: string;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Specifies the maximum number of `calcite-combobox-item`s (including nested children) to display before displaying a scrollbar.
         */
        "maxItems"?: number;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<ComboboxMessages>;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name"?: string;
        /**
          * Fires when the component is requested to be closed, and before the closing transition begins.
         */
        "onCalciteComboboxBeforeClose"?: (event: CalciteComboboxCustomEvent<void>) => void;
        /**
          * Fires when the component is added to the DOM but not rendered, and before the opening transition begins.
         */
        "onCalciteComboboxBeforeOpen"?: (event: CalciteComboboxCustomEvent<void>) => void;
        /**
          * Fires when the selected item(s) changes.
         */
        "onCalciteComboboxChange"?: (event: CalciteComboboxCustomEvent<void>) => void;
        /**
          * Fires when a selected item in the component is closed via its `calcite-chip`.
         */
        "onCalciteComboboxChipClose"?: (event: CalciteComboboxCustomEvent<void>) => void;
        /**
          * Fires when the component is closed and animation is complete.
         */
        "onCalciteComboboxClose"?: (event: CalciteComboboxCustomEvent<void>) => void;
        /**
          * Fires when text is added to filter the options list.
         */
        "onCalciteComboboxFilterChange"?: (event: CalciteComboboxCustomEvent<void>) => void;
        /**
          * Fires when the component is open and animation is complete.
         */
        "onCalciteComboboxOpen"?: (event: CalciteComboboxCustomEvent<void>) => void;
        /**
          * When `true`, displays and positions the component.
         */
        "open"?: boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Specifies the placeholder text for the input.
         */
        "placeholder"?: string;
        /**
          * Specifies the placeholder icon for the input.
         */
        "placeholderIcon"?: string;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "placeholderIconFlipRtl"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the component's selected items.
          * @readonly
         */
        "selectedItems"?: HTMLCalciteComboboxItemElement[];
        /**
          * specify the selection mode - multiple: allow any number of selected items (default) - single: only one selection) - ancestors: like multiple, but show ancestors of selected items as selected, only deepest children shown in chips
         */
        "selectionMode"?: Extract<
    "single" | "ancestors" | "multiple",
    SelectionMode
  >;
        /**
          * The component's value(s) from the selected `calcite-combobox-item`(s).
         */
        "value"?: string | string[];
    }
    interface CalciteComboboxItem {
        /**
          * When `true`, the component is active.
         */
        "active"?: boolean;
        /**
          * Specifies the parent and grandparent items, which are set on `calcite-combobox`.
         */
        "ancestors"?: ComboboxChildElement[];
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * When `true`, omits the component from the `calcite-combobox` filtered search results.
         */
        "filterDisabled"?: boolean;
        /**
          * The `id` attribute of the component. When omitted, a globally unique identifier is used.
         */
        "guid"?: string;
        /**
          * Specifies an icon to display.
         */
        "icon"?: string;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * Emits whenever the component is selected or unselected.
         */
        "onCalciteComboboxItemChange"?: (event: CalciteComboboxItemCustomEvent<void>) => void;
        /**
          * When `true`, the component is selected.
         */
        "selected"?: boolean;
        /**
          * The component's text.
         */
        "textLabel": string;
        /**
          * The component's value.
         */
        "value": any;
    }
    interface CalciteComboboxItemGroup {
        /**
          * Specifies the parent and grandparent `calcite-combobox-item`s, which are set on `calcite-combobox`.
         */
        "ancestors"?: ComboboxChildElement[];
        /**
          * Specifies the title of the component.
         */
        "label": string;
    }
    interface CalciteDatePicker {
        /**
          * Specifies the component's active date.
         */
        "activeDate"?: Date;
        /**
          * When `range` is true, specifies the active `range`. Where `"start"` specifies the starting range date and `"end"` the ending range date.
         */
        "activeRange"?: "start" | "end";
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * Specifies the latest allowed date (`"yyyy-mm-dd"`).
         */
        "max"?: string;
        /**
          * Specifies the latest allowed date as a full date object (`new Date("yyyy-mm-dd")`).
         */
        "maxAsDate"?: Date;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<DatePickerMessages>;
        /**
          * Specifies the earliest allowed date (`"yyyy-mm-dd"`).
         */
        "min"?: string;
        /**
          * Specifies the earliest allowed date as a full date object (`new Date("yyyy-mm-dd")`).
         */
        "minAsDate"?: Date;
        /**
          * Specifies the Unicode numeral system used by the component for localization. This property cannot be dynamically changed.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * Emits when a user changes the component's date. For `range` events, use `calciteDatePickerRangeChange`.
         */
        "onCalciteDatePickerChange"?: (event: CalciteDatePickerCustomEvent<void>) => void;
        /**
          * Emits when a user changes the component's date `range`. For components without `range` use `calciteDatePickerChange`.
         */
        "onCalciteDatePickerRangeChange"?: (event: CalciteDatePickerCustomEvent<void>) => void;
        /**
          * When `true`, disables the default behavior on the third click of narrowing or extending the range and instead starts a new range.
         */
        "proximitySelectionDisabled"?: boolean;
        /**
          * When `true`, activates the component's range mode to allow a start and end date.
         */
        "range"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: "s" | "m" | "l";
        /**
          * Specifies the selected date as a string (`"yyyy-mm-dd"`), or an array of strings for `range` values (`["yyyy-mm-dd", "yyyy-mm-dd"]`).
         */
        "value"?: string | string[];
        /**
          * Specifies the selected date as a full date object (`new Date("yyyy-mm-dd")`), or an array containing full date objects (`[new Date("yyyy-mm-dd"), new Date("yyyy-mm-dd")]`).
         */
        "valueAsDate"?: Date | Date[];
    }
    interface CalciteDatePickerDay {
        /**
          * When `true`, the component is active.
         */
        "active"?: boolean;
        /**
          * Date is in the current month.
         */
        "currentMonth"?: boolean;
        /**
          * Day of the month to be shown.
         */
        "day": number;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Date is the end of date range
         */
        "endOfRange"?: boolean;
        /**
          * Date is currently highlighted as part of the range
         */
        "highlighted"?: boolean;
        /**
          * Emitted when user selects day
         */
        "onCalciteDaySelect"?: (event: CalciteDatePickerDayCustomEvent<void>) => void;
        /**
          * When `true`, activates the component's range mode to allow a start and end date.
         */
        "range"?: boolean;
        /**
          * Date is being hovered and within the set range
         */
        "rangeHover"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * When `true`, the component is selected.
         */
        "selected"?: boolean;
        /**
          * Date is the start of date range
         */
        "startOfRange"?: boolean;
        /**
          * The component's value.
         */
        "value"?: Date;
    }
    interface CalciteDatePickerMonth {
        /**
          * Date currently active.
         */
        "activeDate"?: Date;
        /**
          * End date currently active
         */
        "endDate"?: Date;
        /**
          * The range of dates currently being hovered
         */
        "hoverRange"?: HoverRange;
        /**
          * Specifies the latest allowed date (`"yyyy-mm-dd"`).
         */
        "max"?: Date;
        /**
          * Specifies the earliest allowed date (`"yyyy-mm-dd"`).
         */
        "min"?: Date;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Already selected date.
         */
        "selectedDate"?: Date;
        /**
          * Start date currently active.
         */
        "startDate"?: Date;
    }
    interface CalciteDatePickerMonthHeader {
        /**
          * Focused date with indicator (will become selected date if user proceeds)
         */
        "activeDate"?: Date;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * CLDR locale data for translated calendar info
         */
        "localeData"?: DateLocaleData;
        /**
          * Specifies the latest allowed date (`"yyyy-mm-dd"`).
         */
        "max"?: Date;
        /**
          * Specifies the earliest allowed date (`"yyyy-mm-dd"`).
         */
        "min"?: Date;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Already selected date.
         */
        "selectedDate"?: Date;
    }
    interface CalciteDropdown {
        /**
          * When `true`, the component will remain open after a selection is made.  If the `selectionMode` of the selected `calcite-dropdown-item`'s containing `calcite-dropdown-group` is `"none"`, the component will always close.
         */
        "closeOnSelectDisabled"?: boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Defines the available placements that can be used when a flip occurs.
         */
        "flipPlacements"?: EffectivePlacement[];
        /**
          * Specifies the maximum number of `calcite-dropdown-item`s to display before showing a scroller. Value must be greater than `0`, and does not include `groupTitle`'s from `calcite-dropdown-group`.
         */
        "maxItems"?: number;
        /**
          * Fires when the component is requested to be closed and before the closing transition begins.
         */
        "onCalciteDropdownBeforeClose"?: (event: CalciteDropdownCustomEvent<void>) => void;
        /**
          * Fires when the component is added to the DOM but not rendered, and before the opening transition begins.
         */
        "onCalciteDropdownBeforeOpen"?: (event: CalciteDropdownCustomEvent<void>) => void;
        /**
          * Fires when the component is closed and animation is complete.
         */
        "onCalciteDropdownClose"?: (event: CalciteDropdownCustomEvent<void>) => void;
        /**
          * Fires when the component is open and animation is complete.
         */
        "onCalciteDropdownOpen"?: (event: CalciteDropdownCustomEvent<void>) => void;
        /**
          * Fires when a `calcite-dropdown-item`'s selection changes.
         */
        "onCalciteDropdownSelect"?: (event: CalciteDropdownCustomEvent<void>) => void;
        /**
          * When `true`, displays and positions the component.
         */
        "open"?: boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Determines where the component will be positioned relative to the container element.
          * @default "bottom-start"
         */
        "placement"?: MenuPlacement;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the component's selected items.
          * @readonly
         */
        "selectedItems"?: HTMLCalciteDropdownItemElement[];
        /**
          * Specifies the action to open the component from the container element.
         */
        "type"?: "hover" | "click";
        /**
          * Specifies the width of the component.
         */
        "width"?: Scale;
    }
    interface CalciteDropdownGroup {
        /**
          * Specifies and displays a group title.
         */
        "groupTitle"?: string;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the component's selection mode, where `"multiple"` allows any number of (or no) selected `calcite-dropdown-item`s, `"single"` allows and requires one selected `calcite-dropdown-item`, and `"none"` does not allow selection on `calcite-dropdown-item`s.
         */
        "selectionMode"?: Extract<"single" | "none" | "multiple", SelectionMode>;
    }
    interface CalciteDropdownItem {
        /**
          * Specifies the URL of the linked resource, which can be set as an absolute or relative path.  Determines if the component will render as an anchor.
         */
        "href"?: string;
        /**
          * Specifies an icon to display at the end of the component.
         */
        "iconEnd"?: string;
        /**
          * Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: FlipContext;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart"?: string;
        /**
          * Accessible name for the component.
         */
        "label"?: string;
        /**
          * Fires when the component is selected.
         */
        "onCalciteDropdownItemSelect"?: (event: CalciteDropdownItemCustomEvent<void>) => void;
        /**
          * Specifies the relationship to the linked document defined in `href`.
         */
        "rel"?: string;
        /**
          * When `true`, the component is selected.
         */
        "selected"?: boolean;
        /**
          * Specifies the frame or window to open the linked document.
         */
        "target"?: string;
    }
    interface CalciteFab {
        /**
          * Specifies the appearance style of the component.
         */
        "appearance"?: Extract<"solid" | "outline-fill", Appearance>;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Specifies an icon to display.
          * @default "plus"
         */
        "icon"?: string;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * Specifies the kind of the component (will apply to border and background).
         */
        "kind"?: Extract<"brand" | "danger" | "inverse" | "neutral", Kind>;
        /**
          * Accessible name for the component.
         */
        "label"?: string;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies text to accompany the component's icon.
         */
        "text"?: string;
        /**
          * When `true`, displays the `text` value in the component.
         */
        "textEnabled"?: boolean;
    }
    interface CalciteFilter {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * The component's resulting items after filtering.
          * @readonly
         */
        "filteredItems"?: object[];
        /**
          * Defines the items to filter. The component uses the values as the starting point, and returns items  that contain the string entered in the input, using a partial match and recursive search.  This property is needed to conduct filtering.
         */
        "items"?: object[];
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<FilterMessages>;
        /**
          * This event fires when the filter text changes.
         */
        "onCalciteFilterChange"?: (event: CalciteFilterCustomEvent<void>) => void;
        /**
          * Specifies placeholder text for the input element.
         */
        "placeholder"?: string;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * The component's value.
         */
        "value"?: string;
    }
    interface CalciteFlow {
    }
    interface CalciteFlowItem {
        /**
          * When provided, the method will be called before it is removed from its parent `calcite-flow`.
         */
        "beforeBack"?: () => Promise<void>;
        /**
          * When `true`, displays a close button in the trailing side of the component's header.
         */
        "closable"?: boolean;
        /**
          * When `true`, the component will be hidden.
         */
        "closed"?: boolean;
        /**
          * A description for the component.
         */
        "description"?: string;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * The component header text.
         */
        "heading"?: string;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading"?: boolean;
        /**
          * When `true`, the action menu items in the `header-menu-actions` slot are open.
         */
        "menuOpen"?: boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<FlowItemMessages>;
        /**
          * Fires when the back button is clicked.
         */
        "onCalciteFlowItemBack"?: (event: CalciteFlowItemCustomEvent<void>) => void;
        /**
          * Fires when the close button is clicked.
         */
        "onCalciteFlowItemClose"?: (event: CalciteFlowItemCustomEvent<void>) => void;
        /**
          * Fires when the content is scrolled.
         */
        "onCalciteFlowItemScroll"?: (event: CalciteFlowItemCustomEvent<void>) => void;
    }
    interface CalciteGraph {
        /**
          * Array of values describing a single color stop ([offset, color, opacity]) These color stops should be sorted by offset value
         */
        "colorStops"?: ColorStop[];
        /**
          * Array of tuples describing a single data point ([x, y]) These data points should be sorted by x-axis value
         */
        "data"?: DataSeries;
        /**
          * End of highlight color if highlighting range
         */
        "highlightMax"?: number;
        /**
          * Start of highlight color if highlighting range
         */
        "highlightMin"?: number;
        /**
          * Highest point of the range
         */
        "max": number;
        /**
          * Lowest point of the range
         */
        "min": number;
    }
    interface CalciteHandle {
        /**
          * Value for the button title attribute
         */
        "dragHandle"?: string;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<HandleMessages>;
        /**
          * Emitted when the handle is activated and the up or down arrow key is pressed.
         */
        "onCalciteHandleNudge"?: (event: CalciteHandleCustomEvent<HandleNudge>) => void;
    }
    interface CalciteIcon {
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "flipRtl"?: boolean;
        /**
          * Displays a specific icon.
          * @see [Icons](https://esri.github.io/calcite-ui-icons)
         */
        "icon"?: string;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Accessible name for the component.  It is recommended to set this value if your icon is semantic.
         */
        "textLabel"?: string;
    }
    interface CalciteInlineEditable {
        /**
          * Specifies a callback to be executed prior to disabling editing via the controls. When provided, the component's loading state will be handled automatically.
         */
        "afterConfirm"?: () => Promise<void>;
        /**
          * When `true` and `editingEnabled` is `true`, displays save and cancel controls on the component.
         */
        "controls"?: boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * When `true`, inline editing is enabled on the component.
         */
        "editingEnabled"?: boolean;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading"?: boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<InlineEditableMessages>;
        /**
          * Emits when the component's "cancel editing" button is pressed.
         */
        "onCalciteInlineEditableEditCancel"?: (event: CalciteInlineEditableCustomEvent<void>) => void;
        /**
          * Emits when the component's "confirm edits" button is pressed.
         */
        "onCalciteInlineEditableEditConfirm"?: (event: CalciteInlineEditableCustomEvent<void>) => void;
        /**
          * Specifies the size of the component. Defaults to the scale of the wrapped `calcite-input` or the scale of the closest wrapping component with a set scale.
         */
        "scale"?: Scale;
    }
    interface CalciteInput {
        /**
          * Specifies a comma separated list of unique file type specifiers for limiting accepted file types. This property only has an effect when `type` is "file". Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern)
         */
        "accept"?: string;
        /**
          * Specifies the text alignment of the component's value.
         */
        "alignment"?: Position;
        /**
          * Specifies the type of content to autocomplete, for use in forms. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
         */
        "autocomplete"?: string;
        /**
          * When `true`, the component is focused on page load. Only one element can contain `autofocus`. If multiple elements have `autofocus`, the first element will receive focus.
          * @mdn [autofocus](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus)
         */
        "autofocus"?: boolean;
        /**
          * When `true`, a clear button is displayed when the component has a value. The clear button shows by default for `"search"`, `"time"`, and `"date"` types, and will not display for the `"textarea"` type.
         */
        "clearable"?: boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
          * @mdn [disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)
         */
        "disabled"?: boolean;
        /**
          * Specifies the action label or icon for the Enter key on virtual keyboards. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint)
         */
        "enterKeyHint"?: string;
        /**
          * The ID of the form that will be associated with the component.  When not set, the component will be associated with its ancestor `<form>` element, if any.
         */
        "form"?: string;
        /**
          * When `true`, number values are displayed with a group separator corresponding to the language and country format.
         */
        "groupSeparator"?: boolean;
        /**
          * When `true`, the component will not be visible.
          * @mdn [hidden](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden)
         */
        "hidden"?: boolean;
        /**
          * When `true`, shows a default recommended icon. Alternatively, pass a Calcite UI Icon name to display a specific icon.
         */
        "icon"?: string | boolean;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * Specifies the type of content to help devices display an appropriate virtual keyboard. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode)
         */
        "inputMode"?: string;
        /**
          * Accessible name for the component.
         */
        "label"?: string;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading"?: boolean;
        /**
          * Specifies the maximum value for type "number".
          * @mdn [max](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max)
         */
        "max"?: number;
        /**
          * Specifies the maximum length of text for the component's value.
          * @mdn [maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength)
         */
        "maxLength"?: number;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<InputMessages>;
        /**
          * Specifies the minimum value for `type="number"`.
          * @mdn [min](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min)
         */
        "min"?: number;
        /**
          * Specifies the minimum length of text for the component's value.
          * @mdn [minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength)
         */
        "minLength"?: number;
        /**
          * When `true`, the component can accept more than one value. This property only has an effect when `type` is "email" or "file". Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/multiple)
         */
        "multiple"?: boolean;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
          * @mdn [name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name)
         */
        "name"?: string;
        /**
          * Specifies the placement of the buttons for `type="number"`.
         */
        "numberButtonType"?: InputPlacement;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * Fires each time a new `value` is typed and committed.
         */
        "onCalciteInputChange"?: (event: CalciteInputCustomEvent<void>) => void;
        /**
          * Fires each time a new `value` is typed.
         */
        "onCalciteInputInput"?: (event: CalciteInputCustomEvent<void>) => void;
        /**
          * Specifies a regex pattern the component's `value` must match for validation. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern)
         */
        "pattern"?: string;
        /**
          * Specifies placeholder text for the component.
          * @mdn [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder)
         */
        "placeholder"?: string;
        /**
          * Adds text to the start of the component.
         */
        "prefixText"?: string;
        /**
          * When `true`, the component's value can be read, but cannot be modified.
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly"?: boolean;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status"?: Status;
        /**
          * Specifies the granularity the component's `value` must adhere to.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/step)
         */
        "step"?: number | "any";
        /**
          * Adds text to the end of the component.
         */
        "suffixText"?: string;
        /**
          * Specifies the component type.  Note that the following `type`s add type-specific icons by default: `"date"`, `"email"`, `"password"`, `"search"`, `"tel"`, `"time"`.
         */
        "type"?: | "color"
    | "date"
    | "datetime-local"
    | "email"
    | "file"
    | "image"
    | "month"
    | "number"
    | "password"
    | "search"
    | "tel"
    | "text"
    | "textarea"
    | "time"
    | "url"
    | "week";
        /**
          * The component's value.
         */
        "value"?: string;
    }
    interface CalciteInputDatePicker {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Defines the available placements that can be used when a flip occurs.
         */
        "flipPlacements"?: EffectivePlacement[];
        /**
          * The ID of the form that will be associated with the component.  When not set, the component will be associated with its ancestor `<form>` element, if any.
         */
        "form"?: string;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * Defines the layout of the component.
         */
        "layout"?: "horizontal" | "vertical";
        /**
          * Specifies the latest allowed date ("yyyy-mm-dd").
         */
        "max"?: string;
        /**
          * Specifies the latest allowed date as a full date object.
         */
        "maxAsDate"?: Date;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<DatePickerMessages>;
        /**
          * Specifies the earliest allowed date ("yyyy-mm-dd").
         */
        "min"?: string;
        /**
          * Specifies the earliest allowed date as a full date object.
         */
        "minAsDate"?: Date;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name"?: string;
        /**
          * Specifies the Unicode numeral system used by the component for localization. This property cannot be dynamically changed.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * Fires when the component is requested to be closed and before the closing transition begins.
         */
        "onCalciteInputDatePickerBeforeClose"?: (event: CalciteInputDatePickerCustomEvent<void>) => void;
        /**
          * Fires when the component is added to the DOM but not rendered, and before the opening transition begins.
         */
        "onCalciteInputDatePickerBeforeOpen"?: (event: CalciteInputDatePickerCustomEvent<void>) => void;
        /**
          * Fires when the component's value changes.
         */
        "onCalciteInputDatePickerChange"?: (event: CalciteInputDatePickerCustomEvent<void>) => void;
        /**
          * Fires when the component is closed and animation is complete.
         */
        "onCalciteInputDatePickerClose"?: (event: CalciteInputDatePickerCustomEvent<void>) => void;
        /**
          * Fires when the component is open and animation is complete.
         */
        "onCalciteInputDatePickerOpen"?: (event: CalciteInputDatePickerCustomEvent<void>) => void;
        /**
          * When `true`, displays the `calcite-date-picker` component.
         */
        "open"?: boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Specifies the placement of the `calcite-date-picker` relative to the component.
          * @default "bottom-start"
         */
        "placement"?: MenuPlacement;
        /**
          * When `true`, disables the default behavior on the third click of narrowing or extending the range. Instead starts a new range.
         */
        "proximitySelectionDisabled"?: boolean;
        /**
          * When `true`, activates a range for the component.
         */
        "range"?: boolean;
        /**
          * When `true`, the component's value can be read, but controls are not accessible and the value cannot be modified.
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: "s" | "m" | "l";
        /**
          * Selected date as a string in ISO format (YYYY-MM-DD)
         */
        "value"?: string | string[];
        /**
          * The component's value as a full date object.
         */
        "valueAsDate"?: Date | Date[];
    }
    interface CalciteInputMessage {
        /**
          * Specifies an icon to display.
         */
        "icon"?: boolean | string;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status"?: Status;
    }
    interface CalciteInputNumber {
        /**
          * Specifies the text alignment of the component's value.
         */
        "alignment"?: Position;
        /**
          * Specifies the type of content to autocomplete, for use in forms. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
         */
        "autocomplete"?: string;
        /**
          * When `true`, the component is focused on page load. Only one element can contain `autofocus`. If multiple elements have `autofocus`, the first element will receive focus.
          * @mdn [autofocus](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus)
         */
        "autofocus"?: boolean;
        /**
          * When `true`, a clear button is displayed when the component has a value.
         */
        "clearable"?: boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
          * @mdn [disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)
         */
        "disabled"?: boolean;
        /**
          * Specifies the action label or icon for the Enter key on virtual keyboards. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint)
         */
        "enterKeyHint"?: string;
        /**
          * The ID of the form that will be associated with the component.  When not set, the component will be associated with its ancestor `<form>` element, if any.
         */
        "form"?: string;
        /**
          * When `true`, number values are displayed with a group separator corresponding to the language and country format.
         */
        "groupSeparator"?: boolean;
        /**
          * When `true`, the component will not be visible.
          * @mdn [hidden](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden)
         */
        "hidden"?: boolean;
        /**
          * Specifies an icon to display.
          * @futureBreaking Remove boolean type as it is not supported.
         */
        "icon"?: string | boolean;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * Specifies the type of content to help devices display an appropriate virtual keyboard. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode)
         */
        "inputMode"?: string;
        /**
          * Accessible name for the component's button or hyperlink.
         */
        "label"?: string;
        /**
          * When `true`, the component is in the loading state and `calcite-progress` is displayed.
         */
        "loading"?: boolean;
        /**
          * Specifies the maximum value.
          * @mdn [max](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max)
         */
        "max"?: number;
        /**
          * Specifies the maximum length of text for the component's value.
          * @mdn [maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength)
         */
        "maxLength"?: number;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<InputNumberMessages>;
        /**
          * Specifies the minimum value.
          * @mdn [min](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min)
         */
        "min"?: number;
        /**
          * Specifies the minimum length of text for the component's value.
          * @mdn [minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength)
         */
        "minLength"?: number;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
          * @mdn [name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name)
         */
        "name"?: string;
        /**
          * Specifies the placement of the buttons.
         */
        "numberButtonType"?: InputPlacement;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * Fires each time a new value is typed and committed.
         */
        "onCalciteInputNumberChange"?: (event: CalciteInputNumberCustomEvent<void>) => void;
        /**
          * Fires each time a new value is typed.
         */
        "onCalciteInputNumberInput"?: (event: CalciteInputNumberCustomEvent<void>) => void;
        /**
          * Specifies placeholder text for the component.
          * @mdn [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder)
         */
        "placeholder"?: string;
        /**
          * Adds text to the start of the component.
         */
        "prefixText"?: string;
        /**
          * When `true`, the component's value can be read, but cannot be modified.
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly"?: boolean;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status"?: Status;
        /**
          * Specifies the granularity that the component's value must adhere to.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/step)
         */
        "step"?: number | "any";
        /**
          * Adds text to the end of the component.
         */
        "suffixText"?: string;
        /**
          * The component's value.
         */
        "value"?: string;
    }
    interface CalciteInputText {
        /**
          * Specifies the text alignment of the component's value.
         */
        "alignment"?: Position;
        /**
          * Specifies the type of content to autocomplete, for use in forms. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
         */
        "autocomplete"?: string;
        /**
          * When `true`, the component is focused on page load. Only one element can contain `autofocus`. If multiple elements have `autofocus`, the first element will receive focus.
          * @mdn [autofocus](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus)
         */
        "autofocus"?: boolean;
        /**
          * When `true`, a clear button is displayed when the component has a value.
         */
        "clearable"?: boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
          * @mdn [disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)
         */
        "disabled"?: boolean;
        /**
          * Specifies the action label or icon for the Enter key on virtual keyboards. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint)
         */
        "enterKeyHint"?: string;
        /**
          * The ID of the form that will be associated with the component.  When not set, the component will be associated with its ancestor `<form>` element, if any.
         */
        "form"?: string;
        /**
          * When `true`, the component will not be visible.
          * @mdn [hidden](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden)
         */
        "hidden"?: boolean;
        /**
          * Specifies an icon to display.
          * @futureBreaking Remove boolean type as it is not supported.
         */
        "icon"?: string | boolean;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * Specifies the type of content to help devices display an appropriate virtual keyboard. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode)
         */
        "inputMode"?: string;
        /**
          * Accessible name for the component's button or hyperlink.
         */
        "label"?: string;
        /**
          * When `true`, the component is in the loading state and `calcite-progress` is displayed.
         */
        "loading"?: boolean;
        /**
          * Specifies the maximum length of text for the component's value.
          * @mdn [maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength)
         */
        "maxLength"?: number;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<InputTextMessages>;
        /**
          * Specifies the minimum length of text for the component's value.
          * @mdn [minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength)
         */
        "minLength"?: number;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
          * @mdn [name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name)
         */
        "name"?: string;
        /**
          * Fires each time a new value is typed and committed.
         */
        "onCalciteInputTextChange"?: (event: CalciteInputTextCustomEvent<void>) => void;
        /**
          * Fires each time a new value is typed.
         */
        "onCalciteInputTextInput"?: (event: CalciteInputTextCustomEvent<void>) => void;
        /**
          * Specifies a regex pattern the component's `value` must match for validation. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern)
         */
        "pattern"?: string;
        /**
          * Specifies placeholder text for the component.
          * @mdn [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder)
         */
        "placeholder"?: string;
        /**
          * Adds text to the start of the component.
         */
        "prefixText"?: string;
        /**
          * When `true`, the component's value can be read, but cannot be modified.
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly"?: boolean;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status"?: Status;
        /**
          * Adds text to the end of the component.
         */
        "suffixText"?: string;
        /**
          * The component's value.
         */
        "value"?: string;
    }
    interface CalciteInputTimePicker {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * The ID of the form that will be associated with the component.  When not set, the component will be associated with its ancestor `<form>` element, if any.
         */
        "form"?: string;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messagesOverrides"?: Partial<TimePickerMessages>;
        /**
          * Specifies the name of the component on form submission.
         */
        "name"?: string;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * Fires when the time value is changed as a result of user input.
         */
        "onCalciteInputTimePickerChange"?: (event: CalciteInputTimePickerCustomEvent<void>) => void;
        /**
          * When `true`, displays the `calcite-time-picker` component.
         */
        "open"?: boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Determines where the popover will be positioned relative to the input.
         */
        "placement"?: LogicalPlacement;
        /**
          * When `true`, the component's value can be read, but controls are not accessible and the value cannot be modified.
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the granularity the component's `value` must adhere to (in seconds).
         */
        "step"?: number;
        /**
          * The component's value in UTC (always 24-hour format).
         */
        "value"?: string;
    }
    interface CalciteLabel {
        /**
          * Specifies the text alignment of the component.
         */
        "alignment"?: Alignment;
        /**
          * Specifies the `id` of the component the label is bound to. Use when the component the label is bound to does not reside within the component.
         */
        "for"?: string;
        /**
          * Defines the layout of the label in relation to the component. Use `"inline"` positions to wrap the label and component on the same line.
         */
        "layout"?: "inline" | "inline-space-between" | "default";
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
    }
    interface CalciteLink {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Prompts the user to save the linked URL instead of navigating to it. Can be used with or without a value: Without a value, the browser will suggest a filename/extension See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-download.
         */
        "download"?: string | boolean;
        /**
          * Specifies the URL of the linked resource, which can be set as an absolute or relative path.
         */
        "href"?: string;
        /**
          * Specifies an icon to display at the end of the component.
         */
        "iconEnd"?: string;
        /**
          * Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: FlipContext;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart"?: string;
        /**
          * Specifies the relationship to the linked document defined in `href`.
         */
        "rel"?: string;
        /**
          * Specifies the frame or window to open the linked document.
         */
        "target"?: string;
    }
    /**
     * A general purpose list that enables users to construct list items that conform to Calcite styling.
     */
    interface CalciteList {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * When `true`, an input appears at the top of the component that can be used by end users to filter `calcite-list-item`s.
         */
        "filterEnabled"?: boolean;
        /**
          * Placeholder text for the component's filter input field.
         */
        "filterPlaceholder"?: string;
        /**
          * Text for the component's filter input field.
         */
        "filterText"?: string;
        /**
          * The currently filtered `calcite-list-item` data.
          * @readonly
         */
        "filteredData"?: ItemData;
        /**
          * The currently filtered `calcite-list-item`s.
          * @readonly
         */
        "filteredItems"?: HTMLCalciteListItemElement[];
        /**
          * Specifies an accessible name for the component.
         */
        "label"?: string;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading"?: boolean;
        /**
          * Emits when the component's filter has changed.
         */
        "onCalciteListFilter"?: (event: CalciteListCustomEvent<void>) => void;
        /**
          * The currently selected items.
          * @readonly
         */
        "selectedItems"?: HTMLCalciteListItemElement[];
        /**
          * Specifies the selection appearance - `"icon"` (displays a checkmark or dot) or `"border"` (displays a border).
         */
        "selectionAppearance"?: SelectionAppearance;
        /**
          * Specifies the selection mode - `"multiple"` (allow any number of selected items), `"single"` (allows and require one selected item), `"none"` (no selected items).
         */
        "selectionMode"?: Extract<"none" | "multiple" | "single", SelectionMode>;
    }
    interface CalciteListItem {
        /**
          * A description for the component. Displays below the label text.
         */
        "description"?: string;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * The label text of the component. Displays above the description text.
         */
        "label"?: string;
        /**
          * Provides additional metadata to the component. Primary use is for a filter on the parent `calcite-list`.
         */
        "metadata"?: Record<string, unknown>;
        /**
          * Emits when the item's content is selected.
         */
        "onCalciteListItemSelect"?: (event: CalciteListItemCustomEvent<void>) => void;
        /**
          * When `true`, the item is open to show child components.
         */
        "open"?: boolean;
        /**
          * When `true`, the component is selected.
         */
        "selected"?: boolean;
        /**
          * The component's value.
         */
        "value"?: any;
    }
    interface CalciteListItemGroup {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * The header text for all nested `calcite-list-item` rows.
         */
        "heading"?: string;
    }
    interface CalciteLoader {
        /**
          * When `true`, displays smaller and appears to the left of the text.
         */
        "inline"?: boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Text that displays under the component's indicator.
         */
        "text"?: string;
        /**
          * Specifies the component type.  Use `"indeterminate"` if finding actual progress value is impossible.
         */
        "type"?: "indeterminate" | "determinate";
        /**
          * The component's value. Valid only for `"determinate"` indicators. Percent complete of 100.
         */
        "value"?: number;
    }
    interface CalciteModal {
        /**
          * Passes a function to run before the component closes.
         */
        "beforeClose"?: (el: HTMLElement) => Promise<void>;
        /**
          * When `true`, disables the component's close button.
         */
        "closeButtonDisabled"?: boolean;
        /**
          * When `true`, prevents the component from expanding to the entire screen on mobile devices.
         */
        "docked"?: boolean;
        /**
          * When `true`, disables the default close on escape behavior.
         */
        "escapeDisabled"?: boolean;
        /**
          * When `true`, prevents focus trapping.
         */
        "focusTrapDisabled"?: boolean;
        /**
          * Sets the component to always be fullscreen (overrides `width` and `--calcite-modal-width` / `--calcite-modal-height`).
         */
        "fullscreen"?: boolean;
        /**
          * Specifies the kind of the component (will apply to top border).
         */
        "kind"?: Extract<"brand" | "danger" | "info" | "success" | "warning", Kind>;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<ModalMessages>;
        /**
          * Fires when the component is requested to be closed and before the closing transition begins.
         */
        "onCalciteModalBeforeClose"?: (event: CalciteModalCustomEvent<void>) => void;
        /**
          * Fires when the component is added to the DOM but not rendered, and before the opening transition begins.
         */
        "onCalciteModalBeforeOpen"?: (event: CalciteModalCustomEvent<void>) => void;
        /**
          * Fires when the component is closed and animation is complete.
         */
        "onCalciteModalClose"?: (event: CalciteModalCustomEvent<void>) => void;
        /**
          * Fires when the component is open and animation is complete.
         */
        "onCalciteModalOpen"?: (event: CalciteModalCustomEvent<void>) => void;
        /**
          * When `true`, displays and positions the component.
         */
        "open"?: boolean;
        /**
          * When `true`, disables the closing of the component when clicked outside.
         */
        "outsideCloseDisabled"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the width of the component.
         */
        "width"?: Scale;
    }
    interface CalciteNotice {
        /**
          * When `true`, a close button is added to the component.
         */
        "closable"?: boolean;
        /**
          * When `true`, shows a default recommended icon. Alternatively, pass a Calcite UI Icon name to display a specific icon.
         */
        "icon"?: string | boolean;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * Specifies the kind of the component (will apply to top border and icon).
         */
        "kind"?: Extract<
    "brand" | "danger" | "info" | "success" | "warning",
    Kind
  >;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<NoticeMessages>;
        /**
          * Fired when the component is closed.
         */
        "onCalciteNoticeClose"?: (event: CalciteNoticeCustomEvent<void>) => void;
        /**
          * Fired when the component is opened.
         */
        "onCalciteNoticeOpen"?: (event: CalciteNoticeCustomEvent<void>) => void;
        /**
          * When `true`, the component is visible.
         */
        "open"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the width of the component.
         */
        "width"?: Width;
    }
    interface CalciteOption {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Accessible name for the component.
         */
        "label"?: string;
        /**
          * When `true`, the component is selected.
         */
        "selected"?: boolean;
        /**
          * The component's value.
         */
        "value"?: any;
    }
    interface CalciteOptionGroup {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
    }
    interface CalcitePagination {
        /**
          * When `true`, number values are displayed with a group separator corresponding to the language and country format.
         */
        "groupSeparator"?: boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<PaginationMessages>;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * Emits when the selected page changes.
         */
        "onCalcitePaginationChange"?: (event: CalcitePaginationCustomEvent<void>) => void;
        /**
          * Specifies the number of items per page.
         */
        "pageSize"?: number;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the starting item number.
         */
        "startItem"?: number;
        /**
          * Specifies the total number of items.
         */
        "totalItems"?: number;
    }
    interface CalcitePanel {
        /**
          * When `true`, displays a close button in the trailing side of the header.
         */
        "closable"?: boolean;
        /**
          * When `true`, the component will be hidden.
         */
        "closed"?: boolean;
        /**
          * A description for the component.
         */
        "description"?: string;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * The component header text.
         */
        "heading"?: string;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading"?: boolean;
        /**
          * When `true`, the action menu items in the `header-menu-actions` slot are open.
         */
        "menuOpen"?: boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<PanelMessages>;
        /**
          * Fires when the close button is clicked.
         */
        "onCalcitePanelClose"?: (event: CalcitePanelCustomEvent<void>) => void;
        /**
          * Fires when the content is scrolled.
         */
        "onCalcitePanelScroll"?: (event: CalcitePanelCustomEvent<void>) => void;
    }
    /**
     * @deprecated Use the `list` component instead.
     */
    interface CalcitePickList {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * When `true`, an input appears at the top of the list that can be used by end users to filter items in the list.
         */
        "filterEnabled"?: boolean;
        /**
          * Placeholder text for the filter input field.
         */
        "filterPlaceholder"?: string;
        /**
          * Text for the filter input field.
         */
        "filterText"?: string;
        /**
          * The currently filtered data.
          * @readonly
         */
        "filteredData"?: ItemData1;
        /**
          * The currently filtered items.
          * @readonly
         */
        "filteredItems"?: HTMLCalcitePickListItemElement[];
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading"?: boolean;
        /**
          * Similar to standard radio buttons and checkboxes. When `true`, a user can select multiple `calcite-pick-list-item`s at a time. When `false`, only a single `calcite-pick-list-item` can be selected at a time, and a new selection will deselect previous selections.
         */
        "multiple"?: boolean;
        /**
          * Emits when any of the `calcite-pick-list-item` selections have changed.
         */
        "onCalciteListChange"?: (event: CalcitePickListCustomEvent<Map<string, HTMLCalcitePickListItemElement>>) => void;
        /**
          * Emits when a filter has changed.
         */
        "onCalciteListFilter"?: (event: CalcitePickListCustomEvent<void>) => void;
        /**
          * When `true` and single selection is enabled, the selection changes when navigating `calcite-pick-list-item`s via keyboard.
         */
        "selectionFollowsFocus"?: boolean;
    }
    /**
     * @deprecated Use the `list` component instead.
     */
    interface CalcitePickListGroup {
        /**
          * Specifies the title for all nested `calcite-pick-list-item`s.
         */
        "groupTitle"?: string;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel"?: HeadingLevel;
    }
    /**
     * @deprecated Use the `list` component instead.
     */
    interface CalcitePickListItem {
        /**
          * A description for the component that displays below the label text.
         */
        "description"?: string;
        /**
          * When `false`, the component cannot be deselected by user interaction.
         */
        "deselectDisabled"?: boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Determines the icon SVG symbol that will be shown. Options are `"circle"`, `"square"`, `"grip"` or `null`.
          * @see [ICON_TYPES](https://github.com/Esri/calcite-components/blob/master/src/components/pick-list/resources.ts#L5)
         */
        "icon"?: ICON_TYPES | null;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * Label and accessible name for the component. Appears next to the icon.
         */
        "label": string;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<PickListItemMessages>;
        /**
          * Provides additional metadata to the component. Primary use is for a filter on the parent list.
         */
        "metadata"?: Record<string, unknown>;
        /**
          * Fires when the component is selected or unselected.
         */
        "onCalciteListItemChange"?: (event: CalcitePickListItemCustomEvent<{
    item: HTMLCalcitePickListItemElement;
    value: any;
    selected: boolean;
    shiftPressed: boolean;
  }>) => void;
        /**
          * Fires when the remove button is pressed.
         */
        "onCalciteListItemRemove"?: (event: CalcitePickListItemCustomEvent<void>) => void;
        /**
          * When `true`, displays a remove action that removes the item from the list.
         */
        "removable"?: boolean;
        /**
          * When `true`, selects an item. Toggles when an item is checked/unchecked.
         */
        "selected"?: boolean;
        /**
          * The component's value.
         */
        "value": any;
    }
    interface CalcitePopover {
        /**
          * When `true`, clicking outside of the component automatically closes open `calcite-popover`s.
         */
        "autoClose"?: boolean;
        /**
          * When `true`, display a close button within the component.
         */
        "closable"?: boolean;
        /**
          * When `true`, prevents flipping the component's placement when overlapping its `referenceElement`.
         */
        "flipDisabled"?: boolean;
        /**
          * Defines the available placements that can be used when a flip occurs.
         */
        "flipPlacements"?: EffectivePlacement[];
        /**
          * When `true`, prevents focus trapping.
         */
        "focusTrapDisabled"?: boolean;
        /**
          * The component header text.
         */
        "heading"?: string;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<PopoverMessages>;
        /**
          * Offsets the position of the popover away from the `referenceElement`.
          * @default 6
         */
        "offsetDistance"?: number;
        /**
          * Offsets the position of the component along the `referenceElement`.
         */
        "offsetSkidding"?: number;
        /**
          * Fires when the component is requested to be closed and before the closing transition begins.
         */
        "onCalcitePopoverBeforeClose"?: (event: CalcitePopoverCustomEvent<void>) => void;
        /**
          * Fires when the component is added to the DOM but not rendered, and before the opening transition begins.
         */
        "onCalcitePopoverBeforeOpen"?: (event: CalcitePopoverCustomEvent<void>) => void;
        /**
          * Fires when the component is closed and animation is complete.
         */
        "onCalcitePopoverClose"?: (event: CalcitePopoverCustomEvent<void>) => void;
        /**
          * Fires when the component is open and animation is complete.
         */
        "onCalcitePopoverOpen"?: (event: CalcitePopoverCustomEvent<void>) => void;
        /**
          * When `true`, displays and positions the component.
         */
        "open"?: boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` value should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Determines where the component will be positioned relative to the `referenceElement`.
         */
        "placement"?: LogicalPlacement;
        /**
          * When `true`, removes the caret pointer.
         */
        "pointerDisabled"?: boolean;
        /**
          * The `referenceElement` used to position the component according to its `placement` value. Setting to an `HTMLElement` is preferred so the component does not need to query the DOM. However, a string `id` of the reference element can also be used.
         */
        "referenceElement": ReferenceElement | string;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * When `true`, disables automatically toggling the component when its `referenceElement` has been triggered.  This property can be set to `true` to manage when the component is open.
         */
        "triggerDisabled"?: boolean;
    }
    interface CalciteProgress {
        /**
          * Accessible name for the component.
         */
        "label"?: string;
        /**
          * When `true` and for `"indeterminate"` progress bars, reverses the animation direction.
         */
        "reversed"?: boolean;
        /**
          * Text that displays under the component's indicator.
         */
        "text"?: string;
        /**
          * Specifies the component type.  Use `"indeterminate"` if finding actual progress value is impossible.
         */
        "type"?: "indeterminate" | "determinate";
        /**
          * When `type` is `"determinate"`, the component's progress value with a range of 0.0 - 1.0.
         */
        "value"?: number;
    }
    interface CalciteRadioButton {
        /**
          * When `true`, the component is checked.
         */
        "checked"?: boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * The ID of the form that will be associated with the component.  When not set, the component will be associated with its ancestor `<form>` element, if any.
         */
        "form"?: string;
        /**
          * The `id` of the component. When omitted, a globally unique identifier is used.
         */
        "guid"?: string;
        /**
          * When `true`, the component is not displayed and is not focusable or checkable.
         */
        "hidden"?: boolean;
        /**
          * Specifies the name of the component. Can be inherited from `calcite-radio-button-group`.  Required to pass the component's `value` on form submission.
         */
        "name"?: string;
        /**
          * Fires only when the radio button is checked.  This behavior is identical to the native HTML input element. Since this event does not fire when the radio button is unchecked, it's not recommended to attach a listener for this event directly on the element, but instead either attach it to a node that contains all of the radio buttons in the group or use the `calciteRadioButtonGroupChange` event if using this with `calcite-radio-button-group`.
         */
        "onCalciteRadioButtonChange"?: (event: CalciteRadioButtonCustomEvent<void>) => void;
        /**
          * When `true`, the component must have a value selected from the `calcite-radio-button-group` in order for the form to submit.
         */
        "required"?: boolean;
        /**
          * Specifies the size of the component inherited from the `calcite-radio-button-group`.
         */
        "scale"?: Scale;
        /**
          * The component's value.
         */
        "value": any;
    }
    interface CalciteRadioButtonGroup {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * When `true`, the component is not displayed and its `calcite-radio-button`s are not focusable or checkable.
         */
        "hidden"?: boolean;
        /**
          * Defines the layout of the component.
         */
        "layout"?: Layout;
        /**
          * Specifies the name of the component on form submission. Must be unique to other component instances.
         */
        "name": string;
        /**
          * Fires when the component has changed.
         */
        "onCalciteRadioButtonGroupChange"?: (event: CalciteRadioButtonGroupCustomEvent<void>) => void;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the component's selected item.
          * @readonly
         */
        "selectedItem"?: HTMLCalciteRadioButtonElement;
    }
    interface CalciteRating {
        /**
          * Specifies a cumulative average from previous ratings to display.
         */
        "average"?: number;
        /**
          * Specifies the number of previous ratings to display.
         */
        "count"?: number;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * The ID of the form that will be associated with the component.  When not set, the component will be associated with its ancestor `<form>` element, if any.
         */
        "form"?: string;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<RatingMessages>;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name"?: string;
        /**
          * Fires when the component's value changes.
         */
        "onCalciteRatingChange"?: (event: CalciteRatingCustomEvent<void>) => void;
        /**
          * When `true`, the component's value can be read, but cannot be modified.
         */
        "readOnly"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * When `true`, and if available, displays the `average` and/or `count` data summary in a `calcite-chip`.
         */
        "showChip"?: boolean;
        /**
          * The component's value.
         */
        "value"?: number;
    }
    interface CalciteScrim {
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading"?: boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<ScrimMessages>;
    }
    interface CalciteSegmentedControl {
        /**
          * Specifies the appearance style of the component.
         */
        "appearance"?: Extract<"outline" | "outline-fill" | "solid", Appearance>;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * The ID of the form that will be associated with the component.  When not set, the component will be associated with its ancestor `<form>` element, if any.
         */
        "form"?: string;
        /**
          * Defines the layout of the component.
         */
        "layout"?: Layout;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name"?: string;
        /**
          * Fires when the `calcite-segmented-control-item` selection changes.
         */
        "onCalciteSegmentedControlChange"?: (event: CalciteSegmentedControlCustomEvent<void>) => void;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * The component's selected item `HTMLElement`.
          * @readonly
         */
        "selectedItem"?: HTMLCalciteSegmentedControlItemElement;
        /**
          * The component's `selectedItem` value.
         */
        "value"?: string;
        /**
          * Specifies the width of the component.
         */
        "width"?: Extract<"auto" | "full", Width>;
    }
    interface CalciteSegmentedControlItem {
        /**
          * When `true`, the component is checked.
         */
        "checked"?: boolean;
        /**
          * Specifies an icon to display at the end of the component.
         */
        "iconEnd"?: string;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart"?: string;
        /**
          * The component's value.
         */
        "value"?: any | null;
    }
    interface CalciteSelect {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * The ID of the form that will be associated with the component.  When not set, the component will be associated with its ancestor `<form>` element, if any.
         */
        "form"?: string;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name"?: string;
        /**
          * Fires when the `selectedOption` changes.
         */
        "onCalciteSelectChange"?: (event: CalciteSelectCustomEvent<void>) => void;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * The component's selected option `HTMLElement`.
          * @readonly
         */
        "selectedOption"?: HTMLCalciteOptionElement;
        /**
          * The component's `selectedOption` value.
         */
        "value"?: string;
        /**
          * Specifies the width of the component.
         */
        "width"?: Width;
    }
    interface CalciteShell {
        /**
          * Positions the center content behind any `calcite-shell-panel`s.
         */
        "contentBehind"?: boolean;
    }
    interface CalciteShellCenterRow {
        /**
          * When `true`, the content area displays like a floating panel.
         */
        "detached"?: boolean;
        /**
          * Specifies the maximum height of the component.
         */
        "heightScale"?: Scale;
        /**
          * Specifies the component's position. Will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "position"?: Position;
    }
    interface CalciteShellPanel {
        /**
          * When `true`, hides the component's content area.
         */
        "collapsed"?: boolean;
        /**
          * When `true`, the content area displays like a floating panel.
         */
        "detached"?: boolean;
        /**
          * When `detached`, specifies the maximum height of the component.
         */
        "detachedHeightScale"?: Scale;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<ShellPanelMessages>;
        /**
          * Specifies the component's position. Will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "position"?: Position;
        /**
          * When `true` and not `detached`, the component's content area is resizable.
         */
        "resizable"?: boolean;
        /**
          * Specifies the width of the component's content area.
         */
        "widthScale"?: Scale;
    }
    interface CalciteSlider {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * The ID of the form that will be associated with the component.  When not set, the component will be associated with its ancestor `<form>` element, if any.
         */
        "form"?: string;
        /**
          * When `true`, number values are displayed with a group separator corresponding to the language and country format.
         */
        "groupSeparator"?: boolean;
        /**
          * When `true`, indicates a histogram is present.
         */
        "hasHistogram"?: boolean;
        /**
          * A list of the histogram's x,y coordinates within the component's `min` and `max`. Displays above the component's track.
          * @see [DataSeries](https://github.com/Esri/calcite-components/blob/master/src/components/graph/interfaces.ts#L5)
         */
        "histogram"?: DataSeries;
        /**
          * A set of single color stops for a histogram, sorted by offset ascending.
         */
        "histogramStops"?: ColorStop[];
        /**
          * When `true`, displays label handles with their numeric value.
         */
        "labelHandles"?: boolean;
        /**
          * When `true` and `ticks` is specified, displays label tick marks with their numeric value.
         */
        "labelTicks"?: boolean;
        /**
          * The component's maximum selectable value.
         */
        "max"?: number;
        /**
          * For multiple selections, the accessible name for the second handle, such as `"Temperature, upper bound"`.
         */
        "maxLabel"?: string;
        /**
          * For multiple selections, the component's upper value.
         */
        "maxValue"?: number;
        /**
          * The component's minimum selectable value.
         */
        "min"?: number;
        /**
          * Accessible name for first (or only) handle, such as `"Temperature, lower bound"`.
         */
        "minLabel"?: string;
        /**
          * For multiple selections, the component's lower value.
         */
        "minValue"?: number;
        /**
          * When `true`, the slider will display values from high to low.  Note that this value will be ignored if the slider has an associated histogram.
         */
        "mirrored"?: boolean;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name"?: string;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * Fires when the thumb is released on the component.  **Note:** If you need to constantly listen to the drag event, use `calciteSliderInput` instead.
         */
        "onCalciteSliderChange"?: (event: CalciteSliderCustomEvent<void>) => void;
        /**
          * Fires on all updates to the component.  **Note:** Will be fired frequently during drag. If you are performing any expensive operations consider using a debounce or throttle to avoid locking up the main thread.
         */
        "onCalciteSliderInput"?: (event: CalciteSliderCustomEvent<void>) => void;
        /**
          * Specifies the interval to move with the page up, or page down keys.
         */
        "pageStep"?: number;
        /**
          * When `true`, sets a finer point for handles.
         */
        "precise"?: boolean;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * When `true`, enables snap selection in coordination with `step` via a mouse.
         */
        "snap"?: boolean;
        /**
          * Specifies the interval to move with the up, or down keys.
         */
        "step"?: number;
        /**
          * Displays tick marks on the number line at a specified interval.
         */
        "ticks"?: number;
        /**
          * The component's value.
         */
        "value"?: null | number | number[];
    }
    interface CalciteSortableList {
        /**
          * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.
         */
        "disabled"?: boolean;
        /**
          * Specifies which items inside the element should be draggable.
         */
        "dragSelector"?: string;
        /**
          * The list's group identifier.  To drag elements from one list into another, both lists must have the same group value.
         */
        "group"?: string;
        /**
          * The selector for the handle elements.
         */
        "handleSelector"?: string;
        /**
          * Indicates the horizontal or vertical orientation of the component.
         */
        "layout"?: Layout;
        /**
          * When true, content is waiting to be loaded. This state shows a busy indicator.
         */
        "loading"?: boolean;
        /**
          * Emitted when the order of the list has changed.
         */
        "onCalciteListOrderChange"?: (event: CalciteSortableListCustomEvent<void>) => void;
    }
    interface CalciteSplitButton {
        /**
          * Specifies the appearance style of the component.
         */
        "appearance"?: Extract<
    "outline" | "outline-fill" | "solid" | "transparent",
    Appearance
  >;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Specifies the icon used for the dropdown menu.
         */
        "dropdownIconType"?: DropdownIconType;
        /**
          * Accessible name for the dropdown menu.
         */
        "dropdownLabel"?: string;
        /**
          * Specifies the kind of the component (will apply to border and background if applicable).
         */
        "kind"?: Extract<"brand" | "danger" | "inverse" | "neutral", Kind>;
        /**
          * When `true`, a busy indicator is displayed on the primary button.
         */
        "loading"?: boolean;
        /**
          * Fires when the primary button is clicked.
         */
        "onCalciteSplitButtonPrimaryClick"?: (event: CalciteSplitButtonCustomEvent<void>) => void;
        /**
          * Fires when the dropdown menu is clicked.
         */
        "onCalciteSplitButtonSecondaryClick"?: (event: CalciteSplitButtonCustomEvent<void>) => void;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Specifies an icon to display at the end of the primary button.
         */
        "primaryIconEnd"?: string;
        /**
          * Displays the `primaryIconStart` and/or `primaryIconEnd` as flipped when the element direction is right-to-left (`"rtl"`).
         */
        "primaryIconFlipRtl"?: FlipContext;
        /**
          * Specifies an icon to display at the start of the primary button.
         */
        "primaryIconStart"?: string;
        /**
          * Accessible name for the primary button.
         */
        "primaryLabel"?: string;
        /**
          * Text displayed in the primary button.
         */
        "primaryText"?: string;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the width of the component.
         */
        "width"?: Width;
    }
    interface CalciteStepper {
        /**
          * When `true`, displays a status icon in the `calcite-stepper-item` heading.
         */
        "icon"?: boolean;
        /**
          * Defines the layout of the component.
         */
        "layout"?: Extract<"horizontal" | "vertical", Layout>;
        /**
          * When `true`, displays the step number in the `calcite-stepper-item` heading.
         */
        "numbered"?: boolean;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * Fires when the active `calcite-stepper-item` changes.
         */
        "onCalciteStepperItemChange"?: (event: CalciteStepperCustomEvent<void>) => void;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the component's selected item.
          * @readonly
         */
        "selectedItem"?: HTMLCalciteStepperItemElement;
    }
    interface CalciteStepperItem {
        /**
          * When `true`, the step has been completed.
         */
        "complete"?: boolean;
        /**
          * A description for the component. Displays below the header text.
         */
        "description"?: string;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * When `true`, the component contains an error that requires resolution from the user.
         */
        "error"?: boolean;
        /**
          * The component header text.
         */
        "heading"?: string;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * When `true`, the component is selected.
         */
        "selected"?: boolean;
    }
    interface CalciteSwitch {
        /**
          * When `true`, the component is checked.
         */
        "checked"?: boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * The ID of the form that will be associated with the component.  When not set, the component will be associated with its ancestor `<form>` element, if any.
         */
        "form"?: string;
        /**
          * Accessible name for the component.
         */
        "label"?: string;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name"?: string;
        /**
          * Fires when the `checked` value has changed.
         */
        "onCalciteSwitchChange"?: (event: CalciteSwitchCustomEvent<void>) => void;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * The component's value.
         */
        "value"?: any;
    }
    interface CalciteTab {
        /**
          * When `true`, the component's contents are selected.  Only one tab can be selected within the `calcite-tabs` parent.
         */
        "selected"?: boolean;
        /**
          * Specifies a unique name for the component.  When specified, use the same value on the `calcite-tab-title`.
         */
        "tab"?: string;
    }
    interface CalciteTabNav {
        /**
          * Emits when the selected `calcite-tab` changes.
         */
        "onCalciteTabChange"?: (event: CalciteTabNavCustomEvent<void>) => void;
        /**
          * Specifies the component's selected tab-title.
          * @readonly
         */
        "selectedTitle"?: HTMLCalciteTabTitleElement;
        /**
          * Specifies the name when saving selected `calcite-tab` data to `localStorage`.
         */
        "storageId"?: string;
        /**
          * Specifies text to update multiple components to keep in sync if one changes.
         */
        "syncId"?: string;
    }
    interface CalciteTabTitle {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Specifies an icon to display at the end of the component.
         */
        "iconEnd"?: string;
        /**
          * Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: FlipContext;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart"?: string;
        /**
          * Fires when a `calcite-tab` is selected.
         */
        "onCalciteTabsActivate"?: (event: CalciteTabTitleCustomEvent<void>) => void;
        /**
          * When `true`, the component and its respective `calcite-tab` contents are selected.  Only one tab can be selected within the `calcite-tabs` parent.
         */
        "selected"?: boolean;
        /**
          * Specifies a unique name for the component.  When specified, use the same value on the `calcite-tab`.
         */
        "tab"?: string;
    }
    interface CalciteTabs {
        /**
          * When `true`, the component will display with a folder style menu.
         */
        "bordered"?: boolean;
        /**
          * Specifies the layout of the `calcite-tab-nav`, justifying the `calcite-tab-title`s to the start (`"inline"`), or across and centered (`"center"`).
         */
        "layout"?: TabLayout;
        /**
          * Specifies the position of the component in relation to the `calcite-tab`s.
         */
        "position"?: TabPosition;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
    }
    interface CalciteTextArea {
        /**
          * When `true`, the component is focused on page load. Only one element can contain `autofocus`. If multiple elements have `autofocus`, the first element will receive focus.
          * @mdn [autofocus](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus)
         */
        "autofocus"?: boolean;
        /**
          * Specifies the component's number of columns.
          * @mdn [cols](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-cols)
         */
        "columns"?: number;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
          * @mdn [disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)
         */
        "disabled"?: boolean;
        /**
          * The ID of the form that will be associated with the component.  When not set, the component will be associated with its ancestor `<form>` element, if any.
         */
        "form"?: string;
        /**
          * When `true`, number values are displayed with a group separator corresponding to the language and country format.
         */
        "groupSeparator"?: boolean;
        /**
          * Accessible name for the component.
         */
        "label"?: string;
        /**
          * Specifies the maximum number of characters allowed.
          * @mdn [maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-maxlength)
         */
        "maxLength"?: number;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<TextAreaMessages>;
        /**
          * Specifies the name of the component.
          * @mdn [name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-name)
         */
        "name"?: string;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * Fires each time a new `value` is typed and committed.
         */
        "onCalciteTextAreaChange"?: (event: CalciteTextAreaCustomEvent<void>) => void;
        /**
          * Fires each time a new `value` is typed.
         */
        "onCalciteTextAreaInput"?: (event: CalciteTextAreaCustomEvent<void>) => void;
        /**
          * Specifies the placeholder text for the component.
          * @mdn [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-placeholder)
         */
        "placeholder"?: string;
        /**
          * When `true`, the component's `value` can be read, but cannot be modified.
          * @readonly 
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly"?: boolean;
        /**
          * When `true`, the component must have a value in order for the form to submit.
          * @mdn [required]https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/required
         */
        "required"?: boolean;
        /**
          * Specifies if the component is resizable.
         */
        "resize"?: "both" | "horizontal" | "vertical" | "none";
        /**
          * Specifies the component's number of rows.
          * @mdn [rows](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-rows)
         */
        "rows"?: number;
        /**
          * Specifies the size of the component.
         */
        "scale"?: "l" | "m" | "s";
        /**
          * The component's value.
         */
        "value"?: string;
        /**
          * Specifies the wrapping mechanism for the text.
          * @mdn [wrap](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-wrap)
         */
        "wrap"?: "soft" | "hard";
    }
    interface CalciteTile {
        /**
          * When `true`, the component is active.
         */
        "active"?: boolean;
        /**
          * A description for the component, which displays below the heading.
         */
        "description"?: string;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * The component's embed mode.  When `true`, renders without a border and padding for use by other components.
         */
        "embed"?: boolean;
        /**
          * The component header text, which displays between the icon and description.
         */
        "heading"?: string;
        /**
          * When `true`, the component is not displayed and is not focusable.
         */
        "hidden"?: boolean;
        /**
          * When embed is `"false"`, the URL for the component.
         */
        "href"?: string;
        /**
          * Specifies an icon to display.
         */
        "icon"?: string;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
    }
    interface CalciteTileSelect {
        /**
          * When `true`, the component is checked.
         */
        "checked"?: boolean;
        /**
          * A description for the component, which displays below the heading.
         */
        "description"?: string;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * The component header text, which displays between the icon and description.
         */
        "heading"?: string;
        /**
          * When `true`, the component is not displayed and is not focusable or checkable.
         */
        "hidden"?: boolean;
        /**
          * Specifies an icon to display.
         */
        "icon"?: string;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * When `inputEnabled` is `true`, specifies the placement of the interactive input on the component.
         */
        "inputAlignment"?: Extract<"end" | "start", Alignment>;
        /**
          * When `true`, displays an interactive input based on the `type` property.
         */
        "inputEnabled"?: boolean;
        /**
          * Specifies the name of the component on form submission.
         */
        "name"?: any;
        /**
          * Emits a custom change event.  For checkboxes it emits when checked or unchecked.  For radios it only emits when checked.
         */
        "onCalciteTileSelectChange"?: (event: CalciteTileSelectCustomEvent<void>) => void;
        /**
          * The selection mode of the component.  Use radio for single selection, and checkbox for multiple selections.
         */
        "type"?: TileSelectType;
        /**
          * The component's value.
         */
        "value"?: any;
        /**
          * Specifies the width of the component.
         */
        "width"?: Extract<"auto" | "full", Width>;
    }
    interface CalciteTileSelectGroup {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Defines the layout of the component.  Use `"horizontal"` for rows, and `"vertical"` for a single column.
         */
        "layout"?: TileSelectGroupLayout;
    }
    interface CalciteTimePicker {
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<TimePickerMessages>;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the granularity the `value` must adhere to (in seconds).
         */
        "step"?: number;
        /**
          * The component's value in UTC (always 24-hour format).
         */
        "value"?: string;
    }
    interface CalciteTip {
        /**
          * When `true`, the close button is not present on the component.
         */
        "closeDisabled"?: boolean;
        /**
          * When `true`, the component does not display.
         */
        "closed"?: boolean;
        /**
          * The component header text.
         */
        "heading"?: string;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<TipMessages>;
        /**
          * Emits when the component has been closed.
         */
        "onCalciteTipDismiss"?: (event: CalciteTipCustomEvent<void>) => void;
        /**
          * When `true`, the component is selected if it has a parent `calcite-tip-manager`.  Only one tip can be selected within the `calcite-tip-manager` parent.
         */
        "selected"?: boolean;
    }
    interface CalciteTipGroup {
        /**
          * The component header text for all nested `calcite-tip`s.
         */
        "groupTitle"?: string;
    }
    interface CalciteTipManager {
        /**
          * When `true`, does not display or position the component.
         */
        "closed"?: boolean;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<TipManagerMessages>;
        /**
          * Emits when the component has been closed.
         */
        "onCalciteTipManagerClose"?: (event: CalciteTipManagerCustomEvent<void>) => void;
    }
    interface CalciteTooltip {
        /**
          * Closes the component when the `referenceElement` is clicked.
         */
        "closeOnClick"?: boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Offset the position of the component away from the `referenceElement`.
          * @default 6
         */
        "offsetDistance"?: number;
        /**
          * Offset the position of the component along the `referenceElement`.
         */
        "offsetSkidding"?: number;
        /**
          * Fires when the component is requested to be closed and before the closing transition begins.
         */
        "onCalciteTooltipBeforeClose"?: (event: CalciteTooltipCustomEvent<void>) => void;
        /**
          * Fires when the component is added to the DOM but not rendered, and before the opening transition begins.
         */
        "onCalciteTooltipBeforeOpen"?: (event: CalciteTooltipCustomEvent<void>) => void;
        /**
          * Fires when the component is closed and animation is complete.
         */
        "onCalciteTooltipClose"?: (event: CalciteTooltipCustomEvent<void>) => void;
        /**
          * Fires when the component is open and animation is complete.
         */
        "onCalciteTooltipOpen"?: (event: CalciteTooltipCustomEvent<void>) => void;
        /**
          * When `true`, the component is open.
         */
        "open"?: boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  The `"fixed"` value should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Determines where the component will be positioned relative to the `referenceElement`.
         */
        "placement"?: LogicalPlacement;
        /**
          * The `referenceElement` to position the component according to its `"placement"` value.  Setting to the `HTMLElement` is preferred so the component does not need to query the DOM for the `referenceElement`.  However, a string ID of the reference element can be used.
         */
        "referenceElement"?: ReferenceElement | string;
    }
    interface CalciteTree {
        /**
          * Displays indentation guide lines.
         */
        "lines"?: boolean;
        /**
          * Fires when the user selects/deselects `calcite-tree-items`.
         */
        "onCalciteTreeSelect"?: (event: CalciteTreeCustomEvent<void>) => void;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the component's selected items.
          * @readonly
         */
        "selectedItems"?: HTMLCalciteTreeItemElement[];
        /**
          * Customize how the component's selection works.
          * @default "single"
         */
        "selectionMode"?: SelectionMode;
    }
    interface CalciteTreeItem {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * When `true`, the component is expanded.
         */
        "expanded"?: boolean;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: FlipContext;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart"?: string;
        /**
          * When `true`, the component is selected.
         */
        "selected"?: boolean;
    }
    /**
     * @deprecated Use the `list` component instead.
     */
    interface CalciteValueList {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * When `true`, `calcite-value-list-item`s are sortable via a draggable button.
         */
        "dragEnabled"?: boolean;
        /**
          * When `true`, an input appears at the top of the component that can be used by end users to filter list items.
         */
        "filterEnabled"?: boolean;
        /**
          * Placeholder text for the filter's input field.
         */
        "filterPlaceholder"?: string;
        /**
          * Text for the filter input field.
         */
        "filterText"?: string;
        /**
          * The currently filtered data.
          * @readonly
         */
        "filteredData"?: ItemData1;
        /**
          * The currently filtered items.
          * @readonly
         */
        "filteredItems"?: HTMLCalciteValueListItemElement[];
        /**
          * The component's group identifier.  To drag elements from one list into another, both lists must have the same group value.
         */
        "group"?: string;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading"?: boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<ValueListMessages>;
        /**
          * Similar to standard radio buttons and checkboxes. When `true`, a user can select multiple `calcite-value-list-item`s at a time. When `false`, only a single `calcite-value-list-item` can be selected at a time, and a new selection will deselect previous selections.
         */
        "multiple"?: boolean;
        /**
          * Emits when any of the list item selections have changed.
         */
        "onCalciteListChange"?: (event: CalciteValueListCustomEvent<Map<string, HTMLCalciteValueListItemElement>>) => void;
        /**
          * Emits when a filter has changed.
         */
        "onCalciteListFilter"?: (event: CalciteValueListCustomEvent<void>) => void;
        /**
          * Emits when the order of the list has changed.
         */
        "onCalciteListOrderChange"?: (event: CalciteValueListCustomEvent<any[]>) => void;
        /**
          * When `true` and single-selection is enabled, the selection changes when navigating `calcite-value-list-item`s via keyboard.
         */
        "selectionFollowsFocus"?: boolean;
    }
    /**
     * @deprecated Use the `list` component instead.
     */
    interface CalciteValueListItem {
        /**
          * A description for the component that displays below the label text.
         */
        "description"?: string;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Determines the icon SVG symbol that will be shown. Options are circle, square, grip or null.
          * @see [ICON_TYPES](https://github.com/Esri/calcite-components/blob/master/src/components/pick-list/resources.ts#L5)
         */
        "icon"?: ICON_TYPES | null;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * Label and accessible name for the component. Appears next to the icon.
         */
        "label": string;
        /**
          * Provides additional metadata to the component. Primary use is for a filter on the parent list.
         */
        "metadata"?: Record<string, unknown>;
        /**
          * When `true`, prevents the content of the component from user interaction.
         */
        "nonInteractive"?: boolean;
        /**
          * Fires when the remove button is pressed.
         */
        "onCalciteListItemRemove"?: (event: CalciteValueListItemCustomEvent<void>) => void;
        /**
          * When `true`, adds an action to remove the component.
         */
        "removable"?: boolean;
        /**
          * When `true`, the component is selected.
         */
        "selected"?: boolean;
        /**
          * The component's value.
         */
        "value": any;
    }
    interface IntrinsicElements {
        "calcite-accordion": CalciteAccordion;
        "calcite-accordion-item": CalciteAccordionItem;
        "calcite-action": CalciteAction;
        "calcite-action-bar": CalciteActionBar;
        "calcite-action-group": CalciteActionGroup;
        "calcite-action-menu": CalciteActionMenu;
        "calcite-action-pad": CalciteActionPad;
        "calcite-alert": CalciteAlert;
        "calcite-avatar": CalciteAvatar;
        "calcite-block": CalciteBlock;
        "calcite-block-section": CalciteBlockSection;
        "calcite-button": CalciteButton;
        "calcite-card": CalciteCard;
        "calcite-checkbox": CalciteCheckbox;
        "calcite-chip": CalciteChip;
        "calcite-color-picker": CalciteColorPicker;
        "calcite-color-picker-hex-input": CalciteColorPickerHexInput;
        "calcite-color-picker-swatch": CalciteColorPickerSwatch;
        "calcite-combobox": CalciteCombobox;
        "calcite-combobox-item": CalciteComboboxItem;
        "calcite-combobox-item-group": CalciteComboboxItemGroup;
        "calcite-date-picker": CalciteDatePicker;
        "calcite-date-picker-day": CalciteDatePickerDay;
        "calcite-date-picker-month": CalciteDatePickerMonth;
        "calcite-date-picker-month-header": CalciteDatePickerMonthHeader;
        "calcite-dropdown": CalciteDropdown;
        "calcite-dropdown-group": CalciteDropdownGroup;
        "calcite-dropdown-item": CalciteDropdownItem;
        "calcite-fab": CalciteFab;
        "calcite-filter": CalciteFilter;
        "calcite-flow": CalciteFlow;
        "calcite-flow-item": CalciteFlowItem;
        "calcite-graph": CalciteGraph;
        "calcite-handle": CalciteHandle;
        "calcite-icon": CalciteIcon;
        "calcite-inline-editable": CalciteInlineEditable;
        "calcite-input": CalciteInput;
        "calcite-input-date-picker": CalciteInputDatePicker;
        "calcite-input-message": CalciteInputMessage;
        "calcite-input-number": CalciteInputNumber;
        "calcite-input-text": CalciteInputText;
        "calcite-input-time-picker": CalciteInputTimePicker;
        "calcite-label": CalciteLabel;
        "calcite-link": CalciteLink;
        "calcite-list": CalciteList;
        "calcite-list-item": CalciteListItem;
        "calcite-list-item-group": CalciteListItemGroup;
        "calcite-loader": CalciteLoader;
        "calcite-modal": CalciteModal;
        "calcite-notice": CalciteNotice;
        "calcite-option": CalciteOption;
        "calcite-option-group": CalciteOptionGroup;
        "calcite-pagination": CalcitePagination;
        "calcite-panel": CalcitePanel;
        "calcite-pick-list": CalcitePickList;
        "calcite-pick-list-group": CalcitePickListGroup;
        "calcite-pick-list-item": CalcitePickListItem;
        "calcite-popover": CalcitePopover;
        "calcite-progress": CalciteProgress;
        "calcite-radio-button": CalciteRadioButton;
        "calcite-radio-button-group": CalciteRadioButtonGroup;
        "calcite-rating": CalciteRating;
        "calcite-scrim": CalciteScrim;
        "calcite-segmented-control": CalciteSegmentedControl;
        "calcite-segmented-control-item": CalciteSegmentedControlItem;
        "calcite-select": CalciteSelect;
        "calcite-shell": CalciteShell;
        "calcite-shell-center-row": CalciteShellCenterRow;
        "calcite-shell-panel": CalciteShellPanel;
        "calcite-slider": CalciteSlider;
        "calcite-sortable-list": CalciteSortableList;
        "calcite-split-button": CalciteSplitButton;
        "calcite-stepper": CalciteStepper;
        "calcite-stepper-item": CalciteStepperItem;
        "calcite-switch": CalciteSwitch;
        "calcite-tab": CalciteTab;
        "calcite-tab-nav": CalciteTabNav;
        "calcite-tab-title": CalciteTabTitle;
        "calcite-tabs": CalciteTabs;
        "calcite-text-area": CalciteTextArea;
        "calcite-tile": CalciteTile;
        "calcite-tile-select": CalciteTileSelect;
        "calcite-tile-select-group": CalciteTileSelectGroup;
        "calcite-time-picker": CalciteTimePicker;
        "calcite-tip": CalciteTip;
        "calcite-tip-group": CalciteTipGroup;
        "calcite-tip-manager": CalciteTipManager;
        "calcite-tooltip": CalciteTooltip;
        "calcite-tree": CalciteTree;
        "calcite-tree-item": CalciteTreeItem;
        "calcite-value-list": CalciteValueList;
        "calcite-value-list-item": CalciteValueListItem;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "calcite-accordion": LocalJSX.CalciteAccordion & JSXBase.HTMLAttributes<HTMLCalciteAccordionElement>;
            "calcite-accordion-item": LocalJSX.CalciteAccordionItem & JSXBase.HTMLAttributes<HTMLCalciteAccordionItemElement>;
            "calcite-action": LocalJSX.CalciteAction & JSXBase.HTMLAttributes<HTMLCalciteActionElement>;
            "calcite-action-bar": LocalJSX.CalciteActionBar & JSXBase.HTMLAttributes<HTMLCalciteActionBarElement>;
            "calcite-action-group": LocalJSX.CalciteActionGroup & JSXBase.HTMLAttributes<HTMLCalciteActionGroupElement>;
            "calcite-action-menu": LocalJSX.CalciteActionMenu & JSXBase.HTMLAttributes<HTMLCalciteActionMenuElement>;
            "calcite-action-pad": LocalJSX.CalciteActionPad & JSXBase.HTMLAttributes<HTMLCalciteActionPadElement>;
            "calcite-alert": LocalJSX.CalciteAlert & JSXBase.HTMLAttributes<HTMLCalciteAlertElement>;
            "calcite-avatar": LocalJSX.CalciteAvatar & JSXBase.HTMLAttributes<HTMLCalciteAvatarElement>;
            "calcite-block": LocalJSX.CalciteBlock & JSXBase.HTMLAttributes<HTMLCalciteBlockElement>;
            "calcite-block-section": LocalJSX.CalciteBlockSection & JSXBase.HTMLAttributes<HTMLCalciteBlockSectionElement>;
            "calcite-button": LocalJSX.CalciteButton & JSXBase.HTMLAttributes<HTMLCalciteButtonElement>;
            "calcite-card": LocalJSX.CalciteCard & JSXBase.HTMLAttributes<HTMLCalciteCardElement>;
            "calcite-checkbox": LocalJSX.CalciteCheckbox & JSXBase.HTMLAttributes<HTMLCalciteCheckboxElement>;
            "calcite-chip": LocalJSX.CalciteChip & JSXBase.HTMLAttributes<HTMLCalciteChipElement>;
            "calcite-color-picker": LocalJSX.CalciteColorPicker & JSXBase.HTMLAttributes<HTMLCalciteColorPickerElement>;
            "calcite-color-picker-hex-input": LocalJSX.CalciteColorPickerHexInput & JSXBase.HTMLAttributes<HTMLCalciteColorPickerHexInputElement>;
            "calcite-color-picker-swatch": LocalJSX.CalciteColorPickerSwatch & JSXBase.HTMLAttributes<HTMLCalciteColorPickerSwatchElement>;
            "calcite-combobox": LocalJSX.CalciteCombobox & JSXBase.HTMLAttributes<HTMLCalciteComboboxElement>;
            "calcite-combobox-item": LocalJSX.CalciteComboboxItem & JSXBase.HTMLAttributes<HTMLCalciteComboboxItemElement>;
            "calcite-combobox-item-group": LocalJSX.CalciteComboboxItemGroup & JSXBase.HTMLAttributes<HTMLCalciteComboboxItemGroupElement>;
            "calcite-date-picker": LocalJSX.CalciteDatePicker & JSXBase.HTMLAttributes<HTMLCalciteDatePickerElement>;
            "calcite-date-picker-day": LocalJSX.CalciteDatePickerDay & JSXBase.HTMLAttributes<HTMLCalciteDatePickerDayElement>;
            "calcite-date-picker-month": LocalJSX.CalciteDatePickerMonth & JSXBase.HTMLAttributes<HTMLCalciteDatePickerMonthElement>;
            "calcite-date-picker-month-header": LocalJSX.CalciteDatePickerMonthHeader & JSXBase.HTMLAttributes<HTMLCalciteDatePickerMonthHeaderElement>;
            "calcite-dropdown": LocalJSX.CalciteDropdown & JSXBase.HTMLAttributes<HTMLCalciteDropdownElement>;
            "calcite-dropdown-group": LocalJSX.CalciteDropdownGroup & JSXBase.HTMLAttributes<HTMLCalciteDropdownGroupElement>;
            "calcite-dropdown-item": LocalJSX.CalciteDropdownItem & JSXBase.HTMLAttributes<HTMLCalciteDropdownItemElement>;
            "calcite-fab": LocalJSX.CalciteFab & JSXBase.HTMLAttributes<HTMLCalciteFabElement>;
            "calcite-filter": LocalJSX.CalciteFilter & JSXBase.HTMLAttributes<HTMLCalciteFilterElement>;
            "calcite-flow": LocalJSX.CalciteFlow & JSXBase.HTMLAttributes<HTMLCalciteFlowElement>;
            "calcite-flow-item": LocalJSX.CalciteFlowItem & JSXBase.HTMLAttributes<HTMLCalciteFlowItemElement>;
            "calcite-graph": LocalJSX.CalciteGraph & JSXBase.HTMLAttributes<HTMLCalciteGraphElement>;
            "calcite-handle": LocalJSX.CalciteHandle & JSXBase.HTMLAttributes<HTMLCalciteHandleElement>;
            "calcite-icon": LocalJSX.CalciteIcon & JSXBase.HTMLAttributes<HTMLCalciteIconElement>;
            "calcite-inline-editable": LocalJSX.CalciteInlineEditable & JSXBase.HTMLAttributes<HTMLCalciteInlineEditableElement>;
            "calcite-input": LocalJSX.CalciteInput & JSXBase.HTMLAttributes<HTMLCalciteInputElement>;
            "calcite-input-date-picker": LocalJSX.CalciteInputDatePicker & JSXBase.HTMLAttributes<HTMLCalciteInputDatePickerElement>;
            "calcite-input-message": LocalJSX.CalciteInputMessage & JSXBase.HTMLAttributes<HTMLCalciteInputMessageElement>;
            "calcite-input-number": LocalJSX.CalciteInputNumber & JSXBase.HTMLAttributes<HTMLCalciteInputNumberElement>;
            "calcite-input-text": LocalJSX.CalciteInputText & JSXBase.HTMLAttributes<HTMLCalciteInputTextElement>;
            "calcite-input-time-picker": LocalJSX.CalciteInputTimePicker & JSXBase.HTMLAttributes<HTMLCalciteInputTimePickerElement>;
            "calcite-label": LocalJSX.CalciteLabel & JSXBase.HTMLAttributes<HTMLCalciteLabelElement>;
            "calcite-link": LocalJSX.CalciteLink & JSXBase.HTMLAttributes<HTMLCalciteLinkElement>;
            /**
             * A general purpose list that enables users to construct list items that conform to Calcite styling.
             */
            "calcite-list": LocalJSX.CalciteList & JSXBase.HTMLAttributes<HTMLCalciteListElement>;
            "calcite-list-item": LocalJSX.CalciteListItem & JSXBase.HTMLAttributes<HTMLCalciteListItemElement>;
            "calcite-list-item-group": LocalJSX.CalciteListItemGroup & JSXBase.HTMLAttributes<HTMLCalciteListItemGroupElement>;
            "calcite-loader": LocalJSX.CalciteLoader & JSXBase.HTMLAttributes<HTMLCalciteLoaderElement>;
            "calcite-modal": LocalJSX.CalciteModal & JSXBase.HTMLAttributes<HTMLCalciteModalElement>;
            "calcite-notice": LocalJSX.CalciteNotice & JSXBase.HTMLAttributes<HTMLCalciteNoticeElement>;
            "calcite-option": LocalJSX.CalciteOption & JSXBase.HTMLAttributes<HTMLCalciteOptionElement>;
            "calcite-option-group": LocalJSX.CalciteOptionGroup & JSXBase.HTMLAttributes<HTMLCalciteOptionGroupElement>;
            "calcite-pagination": LocalJSX.CalcitePagination & JSXBase.HTMLAttributes<HTMLCalcitePaginationElement>;
            "calcite-panel": LocalJSX.CalcitePanel & JSXBase.HTMLAttributes<HTMLCalcitePanelElement>;
            /**
             * @deprecated Use the `list` component instead.
             */
            "calcite-pick-list": LocalJSX.CalcitePickList & JSXBase.HTMLAttributes<HTMLCalcitePickListElement>;
            /**
             * @deprecated Use the `list` component instead.
             */
            "calcite-pick-list-group": LocalJSX.CalcitePickListGroup & JSXBase.HTMLAttributes<HTMLCalcitePickListGroupElement>;
            /**
             * @deprecated Use the `list` component instead.
             */
            "calcite-pick-list-item": LocalJSX.CalcitePickListItem & JSXBase.HTMLAttributes<HTMLCalcitePickListItemElement>;
            "calcite-popover": LocalJSX.CalcitePopover & JSXBase.HTMLAttributes<HTMLCalcitePopoverElement>;
            "calcite-progress": LocalJSX.CalciteProgress & JSXBase.HTMLAttributes<HTMLCalciteProgressElement>;
            "calcite-radio-button": LocalJSX.CalciteRadioButton & JSXBase.HTMLAttributes<HTMLCalciteRadioButtonElement>;
            "calcite-radio-button-group": LocalJSX.CalciteRadioButtonGroup & JSXBase.HTMLAttributes<HTMLCalciteRadioButtonGroupElement>;
            "calcite-rating": LocalJSX.CalciteRating & JSXBase.HTMLAttributes<HTMLCalciteRatingElement>;
            "calcite-scrim": LocalJSX.CalciteScrim & JSXBase.HTMLAttributes<HTMLCalciteScrimElement>;
            "calcite-segmented-control": LocalJSX.CalciteSegmentedControl & JSXBase.HTMLAttributes<HTMLCalciteSegmentedControlElement>;
            "calcite-segmented-control-item": LocalJSX.CalciteSegmentedControlItem & JSXBase.HTMLAttributes<HTMLCalciteSegmentedControlItemElement>;
            "calcite-select": LocalJSX.CalciteSelect & JSXBase.HTMLAttributes<HTMLCalciteSelectElement>;
            "calcite-shell": LocalJSX.CalciteShell & JSXBase.HTMLAttributes<HTMLCalciteShellElement>;
            "calcite-shell-center-row": LocalJSX.CalciteShellCenterRow & JSXBase.HTMLAttributes<HTMLCalciteShellCenterRowElement>;
            "calcite-shell-panel": LocalJSX.CalciteShellPanel & JSXBase.HTMLAttributes<HTMLCalciteShellPanelElement>;
            "calcite-slider": LocalJSX.CalciteSlider & JSXBase.HTMLAttributes<HTMLCalciteSliderElement>;
            "calcite-sortable-list": LocalJSX.CalciteSortableList & JSXBase.HTMLAttributes<HTMLCalciteSortableListElement>;
            "calcite-split-button": LocalJSX.CalciteSplitButton & JSXBase.HTMLAttributes<HTMLCalciteSplitButtonElement>;
            "calcite-stepper": LocalJSX.CalciteStepper & JSXBase.HTMLAttributes<HTMLCalciteStepperElement>;
            "calcite-stepper-item": LocalJSX.CalciteStepperItem & JSXBase.HTMLAttributes<HTMLCalciteStepperItemElement>;
            "calcite-switch": LocalJSX.CalciteSwitch & JSXBase.HTMLAttributes<HTMLCalciteSwitchElement>;
            "calcite-tab": LocalJSX.CalciteTab & JSXBase.HTMLAttributes<HTMLCalciteTabElement>;
            "calcite-tab-nav": LocalJSX.CalciteTabNav & JSXBase.HTMLAttributes<HTMLCalciteTabNavElement>;
            "calcite-tab-title": LocalJSX.CalciteTabTitle & JSXBase.HTMLAttributes<HTMLCalciteTabTitleElement>;
            "calcite-tabs": LocalJSX.CalciteTabs & JSXBase.HTMLAttributes<HTMLCalciteTabsElement>;
            "calcite-text-area": LocalJSX.CalciteTextArea & JSXBase.HTMLAttributes<HTMLCalciteTextAreaElement>;
            "calcite-tile": LocalJSX.CalciteTile & JSXBase.HTMLAttributes<HTMLCalciteTileElement>;
            "calcite-tile-select": LocalJSX.CalciteTileSelect & JSXBase.HTMLAttributes<HTMLCalciteTileSelectElement>;
            "calcite-tile-select-group": LocalJSX.CalciteTileSelectGroup & JSXBase.HTMLAttributes<HTMLCalciteTileSelectGroupElement>;
            "calcite-time-picker": LocalJSX.CalciteTimePicker & JSXBase.HTMLAttributes<HTMLCalciteTimePickerElement>;
            "calcite-tip": LocalJSX.CalciteTip & JSXBase.HTMLAttributes<HTMLCalciteTipElement>;
            "calcite-tip-group": LocalJSX.CalciteTipGroup & JSXBase.HTMLAttributes<HTMLCalciteTipGroupElement>;
            "calcite-tip-manager": LocalJSX.CalciteTipManager & JSXBase.HTMLAttributes<HTMLCalciteTipManagerElement>;
            "calcite-tooltip": LocalJSX.CalciteTooltip & JSXBase.HTMLAttributes<HTMLCalciteTooltipElement>;
            "calcite-tree": LocalJSX.CalciteTree & JSXBase.HTMLAttributes<HTMLCalciteTreeElement>;
            "calcite-tree-item": LocalJSX.CalciteTreeItem & JSXBase.HTMLAttributes<HTMLCalciteTreeItemElement>;
            /**
             * @deprecated Use the `list` component instead.
             */
            "calcite-value-list": LocalJSX.CalciteValueList & JSXBase.HTMLAttributes<HTMLCalciteValueListElement>;
            /**
             * @deprecated Use the `list` component instead.
             */
            "calcite-value-list-item": LocalJSX.CalciteValueListItem & JSXBase.HTMLAttributes<HTMLCalciteValueListItemElement>;
        }
    }
}
