import { EventEmitter, VNode } from "../../stencil-public-runtime";
import { ConditionalSlotComponent } from "../../utils/conditionalSlot";
import { LoadableComponent } from "../../utils/loadable";
import { LocalizedComponent } from "../../utils/locale";
import { T9nComponent } from "../../utils/t9n";
import { Appearance, Kind, Scale } from "../interfaces";
import { ChipMessages } from "./assets/chip/t9n";
/**
 * @slot - A slot for adding text.
 * @slot image - A slot for adding an image.
 */
export declare class Chip implements ConditionalSlotComponent, LoadableComponent, LocalizedComponent, T9nComponent {
  /** Specifies the appearance style of the component. */
  appearance: Extract<"outline" | "outline-fill" | "solid", Appearance>;
  /** Specifies the kind of the component (will apply to border and background if applicable). */
  kind: Extract<"brand" | "inverse" | "neutral", Kind>;
  /** When `true`, a close button is added to the component. */
  closable: boolean;
  /** Specifies an icon to display. */
  icon: string;
  /** When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`). */
  iconFlipRtl: boolean;
  /** Specifies the size of the component. */
  scale: Scale;
  /** The component's value. */
  value: any;
  /** When `true`, hides the component. */
  closed: boolean;
  /**
   * Use this property to override individual strings used by the component.
   */
  messageOverrides: Partial<ChipMessages>;
  /**
   * Made into a prop for testing purposes only
   *
   * @internal
   */
  messages: ChipMessages;
  onMessagesChange(): void;
  el: HTMLCalciteChipElement;
  defaultMessages: ChipMessages;
  effectiveLocale: string;
  effectiveLocaleChange(): void;
  connectedCallback(): void;
  componentDidLoad(): void;
  disconnectedCallback(): void;
  componentWillLoad(): Promise<void>;
  /** When `closable` is `true`, sets focus on the component's "close" button (the first focusable item). */
  setFocus(): Promise<void>;
  /**
   * Fires when the close button is clicked.
   */
  calciteChipClose: EventEmitter<void>;
  closeClickHandler: (event: MouseEvent) => void;
  private updateHasContent;
  private setupTextContentObserver;
  private handleSlotImageChange;
  /** watches for changing text content */
  private mutationObserver;
  private closeButton;
  private guid;
  /** determine if there is slotted content for styling purposes */
  private hasContent;
  /** determine if there is slotted image for styling purposes */
  private hasImage;
  renderChipImage(): VNode;
  render(): VNode;
}
