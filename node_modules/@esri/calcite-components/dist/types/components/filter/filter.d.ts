import { EventEmitter, VNode } from "../../stencil-public-runtime";
import { InteractiveComponent } from "../../utils/interactive";
import { LoadableComponent } from "../../utils/loadable";
import { LocalizedComponent } from "../../utils/locale";
import { T9nComponent } from "../../utils/t9n";
import { Scale } from "../interfaces";
import { FilterMessages } from "./assets/filter/t9n";
export declare class Filter implements InteractiveComponent, LoadableComponent, LocalizedComponent, T9nComponent {
  /**
   * Defines the items to filter. The component uses the values as the starting point, and returns items
   *
   * that contain the string entered in the input, using a partial match and recursive search.
   *
   * This property is needed to conduct filtering.
   *
   */
  items: object[];
  watchItemsHandler(): void;
  /**
   * When `true`, interaction is prevented and the component is displayed with lower opacity.
   */
  disabled: boolean;
  /**
   * The component's resulting items after filtering.
   *
   * @readonly
   */
  filteredItems: object[];
  /**
   * Specifies placeholder text for the input element.
   */
  placeholder: string;
  /**
   * Specifies the size of the component.
   */
  scale: Scale;
  /**
   * The component's value.
   */
  value: string;
  /**
   * Made into a prop for testing purposes only
   *
   * @internal
   */
  messages: FilterMessages;
  /**
   * Use this property to override individual strings used by the component.
   */
  messageOverrides: Partial<FilterMessages>;
  onMessagesChange(): void;
  valueHandler(value: string): void;
  el: HTMLCalciteFilterElement;
  textInput: HTMLCalciteInputElement;
  effectiveLocale: string;
  effectiveLocaleChange(): void;
  defaultMessages: FilterMessages;
  /**
   * This event fires when the filter text changes.
   */
  calciteFilterChange: EventEmitter<void>;
  componentWillLoad(): Promise<void>;
  connectedCallback(): void;
  componentDidRender(): void;
  disconnectedCallback(): void;
  componentDidLoad(): void;
  /** Sets focus on the component. */
  setFocus(): Promise<void>;
  private filter;
  inputHandler: (event: CustomEvent) => void;
  keyDownHandler: (event: KeyboardEvent) => void;
  clear: () => void;
  updateFiltered(filtered: any[], emit?: boolean): void;
  render(): VNode;
}
