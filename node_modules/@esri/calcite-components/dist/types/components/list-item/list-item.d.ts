import { Event, EventEmitter, VNode } from "../../stencil-public-runtime";
import { InteractiveComponent } from "../../utils/interactive";
import { SelectionMode } from "../interfaces";
import { SelectionAppearance } from "../list/resources";
import { LoadableComponent } from "../../utils/loadable";
/**
 * @slot - A slot for adding `calcite-list-item` and `calcite-list-item-group` elements.
 * @slot actions-start - A slot for adding actionable `calcite-action` elements before the content of the component.
 * @slot content-start - A slot for adding non-actionable elements before the label and description of the component.
 * @slot content - A slot for adding non-actionable, centered content in place of the `label` and `description` of the component.
 * @slot content-end - A slot for adding non-actionable elements after the label and description of the component.
 * @slot actions-end - A slot for adding actionable `calcite-action` elements after the content of the component.
 */
export declare class ListItem implements InteractiveComponent, LoadableComponent {
  /**
   * Sets the item as focusable. Only one item should be focusable within a list.
   *
   * @internal
   */
  active: boolean;
  activeHandler(active: boolean): void;
  /**
   * A description for the component. Displays below the label text.
   */
  description: string;
  /**
   * When `true`, interaction is prevented and the component is displayed with lower opacity.
   */
  disabled: boolean;
  /**
   * The label text of the component. Displays above the description text.
   */
  label: string;
  /**
   * Provides additional metadata to the component. Primary use is for a filter on the parent `calcite-list`.
   */
  metadata: Record<string, unknown>;
  /**
   * When `true`, the item is open to show child components.
   */
  open: boolean;
  /**
   * Used to specify the aria-setsize attribute to define the number of items in the current set of list for accessibility.
   *
   * @internal
   */
  setSize: number;
  /**
   * Used to specify the aria-posinset attribute to define the number or position in the current set of list items for accessibility.
   *
   * @internal
   */
  setPosition: number;
  /**
   * When `true`, the component is selected.
   */
  selected: boolean;
  handleSelectedChange(value: boolean): void;
  /**
   * The component's value.
   */
  value: any;
  /**
   * Specifies the selection mode - `"multiple"` (allow any number of selected items), `"single"` (allows and require one selected item), `"none"` (no selected items).
   *
   * @internal
   */
  selectionMode: Extract<"none" | "multiple" | "single", SelectionMode>;
  /**
   * Specifies the selection appearance - `"icon"` (displays a checkmark or dot) or `"border"` (displays a border).
   *
   * @internal
   */
  selectionAppearance: SelectionAppearance;
  /**
   * Emits when the item's content is selected.
   */
  calciteListItemSelect: EventEmitter<void>;
  /**
   *
   * @internal
   */
  calciteInternalListItemSelect: EventEmitter<void>;
  /**
   *
   * @internal
   */
  calciteInternalListItemActive: EventEmitter<void>;
  /**
   *
   * @internal
   */
  calciteInternalFocusPreviousItem: EventEmitter<void>;
  el: HTMLCalciteListItemElement;
  level: number;
  visualLevel: number;
  parentListEl: HTMLCalciteListElement;
  openable: boolean;
  hasActionsStart: boolean;
  hasActionsEnd: boolean;
  hasCustomContent: boolean;
  hasContentStart: boolean;
  hasContentEnd: boolean;
  containerEl: HTMLTableRowElement;
  contentEl: HTMLTableCellElement;
  actionsStartEl: HTMLTableCellElement;
  actionsEndEl: HTMLTableCellElement;
  connectedCallback(): void;
  componentWillLoad(): void;
  componentDidLoad(): void;
  componentDidRender(): void;
  /** Sets focus on the component. */
  setFocus(): Promise<void>;
  renderSelected(): VNode;
  renderOpen(): VNode;
  renderActionsStart(): VNode;
  renderActionsEnd(): VNode;
  renderContentStart(): VNode;
  renderCustomContent(): VNode;
  renderContentEnd(): VNode;
  renderContentProperties(): VNode;
  renderContentContainer(): VNode;
  render(): VNode;
  handleContentSlotChange: (event: Event) => void;
  handleActionsStartSlotChange: (event: Event) => void;
  handleActionsEndSlotChange: (event: Event) => void;
  handleContentStartSlotChange: (event: Event) => void;
  handleContentEndSlotChange: (event: Event) => void;
  setSelectionDefaults(): void;
  handleDefaultSlotChange: (event: Event) => void;
  toggleOpen: () => void;
  itemClicked: () => void;
  toggleSelected: () => void;
  handleItemKeyDown: (event: KeyboardEvent) => void;
  focusCellNull: () => void;
  focusCell: (focusEl: HTMLTableCellElement, saveFocusIndex?: boolean) => void;
}
