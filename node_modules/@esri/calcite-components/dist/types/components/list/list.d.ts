import { Event, EventEmitter, VNode } from "../../stencil-public-runtime";
import { InteractiveComponent } from "../../utils/interactive";
import { SelectionMode } from "../interfaces";
import { ItemData } from "../list-item/interfaces";
import { SelectionAppearance } from "./resources";
import { LoadableComponent } from "../../utils/loadable";
/**
 * A general purpose list that enables users to construct list items that conform to Calcite styling.
 *
 * @slot - A slot for adding `calcite-list-item` elements.
 */
export declare class List implements InteractiveComponent, LoadableComponent {
  /**
   * When `true`, interaction is prevented and the component is displayed with lower opacity.
   */
  disabled: boolean;
  /**
   * When `true`, an input appears at the top of the component that can be used by end users to filter `calcite-list-item`s.
   */
  filterEnabled: boolean;
  handleFilterEnabledChange(): void;
  /**
   * The currently filtered `calcite-list-item`s.
   *
   * @readonly
   */
  filteredItems: HTMLCalciteListItemElement[];
  /**
   * The currently filtered `calcite-list-item` data.
   *
   * @readonly
   */
  filteredData: ItemData;
  /**
   * Placeholder text for the component's filter input field.
   */
  filterPlaceholder: string;
  /**
   * Text for the component's filter input field.
   */
  filterText: string;
  /**
   * Specifies an accessible name for the component.
   */
  label: string;
  /**
   * When `true`, a busy indicator is displayed.
   */
  loading: boolean;
  /**
   * One of the items within the list can be opened.
   *
   * @internal
   */
  openable: boolean;
  /**
   * The currently selected items.
   *
   * @readonly
   */
  selectedItems: HTMLCalciteListItemElement[];
  /**
   * Specifies the selection mode - `"multiple"` (allow any number of selected items), `"single"` (allows and require one selected item), `"none"` (no selected items).
   */
  selectionMode: Extract<"none" | "multiple" | "single", SelectionMode>;
  /**
   * Specifies the selection appearance - `"icon"` (displays a checkmark or dot) or `"border"` (displays a border).
   */
  selectionAppearance: SelectionAppearance;
  handleSelectionAppearanceChange(): void;
  /**
   * Emits when the component's filter has changed.
   */
  calciteListFilter: EventEmitter<void>;
  handleCalciteInternalFocusPreviousItem(event: CustomEvent): void;
  handleCalciteListItemActive(event: CustomEvent): void;
  handleCalciteListItemSelect(event: CustomEvent): void;
  connectedCallback(): void;
  disconnectedCallback(): void;
  componentWillLoad(): void;
  componentDidRender(): void;
  componentDidLoad(): void;
  el: HTMLCalciteListElement;
  listItems: HTMLCalciteListItemElement[];
  enabledListItems: HTMLCalciteListItemElement[];
  mutationObserver: import("../../utils/observers").ExtendedMutationObserver;
  dataForFilter: ItemData;
  filterEl: HTMLCalciteFilterElement;
  /** Sets focus on the component's first focusable element. */
  setFocus(): Promise<void>;
  render(): VNode;
  handleDefaultSlotChange: (event: Event) => void;
  setActiveListItem: () => void;
  private updateSelectedItems;
  private updateFilteredItems;
  handleFilter: (event: CustomEvent) => void;
  getItemData: () => ItemData;
  private updateListItems;
  queryListItems: () => HTMLCalciteListItemElement[];
  focusRow: (focusEl: HTMLCalciteListItemElement) => void;
  isNavigable: (listItem: HTMLCalciteListItemElement) => boolean;
  handleListKeydown: (event: KeyboardEvent) => void;
}
