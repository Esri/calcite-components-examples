import { VNode } from "../../stencil-public-runtime";
import { ConditionalSlotComponent } from "../../utils/conditionalSlot";
import { LocalizedComponent } from "../../utils/locale";
import { T9nComponent } from "../../utils/t9n";
import { Position, Scale } from "../interfaces";
import { ShellPanelMessages } from "./assets/shell-panel/t9n";
/**
 * @slot - A slot for adding custom content.
 * @slot action-bar - A slot for adding a `calcite-action-bar` to the component.
 */
export declare class ShellPanel implements ConditionalSlotComponent, LocalizedComponent, T9nComponent {
  /**
   * When `true`, hides the component's content area.
   */
  collapsed: boolean;
  /**
   * When `true`, the content area displays like a floating panel.
   */
  detached: boolean;
  /**
   * When `detached`, specifies the maximum height of the component.
   */
  detachedHeightScale: Scale;
  /**
   * Specifies the width of the component's content area.
   */
  widthScale: Scale;
  /**
   * Specifies the component's position. Will be flipped when the element direction is right-to-left (`"rtl"`).
   */
  position: Position;
  /**
   * When `true` and not `detached`, the component's content area is resizable.
   */
  resizable: boolean;
  /**
   * Made into a prop for testing purposes only
   *
   * @internal
   */
  messages: ShellPanelMessages;
  /**
   * Use this property to override individual strings used by the component.
   */
  messageOverrides: Partial<ShellPanelMessages>;
  onMessagesChange(): void;
  connectedCallback(): void;
  componentWillLoad(): Promise<void>;
  disconnectedCallback(): void;
  componentDidLoad(): void;
  el: HTMLCalciteShellPanelElement;
  contentWidth: number;
  initialContentWidth: number;
  initialClientX: number;
  contentEl: HTMLDivElement;
  separatorEl: HTMLDivElement;
  contentWidthMax: number;
  contentWidthMin: number;
  step: number;
  stepMultiplier: number;
  defaultMessages: ShellPanelMessages;
  effectiveLocale: string;
  effectiveLocaleChange(): void;
  renderHeader(): VNode;
  render(): VNode;
  setContentWidth(width: number): void;
  updateAriaValues(): void;
  storeContentEl: (contentEl: HTMLDivElement) => void;
  getKeyAdjustedWidth: (event: KeyboardEvent) => number | null;
  separatorKeyDown: (event: KeyboardEvent) => void;
  separatorPointerMove: (event: PointerEvent) => void;
  separatorPointerUp: (event: PointerEvent) => void;
  setInitialContentWidth: () => void;
  separatorPointerDown: (event: PointerEvent) => void;
  connectSeparator: (separatorEl: HTMLDivElement) => void;
  disconnectSeparator: () => void;
}
