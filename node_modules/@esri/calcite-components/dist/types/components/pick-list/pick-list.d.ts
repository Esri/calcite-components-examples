import { EventEmitter, VNode } from "../../stencil-public-runtime";
import { InteractiveComponent } from "../../utils/interactive";
import { LoadableComponent } from "../../utils/loadable";
import { HeadingLevel } from "../functional/Heading";
import { ICON_TYPES } from "./resources";
import { ItemData, ListFocusId } from "./shared-list-logic";
/**
 * @deprecated Use the `list` component instead.
 * @slot - A slot for adding `calcite-pick-list-item` or `calcite-pick-list-group` elements. Items are displayed as a vertical list.
 * @slot menu-actions - A slot for adding a button and menu combination for performing actions, such as sorting.
 */
export declare class PickList<ItemElement extends HTMLCalcitePickListItemElement = HTMLCalcitePickListItemElement> implements InteractiveComponent, LoadableComponent {
  /**
   * When `true`, interaction is prevented and the component is displayed with lower opacity.
   */
  disabled: boolean;
  /**
   * The currently filtered items.
   *
   * @readonly
   */
  filteredItems: HTMLCalcitePickListItemElement[];
  /**
   * The currently filtered data.
   *
   * @readonly
   */
  filteredData: ItemData;
  /**
   * When `true`, an input appears at the top of the list that can be used by end users to filter items in the list.
   */
  filterEnabled: boolean;
  /**
   * Placeholder text for the filter input field.
   */
  filterPlaceholder: string;
  /**
   * Text for the filter input field.
   */
  filterText: string;
  /**
   * Specifies the number at which section headings should start.
   */
  headingLevel: HeadingLevel;
  /**
   * When `true`, a busy indicator is displayed.
   */
  loading: boolean;
  /**
   * Similar to standard radio buttons and checkboxes.
   * When `true`, a user can select multiple `calcite-pick-list-item`s at a time.
   * When `false`, only a single `calcite-pick-list-item` can be selected at a time,
   * and a new selection will deselect previous selections.
   */
  multiple: boolean;
  /**
   * When `true` and single selection is enabled, the selection changes when navigating `calcite-pick-list-item`s via keyboard.
   */
  selectionFollowsFocus: boolean;
  selectedValues: Map<string, ItemElement>;
  dataForFilter: ItemData;
  items: ItemElement[];
  lastSelectedItem: ItemElement;
  mutationObserver: import("../../utils/observers").ExtendedMutationObserver;
  el: HTMLCalcitePickListElement;
  emitCalciteListChange: () => void;
  emitCalciteListFilter: () => void;
  filterEl: HTMLCalciteFilterElement;
  connectedCallback(): void;
  disconnectedCallback(): void;
  componentWillLoad(): void;
  componentDidLoad(): void;
  componentDidRender(): void;
  /**
   * Emits when any of the `calcite-pick-list-item` selections have changed.
   */
  calciteListChange: EventEmitter<Map<string, HTMLCalcitePickListItemElement>>;
  /**
   * Emits when a filter has changed.
   */
  calciteListFilter: EventEmitter<void>;
  calciteListItemRemoveHandler(event: CustomEvent<void>): void;
  calciteListItemChangeHandler(event: CustomEvent): void;
  calciteInternalListItemPropsChangeHandler(event: CustomEvent): void;
  calciteInternalListItemValueChangeHandler(event: CustomEvent): void;
  calciteListFocusOutHandler(event: FocusEvent): void;
  setUpItems(): void;
  setUpFilter(): void;
  setFilterEl: (el: HTMLCalciteFilterElement) => void;
  setFilteredItems: (filteredItems: any[]) => void;
  deselectRemovedItems: any;
  deselectSiblingItems: any;
  selectSiblings: any;
  handleFilter: any;
  handleFilterEvent: any;
  getItemData: any;
  keyDownHandler: any;
  /** Returns the component's selected `calcite-pick-list-item`s. */
  getSelectedItems(): Promise<Map<string, HTMLCalcitePickListItemElement>>;
  /**
   * Sets focus on the component's first focusable element.
   *
   * @param focusId
   */
  setFocus(focusId?: ListFocusId): Promise<void>;
  getIconType(): ICON_TYPES;
  render(): VNode;
}
